namespace nManager.Helpful.Forms
{
    using nManager;
    using nManager.Helpful;
    using nManager.Helpful.Forms.UserControls;
    using nManager.Plugins;
    using nManager.Properties;
    using nManager.Wow.Bot.Tasks;
    using nManager.Wow.Helpers;
    using System;
    using System.ComponentModel;
    using System.Drawing;
    using System.Linq;
    using System.Net;
    using System.Net.Sockets;
    using System.Windows.Forms;

    public class GeneralSettings : Form
    {
        private TnbSwitchButton ActivateAlwaysOnTopFeature;
        private TnbSwitchButton ActivateAutoMaillingFeature;
        private Label ActivateAutoMaillingFeatureLabel;
        private TnbSwitchButton ActivateAutoMilling;
        private Label ActivateAutoMillingLabel;
        private TnbSwitchButton ActivateAutoProspecting;
        private Label ActivateAutoProspectingLabel;
        private TnbSwitchButton ActivateAutoRepairFeature;
        private Label ActivateAutoRepairFeatureLabel;
        private TnbSwitchButton ActivateAutoSellingFeature;
        private TnbSwitchButton ActivateAutoSmelting;
        private TnbSwitchButton ActivateBeastSkinning;
        private Label ActivateBeastSkinningLabel;
        private TnbSwitchButton ActivateBroadcastingMimesis;
        private Label ActivateBroadcastingMimesisLabel;
        private TnbSwitchButton ActivateChestLooting;
        private TnbButton ActivatedPluginResetSettings;
        private TnbButton ActivatedPluginSettings;
        private ListBox ActivatedPluginsList;
        private Label ActivatedPluginsListLabel;
        private TnbSwitchButton ActivateHerbsHarvesting;
        private Label ActivateHerbsHarvestingLabel;
        private TnbSwitchButton ActivateLootStatistics;
        private Label ActivateLootStatisticsLabel;
        private TnbSwitchButton ActivateMonsterLooting;
        private Label ActivateMonsterLootingLabel;
        private TnbSwitchButton ActivatePathFindingFeature;
        private Label ActivatePathFindingFeatureLabel;
        private TnbButton ActivatePlugin;
        private TnbSwitchButton ActivatePluginsSystem;
        private Label ActivatePluginsSystemLabel;
        private TnbSwitchButton ActivateReloggerFeature;
        private Label ActivateReloggerFeatureLabel;
        private TnbSwitchButton ActivateSkillsAutoTraining;
        private Label ActivateSkillsAutoTrainingLabel;
        private TnbSwitchButton ActivateVeinsHarvesting;
        private Label ActivateVeinsHarvestingLabel;
        private TnbSwitchButton ActiveStopTNBAfterXLevelup;
        private TnbSwitchButton ActiveStopTNBAfterXMinutes;
        private TnbSwitchButton ActiveStopTNBAfterXStucks;
        private TnbSwitchButton ActiveStopTNBIfReceivedAtMostXWhispers;
        private TnbButton addBlackListHarvest;
        private TnbExpendablePanel AdvancedSettingsPanelName;
        private TnbSwitchButton AllowTNBToSetYourMaxFps;
        private Label AllowTNBToSetYourMaxFpsLabel;
        private Label AlwaysOnTopFeatureLabel;
        private TextBox AquaticMountName;
        private Label AquaticMountNameLabel;
        private TnbSwitchButton AutoAssignTalents;
        private Label AutoAssignTalentsLabel;
        private TnbSwitchButton AutoCloseChatFrame;
        private Label AutoCloseChatFrameLabel;
        private TnbSwitchButton AutoConfirmOnBoPItems;
        private Label AutoConfirmOnBoPItemsLabel;
        private ListBox AvailablePluginsList;
        private Label AvailablePluginsListLabel;
        private TextBox BattleNetSubAccount;
        private Label BattleNetSubAccountLabel;
        private TnbSwitchButton BeastNinjaSkinning;
        private TnbSwitchButton BecomeApprenticeIfNeededByProduct;
        private Label BecomeApprenticeIfNeededByProductLabel;
        private TnbSwitchButton BecomeApprenticeOfSecondarySkillsWhileQuesting;
        private Label BecomeApprenticeOfSecondarySkillsWhileQuestingLabel;
        private TextBox BeverageName;
        private Label BeverageNameLabel;
        private Label BroadcastingIPLan;
        private Label BroadcastingIPLanLabel;
        private Label BroadcastingIPLocal;
        private Label BroadcastingIPLocalLabel;
        private Label BroadcastingIPWan;
        private Label BroadcastingIPWanLabel;
        private NumericUpDown BroadcastingPort;
        private Label BroadcastingPortDefaultLabel;
        private Label BroadcastingPortLabel;
        private TnbSwitchButton CanPullUnitsAlreadyInFight;
        private Label CanPullUnitsAlreadyInFightLabel;
        private TnbButton closeB;
        private Label CloseGameLabel;
        private TnbComboBox CombatClass;
        private Label CombatClassLabel;
        private TnbButton CombatClassResetSettingsButton;
        private TnbButton CombatClassSettingsButton;
        private IContainer components;
        private TnbButton DeactivatePlugin;
        private NumericUpDown DontHarvestIfMoreThanXUnitInAggroRange;
        private Label DontHarvestIfMoreThanXUnitInAggroRangeLabel;
        private NumericUpDown DontHarvestIfPlayerNearRadius;
        private Label DontHarvestIfPlayerNearRadiusLabel;
        private TextBox DontHarvestTheFollowingObjects;
        private Button DontHarvestTheFollowingObjectsHelper;
        private Label DontHarvestTheFollowingObjectsLabel;
        private TextBox DontMailTheseItems;
        private Label DontMailTheseItemsLabel;
        private TnbSwitchButton DontPullMonsters;
        private Label DontPullMonstersLabel;
        private TextBox DontSellTheseItems;
        private Label DontSellTheseItemsLabel;
        private TnbSwitchButton DoRegenManaIfLow;
        private NumericUpDown DrinkBeverageWhenManaIsUnderXPercent;
        private NumericUpDown EatFoodWhenHealthIsUnderXPercent;
        private TextBox EmailOfTheBattleNetAccount;
        private Label EmailOfTheBattleNetAccountLabel;
        private TextBox FlyingMountName;
        private Label FlyingMountNameLabel;
        private TextBox FoodName;
        private Label FoodNameLabel;
        private TextBox ForceToMailTheseItems;
        private Label ForceToMailTheseItemsLabel;
        private TextBox ForceToSellTheseItems;
        private Label ForceToSellTheseItemsLabel;
        private NumericUpDown GatheringSearchRadius;
        private Label GatheringSearchRadiusLabel;
        private TextBox GroundMountName;
        private Label GroundMountNameLabel;
        private TnbSwitchButton HarvestDuringLongDistanceMovements;
        private Label HarvestDuringLongDistanceMovementsLabel;
        private TnbComboBox HealerClass;
        private Label HealerClassLabel;
        private TnbButton HealerClassResetSettingsButton;
        private TnbButton HealerClassSettingsButton;
        private TextBox HerbsToBeMilled;
        private Label HerbsToBeMilledLabel;
        private TnbSwitchButton HideCharacterNameFromTitle;
        private Label HideCharacterNameFromTitleLabel;
        private TnbSwitchButton HideSDKFiles;
        private Label HideSDKFilesLabel;
        private TnbSwitchButton IgnoreFightIfMounted;
        private Label IgnoreFightIfMountedLabel;
        private ToolTip labelsToolTip;
        private Label labelX10;
        private Label labelX13;
        private Label labelX14;
        private Label labelX16;
        private Label labelX23;
        private Label labelX31;
        private Label labelX32;
        private Label labelX33;
        private Label labelX52;
        private Label labelX61;
        private Label labelX9;
        private TnbSwitchButton LaunchExpiredPlugins;
        private Label LaunchExpiredPluginsLabel;
        private TnbExpendablePanel LootingFarmingManagementPanelName;
        private CheckBox MailBlue;
        private CheckBox MailGray;
        private CheckBox MailGreen;
        private TextBox MaillingFeatureRecipient;
        private Label MaillingFeatureRecipientLabel;
        private TextBox MaillingFeatureSubject;
        private Label MaillingFeatureSubjectLabel;
        private CheckBox MailPurple;
        private TnbExpendablePanel MailsManagementPanelName;
        private CheckBox MailWhite;
        private TnbControlMenu MainHeader;
        private TnbRibbonManager MainPanel;
        private TnbSwitchButton MakeStackOfElementalsItems;
        private Label MakeStackOfElementalsItemsLabel;
        private NumericUpDown MaxDistanceToGoToMailboxesOrNPCs;
        private Label MaxDistanceToGoToMailboxesOrNPCsLabel;
        private TnbExpendablePanel MimesisBroadcasterSettingsPanel;
        private TextBox MineralsToProspect;
        private Label MineralsToProspectLabel;
        private NumericUpDown MinimumDistanceToUseMount;
        private Label MinimumDistanceToUseMountLabel;
        private TnbExpendablePanel MountManagementPanelName;
        private TnbExpendablePanel NPCsRepairSellBuyPanelName;
        private NumericUpDown NumberOfBeverageWeGot;
        private Label NumberOfBeverageWeGotLabel;
        private NumericUpDown NumberOfFoodsWeGot;
        private Label NumberOfFoodsWeGotLabel;
        private TnbSwitchButton OnlyTrainCurrentlyUsedSkills;
        private Label OnlyTrainCurrentlyUsedSkillsLabel;
        private TnbSwitchButton OnlyTrainIfWeHave2TimesMoreMoneyThanOurWishListSum;
        private Label OnlyTrainIfWeHave2TimesMoreMoneyThanOurWishListSumLabel;
        private TnbSwitchButton OnlyUseMillingInTown;
        private Label OnlyUseMillingInTownLabel;
        private TnbSwitchButton OnlyUseProspectingInTown;
        private Label OnlyUseProspectingInTownLabel;
        private TextBox PasswordOfTheBattleNetAccount;
        private Label PasswordOfTheBattleNetAccountLabel;
        private TnbSwitchButton PauseTNBIfNearByPlayer;
        private Label PauseTNBIfNearByPlayerLabel;
        private TnbSwitchButton PlayASongIfNewWhispReceived;
        private TnbExpendablePanel PluginsManagementSystemPanelName;
        private TnbSwitchButton RecordWhispsInLogFiles;
        private Label RecordWhispsInLogFilesLabel;
        private TnbExpendablePanel RegenerationManagementPanelName;
        private TnbExpendablePanel ReloggerManagementPanelName;
        private NumericUpDown RepairWhenDurabilityIsUnderPercent;
        private Label RepairWhenDurabilityIsUnderPercentLabel;
        private TnbButton resetB;
        private TnbButton saveAndCloseB;
        private Label SecuritySystemLabel;
        private TnbExpendablePanel SecuritySystemPanelName;
        private CheckBox SellBlue;
        private CheckBox SellGray;
        private CheckBox SellGreen;
        private NumericUpDown SellItemsWhenLessThanXSlotLeft;
        private Label SellItemsWhenLessThanXSlotLeftLabel;
        private CheckBox SellPurple;
        private CheckBox SellWhite;
        private NumericUpDown SendMailWhenLessThanXSlotLeft;
        private Label SendMailWhenLessThanXSlotLeftLabel;
        private TnbExpendablePanel SpellManagementSystemPanelName;
        private NumericUpDown StopTNBAfterXLevelup;
        private Label StopTNBAfterXLevelupLabel;
        private NumericUpDown StopTNBAfterXMinutes;
        private Label StopTNBAfterXMinutesLabel;
        private NumericUpDown StopTNBAfterXStucks;
        private Label StopTNBAfterXStucksLabel;
        private TnbSwitchButton StopTNBIfBagAreFull;
        private Label StopTNBIfBagAreFullLabel;
        private TnbSwitchButton StopTNBIfHonorPointsLimitReached;
        private Label StopTNBIfHonorPointsLimitReachedLabel;
        private TnbSwitchButton StopTNBIfPlayerHaveBeenTeleported;
        private Label StopTNBIfPlayerHaveBeenTeleportedLabel;
        private NumericUpDown StopTNBIfReceivedAtMostXWhispers;
        private Label StopTNBIfReceivedAtMostXWhispersLabel;
        private NumericUpDown TimeBetweenEachMillingAttempt;
        private Label TimeBetweenEachMillingAttemptLabel;
        private NumericUpDown TimeBetweenEachProspectingAttempt;
        private Label TimeBetweenEachProspectingAttemptLabel;
        private TnbSwitchButton TrainMountingCapacity;
        private Label TrainMountingCapacityLabel;
        private TnbSwitchButton UseFrameLock;
        private Label UseFrameLockLabel;
        private TnbSwitchButton UseGroundMount;
        private Label UseGroundMountLabel;
        private TnbSwitchButton UseHearthstone;
        private Label UseHearthstoneLabel;
        private TnbSwitchButton UseLootARange;
        private Label UseLootARangeLabel;
        private TnbSwitchButton UseMollE;
        private Label UseMollELabel;
        private TnbSwitchButton UseRobot;
        private Label UseRobotLabel;
        private TnbSwitchButton UseSpiritHealer;
        private Label UseSpiritHealerLabel;

        public GeneralSettings()
        {
            try
            {
                this.InitializeComponent();
                this.TranslateForm();
                if (nManagerSetting.CurrentSetting.ActivateAlwaysOnTopFeature)
                {
                    base.TopMost = true;
                }
                nManager.Plugins.Plugins.DisposePlugins();
                foreach (string str in Others.GetFilesDirectory(Application.StartupPath + @"\CombatClasses\", "*.dll"))
                {
                    this.CombatClass.Items.Add(str);
                }
                foreach (string str2 in Others.GetFilesDirectory(Application.StartupPath + @"\CombatClasses\", "*.cs"))
                {
                    if (!nManagerSetting.CurrentSetting.HideSdkFiles || !this.CombatClass.Items.Contains(str2.Replace(".cs", ".dll")))
                    {
                        this.CombatClass.Items.Add(str2);
                    }
                }
                foreach (string str3 in Others.GetFilesDirectory(Application.StartupPath + @"\HealerClasses\", "*.dll"))
                {
                    this.HealerClass.Items.Add(str3);
                }
                foreach (string str4 in Others.GetFilesDirectory(Application.StartupPath + @"\HealerClasses\", "*.cs"))
                {
                    if (!nManagerSetting.CurrentSetting.HideSdkFiles || !this.HealerClass.Items.Contains(str4.Replace(".cs", ".dll")))
                    {
                        this.HealerClass.Items.Add(str4);
                    }
                }
                foreach (string str5 in Others.GetFilesDirectory(Application.StartupPath + @"\Plugins\", "*.dll"))
                {
                    this.AvailablePluginsList.Items.Add(str5);
                }
                foreach (string str6 in Others.GetFilesDirectory(Application.StartupPath + @"\Plugins\", "*.cs"))
                {
                    if ((!nManagerSetting.CurrentSetting.HideSdkFiles || (str6 != "SDK_PluginTemplate.cs")) && (!nManagerSetting.CurrentSetting.HideSdkFiles || !this.AvailablePluginsList.Items.Contains(str6.Replace(".cs", ".dll"))))
                    {
                        this.AvailablePluginsList.Items.Add(str6);
                    }
                }
                this.LoadSetting(nManagerSetting.CurrentSetting);
                IPAddress address = Dns.GetHostAddresses(Dns.GetHostName()).FirstOrDefault<IPAddress>(test => test.AddressFamily == AddressFamily.InterNetwork);
                this.BroadcastingIPLan.Text = (address != null) ? address.ToString() : "No Lan IPv4 found";
                this.BroadcastingIPWan.Text = Others.GetClientIPAddress;
            }
            catch (Exception exception)
            {
                nManager.Helpful.Logging.WriteError("GeneralSettings > GeneralSettings(): " + exception, true);
            }
        }

        private void closeB_Click(object sender, EventArgs e)
        {
            try
            {
                base.Close();
            }
            catch (Exception exception)
            {
                nManager.Helpful.Logging.WriteError("GeneralSettings > closeB_Click(object sender, EventArgs e): " + exception, true);
            }
        }

        private void CombatClassResetSettingsButton_Click(object sender, EventArgs e)
        {
            nManager.Wow.Helpers.CombatClass.ResetConfigurationCombatClass(Application.StartupPath + @"\CombatClasses\" + this.CombatClass.Text);
        }

        private void CombatClassSettingsButton_Click(object sender, EventArgs e)
        {
            nManager.Wow.Helpers.CombatClass.ShowConfigurationCombatClass(Application.StartupPath + @"\CombatClasses\" + this.CombatClass.Text);
        }

        private void ConfigurePlugin(object sender, EventArgs e)
        {
            this.ActivatedPluginSettings.Enabled = false;
            if ((this.ActivatedPluginsList.Items.Count <= 0) || (this.ActivatedPluginsList.SelectedIndex < 0))
            {
                MessageBox.Show("There is no plugins activated or selected.");
                this.ActivatedPluginSettings.Enabled = true;
            }
            else
            {
                Plugin plugin2 = new Plugin {
                    PathToPluginFile = Application.StartupPath + @"\Plugins\" + this.ActivatedPluginsList.SelectedItem
                };
                plugin2.ShowConfigurationPlugin();
                this.ActivatedPluginSettings.Enabled = true;
            }
        }

        protected override void Dispose(bool disposing)
        {
            if (disposing && (this.components != null))
            {
                this.components.Dispose();
            }
            base.Dispose(disposing);
        }

        private void DontHaverstObjectsTutorial_Click(object sender, EventArgs e)
        {
            Others.OpenWebBrowserOrApplication("http://thenoobbot.com/community/viewtopic.php?f=43&t=5612");
        }

        private void GeneralSettings_FormClosing(object sender, FormClosingEventArgs e)
        {
            try
            {
                if (e.CloseReason == CloseReason.UserClosing)
                {
                    if (MessageBox.Show(string.Format("{0}?", Translate.Get(Translate.Id.Do_you_want_save_this_setting)), Translate.Get(Translate.Id.Save), MessageBoxButtons.YesNo, MessageBoxIcon.Question) == DialogResult.Yes)
                    {
                        this.SaveSetting();
                    }
                    else if (nManagerSetting.CurrentSetting.ActivatePluginsSystem)
                    {
                        nManager.Plugins.Plugins.ReLoadPlugins();
                    }
                }
            }
            catch (Exception exception)
            {
                nManager.Helpful.Logging.WriteError("GeneralSettings > GeneralSettings_FormClosing(object sender, FormClosingEventArgs e): " + exception, true);
            }
        }

        private void HealerClassResetSettingsButton_Click(object sender, EventArgs e)
        {
            nManager.Wow.Helpers.HealerClass.ResetConfigurationHealerClass(Application.StartupPath + @"\HealerClass\" + this.HealerClass.Text);
        }

        private void HealerClassSettingsButton_Click(object sender, EventArgs e)
        {
            nManager.Wow.Helpers.HealerClass.ShowConfigurationHealerClass(Application.StartupPath + @"\HealerClass\" + this.HealerClass.Text);
        }

        private void InitializeComponent()
        {
            this.components = new Container();
            ComponentResourceManager manager = new ComponentResourceManager(typeof(GeneralSettings));
            this.labelsToolTip = new ToolTip(this.components);
            this.closeB = new TnbButton();
            this.resetB = new TnbButton();
            this.saveAndCloseB = new TnbButton();
            this.MainPanel = new TnbRibbonManager();
            this.SpellManagementSystemPanelName = new TnbExpendablePanel();
            this.HealerClass = new TnbComboBox();
            this.CombatClass = new TnbComboBox();
            this.BecomeApprenticeOfSecondarySkillsWhileQuestingLabel = new Label();
            this.BecomeApprenticeOfSecondarySkillsWhileQuesting = new TnbSwitchButton();
            this.BecomeApprenticeIfNeededByProductLabel = new Label();
            this.BecomeApprenticeIfNeededByProduct = new TnbSwitchButton();
            this.TrainMountingCapacityLabel = new Label();
            this.TrainMountingCapacity = new TnbSwitchButton();
            this.OnlyTrainIfWeHave2TimesMoreMoneyThanOurWishListSumLabel = new Label();
            this.OnlyTrainIfWeHave2TimesMoreMoneyThanOurWishListSum = new TnbSwitchButton();
            this.OnlyTrainCurrentlyUsedSkillsLabel = new Label();
            this.OnlyTrainCurrentlyUsedSkills = new TnbSwitchButton();
            this.HealerClassResetSettingsButton = new TnbButton();
            this.HealerClassLabel = new Label();
            this.HealerClassSettingsButton = new TnbButton();
            this.CombatClassResetSettingsButton = new TnbButton();
            this.UseSpiritHealerLabel = new Label();
            this.UseSpiritHealer = new TnbSwitchButton();
            this.ActivateSkillsAutoTrainingLabel = new Label();
            this.ActivateSkillsAutoTraining = new TnbSwitchButton();
            this.DontPullMonstersLabel = new Label();
            this.DontPullMonsters = new TnbSwitchButton();
            this.CanPullUnitsAlreadyInFightLabel = new Label();
            this.CanPullUnitsAlreadyInFight = new TnbSwitchButton();
            this.AutoAssignTalentsLabel = new Label();
            this.AutoAssignTalents = new TnbSwitchButton();
            this.CombatClassLabel = new Label();
            this.CombatClassSettingsButton = new TnbButton();
            this.PluginsManagementSystemPanelName = new TnbExpendablePanel();
            this.ActivatedPluginResetSettings = new TnbButton();
            this.ActivatedPluginSettings = new TnbButton();
            this.DeactivatePlugin = new TnbButton();
            this.ActivatePlugin = new TnbButton();
            this.LaunchExpiredPlugins = new TnbSwitchButton();
            this.ActivatePluginsSystem = new TnbSwitchButton();
            this.LaunchExpiredPluginsLabel = new Label();
            this.ActivatePluginsSystemLabel = new Label();
            this.ActivatedPluginsListLabel = new Label();
            this.ActivatedPluginsList = new ListBox();
            this.AvailablePluginsListLabel = new Label();
            this.AvailablePluginsList = new ListBox();
            this.MountManagementPanelName = new TnbExpendablePanel();
            this.AquaticMountName = new TextBox();
            this.AquaticMountNameLabel = new Label();
            this.IgnoreFightIfMountedLabel = new Label();
            this.IgnoreFightIfMounted = new TnbSwitchButton();
            this.MinimumDistanceToUseMount = new NumericUpDown();
            this.MinimumDistanceToUseMountLabel = new Label();
            this.FlyingMountName = new TextBox();
            this.FlyingMountNameLabel = new Label();
            this.GroundMountName = new TextBox();
            this.GroundMountNameLabel = new Label();
            this.UseGroundMountLabel = new Label();
            this.UseGroundMount = new TnbSwitchButton();
            this.LootingFarmingManagementPanelName = new TnbExpendablePanel();
            this.UseLootARangeLabel = new Label();
            this.UseLootARange = new TnbSwitchButton();
            this.ActivateLootStatisticsLabel = new Label();
            this.ActivateLootStatistics = new TnbSwitchButton();
            this.DontHarvestTheFollowingObjectsHelper = new Button();
            this.DontHarvestTheFollowingObjects = new TextBox();
            this.AutoConfirmOnBoPItems = new TnbSwitchButton();
            this.AutoConfirmOnBoPItemsLabel = new Label();
            this.OnlyUseMillingInTownLabel = new Label();
            this.OnlyUseMillingInTown = new TnbSwitchButton();
            this.TimeBetweenEachMillingAttempt = new NumericUpDown();
            this.TimeBetweenEachMillingAttemptLabel = new Label();
            this.ActivateAutoMillingLabel = new Label();
            this.ActivateAutoMilling = new TnbSwitchButton();
            this.HerbsToBeMilled = new TextBox();
            this.HerbsToBeMilledLabel = new Label();
            this.MakeStackOfElementalsItemsLabel = new Label();
            this.MakeStackOfElementalsItems = new TnbSwitchButton();
            this.OnlyUseProspectingInTownLabel = new Label();
            this.OnlyUseProspectingInTown = new TnbSwitchButton();
            this.TimeBetweenEachProspectingAttempt = new NumericUpDown();
            this.TimeBetweenEachProspectingAttemptLabel = new Label();
            this.ActivateAutoProspectingLabel = new Label();
            this.ActivateAutoProspecting = new TnbSwitchButton();
            this.MineralsToProspect = new TextBox();
            this.MineralsToProspectLabel = new Label();
            this.labelX61 = new Label();
            this.ActivateAutoSmelting = new TnbSwitchButton();
            this.DontHarvestTheFollowingObjectsLabel = new Label();
            this.addBlackListHarvest = new TnbButton();
            this.HarvestDuringLongDistanceMovementsLabel = new Label();
            this.HarvestDuringLongDistanceMovements = new TnbSwitchButton();
            this.labelX23 = new Label();
            this.BeastNinjaSkinning = new TnbSwitchButton();
            this.GatheringSearchRadius = new NumericUpDown();
            this.GatheringSearchRadiusLabel = new Label();
            this.DontHarvestIfMoreThanXUnitInAggroRange = new NumericUpDown();
            this.DontHarvestIfMoreThanXUnitInAggroRangeLabel = new Label();
            this.ActivateHerbsHarvestingLabel = new Label();
            this.ActivateHerbsHarvesting = new TnbSwitchButton();
            this.ActivateVeinsHarvestingLabel = new Label();
            this.ActivateVeinsHarvesting = new TnbSwitchButton();
            this.ActivateBeastSkinningLabel = new Label();
            this.ActivateBeastSkinning = new TnbSwitchButton();
            this.labelX16 = new Label();
            this.ActivateChestLooting = new TnbSwitchButton();
            this.DontHarvestIfPlayerNearRadius = new NumericUpDown();
            this.DontHarvestIfPlayerNearRadiusLabel = new Label();
            this.ActivateMonsterLootingLabel = new Label();
            this.ActivateMonsterLooting = new TnbSwitchButton();
            this.NPCsRepairSellBuyPanelName = new TnbExpendablePanel();
            this.SellPurple = new CheckBox();
            this.SellBlue = new CheckBox();
            this.SellGreen = new CheckBox();
            this.SellWhite = new CheckBox();
            this.SellGray = new CheckBox();
            this.UseRobotLabel = new Label();
            this.UseRobot = new TnbSwitchButton();
            this.SellItemsWhenLessThanXSlotLeft = new NumericUpDown();
            this.RepairWhenDurabilityIsUnderPercent = new NumericUpDown();
            this.SellItemsWhenLessThanXSlotLeftLabel = new Label();
            this.RepairWhenDurabilityIsUnderPercentLabel = new Label();
            this.ForceToSellTheseItems = new TextBox();
            this.ForceToSellTheseItemsLabel = new Label();
            this.labelX52 = new Label();
            this.ActivateAutoSellingFeature = new TnbSwitchButton();
            this.ActivateAutoRepairFeatureLabel = new Label();
            this.ActivateAutoRepairFeature = new TnbSwitchButton();
            this.NumberOfFoodsWeGot = new NumericUpDown();
            this.NumberOfFoodsWeGotLabel = new Label();
            this.NumberOfBeverageWeGot = new NumericUpDown();
            this.NumberOfBeverageWeGotLabel = new Label();
            this.DontSellTheseItems = new TextBox();
            this.DontSellTheseItemsLabel = new Label();
            this.MailsManagementPanelName = new TnbExpendablePanel();
            this.MailPurple = new CheckBox();
            this.MailBlue = new CheckBox();
            this.MailGreen = new CheckBox();
            this.MailWhite = new CheckBox();
            this.MailGray = new CheckBox();
            this.UseMollELabel = new Label();
            this.UseMollE = new TnbSwitchButton();
            this.SendMailWhenLessThanXSlotLeft = new NumericUpDown();
            this.SendMailWhenLessThanXSlotLeftLabel = new Label();
            this.MaillingFeatureRecipient = new TextBox();
            this.MaillingFeatureRecipientLabel = new Label();
            this.MaillingFeatureSubject = new TextBox();
            this.ForceToMailTheseItems = new TextBox();
            this.ForceToMailTheseItemsLabel = new Label();
            this.MaillingFeatureSubjectLabel = new Label();
            this.ActivateAutoMaillingFeatureLabel = new Label();
            this.ActivateAutoMaillingFeature = new TnbSwitchButton();
            this.DontMailTheseItems = new TextBox();
            this.DontMailTheseItemsLabel = new Label();
            this.RegenerationManagementPanelName = new TnbExpendablePanel();
            this.DoRegenManaIfLow = new TnbSwitchButton();
            this.labelX9 = new Label();
            this.labelX10 = new Label();
            this.DrinkBeverageWhenManaIsUnderXPercent = new NumericUpDown();
            this.BeverageName = new TextBox();
            this.BeverageNameLabel = new Label();
            this.labelX14 = new Label();
            this.labelX13 = new Label();
            this.EatFoodWhenHealthIsUnderXPercent = new NumericUpDown();
            this.FoodName = new TextBox();
            this.FoodNameLabel = new Label();
            this.SecuritySystemPanelName = new TnbExpendablePanel();
            this.UseHearthstoneLabel = new Label();
            this.ActiveStopTNBAfterXMinutes = new TnbSwitchButton();
            this.ActiveStopTNBAfterXStucks = new TnbSwitchButton();
            this.ActiveStopTNBIfReceivedAtMostXWhispers = new TnbSwitchButton();
            this.ActiveStopTNBAfterXLevelup = new TnbSwitchButton();
            this.UseHearthstone = new TnbSwitchButton();
            this.SecuritySystemLabel = new Label();
            this.PlayASongIfNewWhispReceived = new TnbSwitchButton();
            this.CloseGameLabel = new Label();
            this.labelX33 = new Label();
            this.RecordWhispsInLogFilesLabel = new Label();
            this.labelX32 = new Label();
            this.labelX31 = new Label();
            this.RecordWhispsInLogFiles = new TnbSwitchButton();
            this.StopTNBIfPlayerHaveBeenTeleportedLabel = new Label();
            this.StopTNBIfPlayerHaveBeenTeleported = new TnbSwitchButton();
            this.PauseTNBIfNearByPlayerLabel = new Label();
            this.StopTNBIfHonorPointsLimitReachedLabel = new Label();
            this.PauseTNBIfNearByPlayer = new TnbSwitchButton();
            this.StopTNBIfHonorPointsLimitReached = new TnbSwitchButton();
            this.StopTNBAfterXMinutes = new NumericUpDown();
            this.StopTNBAfterXMinutesLabel = new Label();
            this.StopTNBAfterXStucks = new NumericUpDown();
            this.StopTNBAfterXStucksLabel = new Label();
            this.StopTNBIfReceivedAtMostXWhispers = new NumericUpDown();
            this.StopTNBIfReceivedAtMostXWhispersLabel = new Label();
            this.StopTNBAfterXLevelup = new NumericUpDown();
            this.StopTNBAfterXLevelupLabel = new Label();
            this.StopTNBIfBagAreFullLabel = new Label();
            this.StopTNBIfBagAreFull = new TnbSwitchButton();
            this.ReloggerManagementPanelName = new TnbExpendablePanel();
            this.BattleNetSubAccount = new TextBox();
            this.BattleNetSubAccountLabel = new Label();
            this.ActivateReloggerFeatureLabel = new Label();
            this.ActivateReloggerFeature = new TnbSwitchButton();
            this.PasswordOfTheBattleNetAccount = new TextBox();
            this.PasswordOfTheBattleNetAccountLabel = new Label();
            this.EmailOfTheBattleNetAccount = new TextBox();
            this.EmailOfTheBattleNetAccountLabel = new Label();
            this.MimesisBroadcasterSettingsPanel = new TnbExpendablePanel();
            this.BroadcastingPort = new NumericUpDown();
            this.BroadcastingIPWan = new Label();
            this.BroadcastingIPLan = new Label();
            this.BroadcastingIPLocal = new Label();
            this.BroadcastingPortDefaultLabel = new Label();
            this.BroadcastingIPWanLabel = new Label();
            this.BroadcastingIPLanLabel = new Label();
            this.ActivateBroadcastingMimesisLabel = new Label();
            this.ActivateBroadcastingMimesis = new TnbSwitchButton();
            this.BroadcastingIPLocalLabel = new Label();
            this.BroadcastingPortLabel = new Label();
            this.AdvancedSettingsPanelName = new TnbExpendablePanel();
            this.UseFrameLockLabel = new Label();
            this.UseFrameLock = new TnbSwitchButton();
            this.HideSDKFilesLabel = new Label();
            this.HideSDKFiles = new TnbSwitchButton();
            this.AutoCloseChatFrameLabel = new Label();
            this.AutoCloseChatFrame = new TnbSwitchButton();
            this.AlwaysOnTopFeatureLabel = new Label();
            this.ActivateAlwaysOnTopFeature = new TnbSwitchButton();
            this.AllowTNBToSetYourMaxFpsLabel = new Label();
            this.AllowTNBToSetYourMaxFps = new TnbSwitchButton();
            this.MaxDistanceToGoToMailboxesOrNPCs = new NumericUpDown();
            this.MaxDistanceToGoToMailboxesOrNPCsLabel = new Label();
            this.ActivatePathFindingFeatureLabel = new Label();
            this.ActivatePathFindingFeature = new TnbSwitchButton();
            this.MainHeader = new TnbControlMenu();
            this.HideCharacterNameFromTitleLabel = new Label();
            this.HideCharacterNameFromTitle = new TnbSwitchButton();
            this.MainPanel.SuspendLayout();
            this.SpellManagementSystemPanelName.SuspendLayout();
            this.PluginsManagementSystemPanelName.SuspendLayout();
            this.MountManagementPanelName.SuspendLayout();
            this.MinimumDistanceToUseMount.BeginInit();
            this.LootingFarmingManagementPanelName.SuspendLayout();
            this.TimeBetweenEachMillingAttempt.BeginInit();
            this.TimeBetweenEachProspectingAttempt.BeginInit();
            this.GatheringSearchRadius.BeginInit();
            this.DontHarvestIfMoreThanXUnitInAggroRange.BeginInit();
            this.DontHarvestIfPlayerNearRadius.BeginInit();
            this.NPCsRepairSellBuyPanelName.SuspendLayout();
            this.SellItemsWhenLessThanXSlotLeft.BeginInit();
            this.RepairWhenDurabilityIsUnderPercent.BeginInit();
            this.NumberOfFoodsWeGot.BeginInit();
            this.NumberOfBeverageWeGot.BeginInit();
            this.MailsManagementPanelName.SuspendLayout();
            this.SendMailWhenLessThanXSlotLeft.BeginInit();
            this.RegenerationManagementPanelName.SuspendLayout();
            this.DrinkBeverageWhenManaIsUnderXPercent.BeginInit();
            this.EatFoodWhenHealthIsUnderXPercent.BeginInit();
            this.SecuritySystemPanelName.SuspendLayout();
            this.StopTNBAfterXMinutes.BeginInit();
            this.StopTNBAfterXStucks.BeginInit();
            this.StopTNBIfReceivedAtMostXWhispers.BeginInit();
            this.StopTNBAfterXLevelup.BeginInit();
            this.ReloggerManagementPanelName.SuspendLayout();
            this.MimesisBroadcasterSettingsPanel.SuspendLayout();
            this.BroadcastingPort.BeginInit();
            this.AdvancedSettingsPanelName.SuspendLayout();
            this.MaxDistanceToGoToMailboxesOrNPCs.BeginInit();
            base.SuspendLayout();
            this.closeB.AutoEllipsis = true;
            this.closeB.Font = new Font("Microsoft Sans Serif", 8.25f, FontStyle.Bold);
            this.closeB.ForeColor = Color.Snow;
            this.closeB.HooverImage = Resources.greenB_150;
            this.closeB.Image = Resources.blackB_150;
            this.closeB.Location = new Point(0x5d, 0x19e);
            this.closeB.Name = "closeB";
            this.closeB.Size = new Size(150, 0x1d);
            this.closeB.TabIndex = 6;
            this.closeB.Text = "Close without save";
            this.closeB.TextAlign = ContentAlignment.MiddleCenter;
            this.closeB.Click += new EventHandler(this.closeB_Click);
            this.resetB.AutoEllipsis = true;
            this.resetB.Font = new Font("Microsoft Sans Serif", 8.25f, FontStyle.Bold);
            this.resetB.ForeColor = Color.Snow;
            this.resetB.HooverImage = Resources.greenB_150;
            this.resetB.Image = Resources.blackB_150;
            this.resetB.Location = new Point(0xfd, 0x19e);
            this.resetB.Name = "resetB";
            this.resetB.Size = new Size(150, 0x1d);
            this.resetB.TabIndex = 5;
            this.resetB.Text = "Reset Settings";
            this.resetB.TextAlign = ContentAlignment.MiddleCenter;
            this.resetB.Click += new EventHandler(this.resetB_Click);
            this.saveAndCloseB.AutoEllipsis = true;
            this.saveAndCloseB.Font = new Font("Microsoft Sans Serif", 8.25f, FontStyle.Bold);
            this.saveAndCloseB.ForeColor = Color.Snow;
            this.saveAndCloseB.HooverImage = Resources.greenB_150;
            this.saveAndCloseB.Image = Resources.blueB_150;
            this.saveAndCloseB.Location = new Point(0x19d, 0x19e);
            this.saveAndCloseB.Name = "saveAndCloseB";
            this.saveAndCloseB.Size = new Size(150, 0x1d);
            this.saveAndCloseB.TabIndex = 4;
            this.saveAndCloseB.Text = "Save and Close";
            this.saveAndCloseB.TextAlign = ContentAlignment.MiddleCenter;
            this.saveAndCloseB.Click += new EventHandler(this.saveAndCloseB_Click);
            this.MainPanel.Anchor = AnchorStyles.None;
            this.MainPanel.AutoScroll = true;
            this.MainPanel.AutoScrollMinSize = new Size(0, 0x169);
            this.MainPanel.BackColor = Color.Transparent;
            this.MainPanel.Controls.Add(this.SpellManagementSystemPanelName);
            this.MainPanel.Controls.Add(this.PluginsManagementSystemPanelName);
            this.MainPanel.Controls.Add(this.MountManagementPanelName);
            this.MainPanel.Controls.Add(this.LootingFarmingManagementPanelName);
            this.MainPanel.Controls.Add(this.NPCsRepairSellBuyPanelName);
            this.MainPanel.Controls.Add(this.MailsManagementPanelName);
            this.MainPanel.Controls.Add(this.RegenerationManagementPanelName);
            this.MainPanel.Controls.Add(this.SecuritySystemPanelName);
            this.MainPanel.Controls.Add(this.ReloggerManagementPanelName);
            this.MainPanel.Controls.Add(this.MimesisBroadcasterSettingsPanel);
            this.MainPanel.Controls.Add(this.AdvancedSettingsPanelName);
            this.MainPanel.ForeColor = Color.Black;
            this.MainPanel.Location = new Point(1, 0x2b);
            this.MainPanel.Name = "MainPanel";
            this.MainPanel.Size = new Size(0x23d, 360);
            this.MainPanel.TabIndex = 3;
            this.SpellManagementSystemPanelName.BackColor = Color.FromArgb(0xe8, 0xe8, 0xe8);
            this.SpellManagementSystemPanelName.BorderColor = Color.FromArgb(0x34, 0x34, 0x34);
            this.SpellManagementSystemPanelName.BorderStyle = ButtonBorderStyle.Solid;
            this.SpellManagementSystemPanelName.ContentSize = new Size(0x22c, 0xe1);
            this.SpellManagementSystemPanelName.Controls.Add(this.HealerClass);
            this.SpellManagementSystemPanelName.Controls.Add(this.CombatClass);
            this.SpellManagementSystemPanelName.Controls.Add(this.BecomeApprenticeOfSecondarySkillsWhileQuestingLabel);
            this.SpellManagementSystemPanelName.Controls.Add(this.BecomeApprenticeOfSecondarySkillsWhileQuesting);
            this.SpellManagementSystemPanelName.Controls.Add(this.BecomeApprenticeIfNeededByProductLabel);
            this.SpellManagementSystemPanelName.Controls.Add(this.BecomeApprenticeIfNeededByProduct);
            this.SpellManagementSystemPanelName.Controls.Add(this.TrainMountingCapacityLabel);
            this.SpellManagementSystemPanelName.Controls.Add(this.TrainMountingCapacity);
            this.SpellManagementSystemPanelName.Controls.Add(this.OnlyTrainIfWeHave2TimesMoreMoneyThanOurWishListSumLabel);
            this.SpellManagementSystemPanelName.Controls.Add(this.OnlyTrainIfWeHave2TimesMoreMoneyThanOurWishListSum);
            this.SpellManagementSystemPanelName.Controls.Add(this.OnlyTrainCurrentlyUsedSkillsLabel);
            this.SpellManagementSystemPanelName.Controls.Add(this.OnlyTrainCurrentlyUsedSkills);
            this.SpellManagementSystemPanelName.Controls.Add(this.HealerClassResetSettingsButton);
            this.SpellManagementSystemPanelName.Controls.Add(this.HealerClassLabel);
            this.SpellManagementSystemPanelName.Controls.Add(this.HealerClassSettingsButton);
            this.SpellManagementSystemPanelName.Controls.Add(this.CombatClassResetSettingsButton);
            this.SpellManagementSystemPanelName.Controls.Add(this.UseSpiritHealerLabel);
            this.SpellManagementSystemPanelName.Controls.Add(this.UseSpiritHealer);
            this.SpellManagementSystemPanelName.Controls.Add(this.ActivateSkillsAutoTrainingLabel);
            this.SpellManagementSystemPanelName.Controls.Add(this.ActivateSkillsAutoTraining);
            this.SpellManagementSystemPanelName.Controls.Add(this.DontPullMonstersLabel);
            this.SpellManagementSystemPanelName.Controls.Add(this.DontPullMonsters);
            this.SpellManagementSystemPanelName.Controls.Add(this.CanPullUnitsAlreadyInFightLabel);
            this.SpellManagementSystemPanelName.Controls.Add(this.CanPullUnitsAlreadyInFight);
            this.SpellManagementSystemPanelName.Controls.Add(this.AutoAssignTalentsLabel);
            this.SpellManagementSystemPanelName.Controls.Add(this.AutoAssignTalents);
            this.SpellManagementSystemPanelName.Controls.Add(this.CombatClassLabel);
            this.SpellManagementSystemPanelName.Controls.Add(this.CombatClassSettingsButton);
            this.SpellManagementSystemPanelName.Fold = true;
            this.SpellManagementSystemPanelName.FolderImage = (Image) manager.GetObject("SpellManagementSystemPanelName.FolderImage");
            this.SpellManagementSystemPanelName.ForeColor = Color.FromArgb(0x34, 0x34, 0x34);
            this.SpellManagementSystemPanelName.HeaderBackColor = Color.FromArgb(250, 250, 250);
            this.SpellManagementSystemPanelName.HeaderImage = (Image) manager.GetObject("SpellManagementSystemPanelName.HeaderImage");
            this.SpellManagementSystemPanelName.HeaderSize = new Size(0x22c, 0x24);
            this.SpellManagementSystemPanelName.Location = new Point(0, 0);
            this.SpellManagementSystemPanelName.Margin = new Padding(0);
            this.SpellManagementSystemPanelName.MaximumSize = new Size(0x22c, 0);
            this.SpellManagementSystemPanelName.Name = "SpellManagementSystemPanelName";
            this.SpellManagementSystemPanelName.OrderIndex = 1;
            this.SpellManagementSystemPanelName.Padding = new Padding(0, 0, 0, 12);
            this.SpellManagementSystemPanelName.Size = new Size(0x22c, 0x24);
            this.SpellManagementSystemPanelName.TabIndex = 50;
            this.SpellManagementSystemPanelName.TitleFont = new Font("Segoe UI", 7.65f, FontStyle.Bold);
            this.SpellManagementSystemPanelName.TitleForeColor = Color.FromArgb(0xe8, 0xe8, 0xe8);
            this.SpellManagementSystemPanelName.TitleText = "Spell Management System - Combat/Healer Class";
            this.SpellManagementSystemPanelName.UnfolderImage = (Image) manager.GetObject("SpellManagementSystemPanelName.UnfolderImage");
            this.HealerClass.BackColor = Color.FromArgb(0xe8, 0xe8, 0xe8);
            this.HealerClass.BorderColor = Color.FromArgb(0x79, 0x79, 0x79);
            this.HealerClass.BorderStyle = ButtonBorderStyle.Solid;
            this.HealerClass.DropDownStyle = ComboBoxStyle.DropDownList;
            this.HealerClass.FlatStyle = FlatStyle.Flat;
            this.HealerClass.ForeColor = Color.FromArgb(0x62, 160, 0xe5);
            this.HealerClass.HighlightColor = Color.Gainsboro;
            this.HealerClass.ItemHeight = 20;
            this.HealerClass.Location = new Point(170, 0x59);
            this.HealerClass.Name = "HealerClass";
            this.HealerClass.SelectorBorderColor = Color.FromArgb(0x53, 0x6a, 0xc2);
            this.HealerClass.SelectorImage = (Image) manager.GetObject("HealerClass.SelectorImage");
            this.HealerClass.Size = new Size(0x79, 0x1a);
            this.HealerClass.TabIndex = 0x1f;
            this.CombatClass.BackColor = Color.FromArgb(0xe8, 0xe8, 0xe8);
            this.CombatClass.BorderColor = Color.FromArgb(0x79, 0x79, 0x79);
            this.CombatClass.BorderStyle = ButtonBorderStyle.Solid;
            this.CombatClass.DropDownStyle = ComboBoxStyle.DropDownList;
            this.CombatClass.FlatStyle = FlatStyle.Flat;
            this.CombatClass.ForeColor = Color.FromArgb(0x62, 160, 0xe5);
            this.CombatClass.HighlightColor = Color.Gainsboro;
            this.CombatClass.ItemHeight = 20;
            this.CombatClass.Location = new Point(170, 0x35);
            this.CombatClass.Name = "CombatClass";
            this.CombatClass.SelectorBorderColor = Color.FromArgb(0x53, 0x6a, 0xc2);
            this.CombatClass.SelectorImage = (Image) manager.GetObject("CombatClass.SelectorImage");
            this.CombatClass.Size = new Size(0x79, 0x1a);
            this.CombatClass.TabIndex = 2;
            this.BecomeApprenticeOfSecondarySkillsWhileQuestingLabel.BackColor = Color.Transparent;
            this.BecomeApprenticeOfSecondarySkillsWhileQuestingLabel.ForeColor = Color.Black;
            this.BecomeApprenticeOfSecondarySkillsWhileQuestingLabel.Location = new Point(300, 0xea);
            this.BecomeApprenticeOfSecondarySkillsWhileQuestingLabel.Name = "BecomeApprenticeOfSecondarySkillsWhileQuestingLabel";
            this.BecomeApprenticeOfSecondarySkillsWhileQuestingLabel.Size = new Size(0x9a, 0x16);
            this.BecomeApprenticeOfSecondarySkillsWhileQuestingLabel.TabIndex = 0x2b;
            this.BecomeApprenticeOfSecondarySkillsWhileQuestingLabel.Text = "Become apprentice of secondary skills while questing";
            this.BecomeApprenticeOfSecondarySkillsWhileQuesting.Font = new Font("Microsoft Sans Serif", 8.25f, FontStyle.Bold);
            this.BecomeApprenticeOfSecondarySkillsWhileQuesting.Location = new Point(0x1cb, 0xea);
            this.BecomeApprenticeOfSecondarySkillsWhileQuesting.MaximumSize = new Size(60, 20);
            this.BecomeApprenticeOfSecondarySkillsWhileQuesting.MinimumSize = new Size(60, 20);
            this.BecomeApprenticeOfSecondarySkillsWhileQuesting.Name = "BecomeApprenticeOfSecondarySkillsWhileQuesting";
            this.BecomeApprenticeOfSecondarySkillsWhileQuesting.OffText = "OFF";
            this.BecomeApprenticeOfSecondarySkillsWhileQuesting.OnText = "ON";
            this.BecomeApprenticeOfSecondarySkillsWhileQuesting.Size = new Size(60, 20);
            this.BecomeApprenticeOfSecondarySkillsWhileQuesting.TabIndex = 0x2c;
            this.BecomeApprenticeOfSecondarySkillsWhileQuesting.Value = false;
            this.BecomeApprenticeIfNeededByProductLabel.BackColor = Color.Transparent;
            this.BecomeApprenticeIfNeededByProductLabel.ForeColor = Color.Black;
            this.BecomeApprenticeIfNeededByProductLabel.Location = new Point(12, 0xeb);
            this.BecomeApprenticeIfNeededByProductLabel.Name = "BecomeApprenticeIfNeededByProductLabel";
            this.BecomeApprenticeIfNeededByProductLabel.Size = new Size(0x9a, 0x16);
            this.BecomeApprenticeIfNeededByProductLabel.TabIndex = 0x29;
            this.BecomeApprenticeIfNeededByProductLabel.Text = "Become apprentice if needed by product";
            this.BecomeApprenticeIfNeededByProduct.Font = new Font("Microsoft Sans Serif", 8.25f, FontStyle.Bold);
            this.BecomeApprenticeIfNeededByProduct.Location = new Point(0xab, 0xeb);
            this.BecomeApprenticeIfNeededByProduct.MaximumSize = new Size(60, 20);
            this.BecomeApprenticeIfNeededByProduct.MinimumSize = new Size(60, 20);
            this.BecomeApprenticeIfNeededByProduct.Name = "BecomeApprenticeIfNeededByProduct";
            this.BecomeApprenticeIfNeededByProduct.OffText = "OFF";
            this.BecomeApprenticeIfNeededByProduct.OnText = "ON";
            this.BecomeApprenticeIfNeededByProduct.Size = new Size(60, 20);
            this.BecomeApprenticeIfNeededByProduct.TabIndex = 0x2d;
            this.BecomeApprenticeIfNeededByProduct.Value = false;
            this.TrainMountingCapacityLabel.BackColor = Color.Transparent;
            this.TrainMountingCapacityLabel.ForeColor = Color.Black;
            this.TrainMountingCapacityLabel.Location = new Point(300, 0xcf);
            this.TrainMountingCapacityLabel.Name = "TrainMountingCapacityLabel";
            this.TrainMountingCapacityLabel.Size = new Size(0x9a, 0x16);
            this.TrainMountingCapacityLabel.TabIndex = 0x27;
            this.TrainMountingCapacityLabel.Text = "Train mounting capacity";
            this.TrainMountingCapacity.Font = new Font("Microsoft Sans Serif", 8.25f, FontStyle.Bold);
            this.TrainMountingCapacity.Location = new Point(0x1cb, 0xcf);
            this.TrainMountingCapacity.MaximumSize = new Size(60, 20);
            this.TrainMountingCapacity.MinimumSize = new Size(60, 20);
            this.TrainMountingCapacity.Name = "TrainMountingCapacity";
            this.TrainMountingCapacity.OffText = "OFF";
            this.TrainMountingCapacity.OnText = "ON";
            this.TrainMountingCapacity.Size = new Size(60, 20);
            this.TrainMountingCapacity.TabIndex = 0x2e;
            this.TrainMountingCapacity.Value = false;
            this.OnlyTrainIfWeHave2TimesMoreMoneyThanOurWishListSumLabel.BackColor = Color.Transparent;
            this.OnlyTrainIfWeHave2TimesMoreMoneyThanOurWishListSumLabel.ForeColor = Color.Black;
            this.OnlyTrainIfWeHave2TimesMoreMoneyThanOurWishListSumLabel.Location = new Point(11, 0xcf);
            this.OnlyTrainIfWeHave2TimesMoreMoneyThanOurWishListSumLabel.Name = "OnlyTrainIfWeHave2TimesMoreMoneyThanOurWishListSumLabel";
            this.OnlyTrainIfWeHave2TimesMoreMoneyThanOurWishListSumLabel.Size = new Size(0x9a, 0x16);
            this.OnlyTrainIfWeHave2TimesMoreMoneyThanOurWishListSumLabel.TabIndex = 0x25;
            this.OnlyTrainIfWeHave2TimesMoreMoneyThanOurWishListSumLabel.Text = "Only train if we have 2 times more money than required";
            this.OnlyTrainIfWeHave2TimesMoreMoneyThanOurWishListSum.Font = new Font("Microsoft Sans Serif", 8.25f, FontStyle.Bold);
            this.OnlyTrainIfWeHave2TimesMoreMoneyThanOurWishListSum.Location = new Point(170, 0xcf);
            this.OnlyTrainIfWeHave2TimesMoreMoneyThanOurWishListSum.MaximumSize = new Size(60, 20);
            this.OnlyTrainIfWeHave2TimesMoreMoneyThanOurWishListSum.MinimumSize = new Size(60, 20);
            this.OnlyTrainIfWeHave2TimesMoreMoneyThanOurWishListSum.Name = "OnlyTrainIfWeHave2TimesMoreMoneyThanOurWishListSum";
            this.OnlyTrainIfWeHave2TimesMoreMoneyThanOurWishListSum.OffText = "OFF";
            this.OnlyTrainIfWeHave2TimesMoreMoneyThanOurWishListSum.OnText = "ON";
            this.OnlyTrainIfWeHave2TimesMoreMoneyThanOurWishListSum.Size = new Size(60, 20);
            this.OnlyTrainIfWeHave2TimesMoreMoneyThanOurWishListSum.TabIndex = 0x2f;
            this.OnlyTrainIfWeHave2TimesMoreMoneyThanOurWishListSum.Value = false;
            this.OnlyTrainCurrentlyUsedSkillsLabel.BackColor = Color.Transparent;
            this.OnlyTrainCurrentlyUsedSkillsLabel.ForeColor = Color.Black;
            this.OnlyTrainCurrentlyUsedSkillsLabel.Location = new Point(300, 0xb3);
            this.OnlyTrainCurrentlyUsedSkillsLabel.Name = "OnlyTrainCurrentlyUsedSkillsLabel";
            this.OnlyTrainCurrentlyUsedSkillsLabel.Size = new Size(0x9a, 0x16);
            this.OnlyTrainCurrentlyUsedSkillsLabel.TabIndex = 0x23;
            this.OnlyTrainCurrentlyUsedSkillsLabel.Text = "Only train currently used skills";
            this.OnlyTrainCurrentlyUsedSkills.Font = new Font("Microsoft Sans Serif", 8.25f, FontStyle.Bold);
            this.OnlyTrainCurrentlyUsedSkills.Location = new Point(0x1cb, 0xb3);
            this.OnlyTrainCurrentlyUsedSkills.MaximumSize = new Size(60, 20);
            this.OnlyTrainCurrentlyUsedSkills.MinimumSize = new Size(60, 20);
            this.OnlyTrainCurrentlyUsedSkills.Name = "OnlyTrainCurrentlyUsedSkills";
            this.OnlyTrainCurrentlyUsedSkills.OffText = "OFF";
            this.OnlyTrainCurrentlyUsedSkills.OnText = "ON";
            this.OnlyTrainCurrentlyUsedSkills.Size = new Size(60, 20);
            this.OnlyTrainCurrentlyUsedSkills.TabIndex = 0x30;
            this.OnlyTrainCurrentlyUsedSkills.Value = false;
            this.HealerClassResetSettingsButton.AutoEllipsis = true;
            this.HealerClassResetSettingsButton.Font = new Font("Microsoft Sans Serif", 8.25f, FontStyle.Bold);
            this.HealerClassResetSettingsButton.ForeColor = Color.Snow;
            this.HealerClassResetSettingsButton.HooverImage = (Image) manager.GetObject("HealerClassResetSettingsButton.HooverImage");
            this.HealerClassResetSettingsButton.Image = (Image) manager.GetObject("HealerClassResetSettingsButton.Image");
            this.HealerClassResetSettingsButton.Location = new Point(0x19f, 0x55);
            this.HealerClassResetSettingsButton.Name = "HealerClassResetSettingsButton";
            this.HealerClassResetSettingsButton.Size = new Size(0x6a, 0x1d);
            this.HealerClassResetSettingsButton.TabIndex = 0x31;
            this.HealerClassResetSettingsButton.Text = "Reset Settings";
            this.HealerClassResetSettingsButton.TextAlign = ContentAlignment.MiddleCenter;
            this.HealerClassResetSettingsButton.Click += new EventHandler(this.HealerClassResetSettingsButton_Click);
            this.HealerClassLabel.BackColor = Color.Transparent;
            this.HealerClassLabel.ForeColor = Color.Black;
            this.HealerClassLabel.Location = new Point(11, 0x58);
            this.HealerClassLabel.Name = "HealerClassLabel";
            this.HealerClassLabel.Size = new Size(0x9a, 0x16);
            this.HealerClassLabel.TabIndex = 0x20;
            this.HealerClassLabel.Text = "Healer Class";
            this.HealerClassSettingsButton.AutoEllipsis = true;
            this.HealerClassSettingsButton.Font = new Font("Microsoft Sans Serif", 8.25f, FontStyle.Bold);
            this.HealerClassSettingsButton.ForeColor = Color.Snow;
            this.HealerClassSettingsButton.HooverImage = Resources.greenB_70;
            this.HealerClassSettingsButton.Image = Resources.blueB_70;
            this.HealerClassSettingsButton.Location = new Point(0x148, 0x56);
            this.HealerClassSettingsButton.Name = "HealerClassSettingsButton";
            this.HealerClassSettingsButton.Size = new Size(70, 0x1d);
            this.HealerClassSettingsButton.TabIndex = 50;
            this.HealerClassSettingsButton.Text = "Settings";
            this.HealerClassSettingsButton.TextAlign = ContentAlignment.MiddleCenter;
            this.HealerClassSettingsButton.Click += new EventHandler(this.HealerClassSettingsButton_Click);
            this.CombatClassResetSettingsButton.AutoEllipsis = true;
            this.CombatClassResetSettingsButton.Font = new Font("Microsoft Sans Serif", 8.25f, FontStyle.Bold);
            this.CombatClassResetSettingsButton.ForeColor = Color.Snow;
            this.CombatClassResetSettingsButton.HooverImage = (Image) manager.GetObject("CombatClassResetSettingsButton.HooverImage");
            this.CombatClassResetSettingsButton.Image = Resources.blackB;
            this.CombatClassResetSettingsButton.Location = new Point(0x19f, 0x33);
            this.CombatClassResetSettingsButton.Name = "CombatClassResetSettingsButton";
            this.CombatClassResetSettingsButton.Size = new Size(0x6a, 0x1d);
            this.CombatClassResetSettingsButton.TabIndex = 0x33;
            this.CombatClassResetSettingsButton.Text = "Reset Settings";
            this.CombatClassResetSettingsButton.TextAlign = ContentAlignment.MiddleCenter;
            this.CombatClassResetSettingsButton.Click += new EventHandler(this.CombatClassResetSettingsButton_Click);
            this.UseSpiritHealerLabel.BackColor = Color.Transparent;
            this.UseSpiritHealerLabel.ForeColor = Color.Black;
            this.UseSpiritHealerLabel.Location = new Point(11, 0x7b);
            this.UseSpiritHealerLabel.Name = "UseSpiritHealerLabel";
            this.UseSpiritHealerLabel.Size = new Size(0x9a, 0x16);
            this.UseSpiritHealerLabel.TabIndex = 0x1c;
            this.UseSpiritHealerLabel.Text = "Use Spirit Healer";
            this.UseSpiritHealer.Font = new Font("Microsoft Sans Serif", 8.25f, FontStyle.Bold);
            this.UseSpiritHealer.Location = new Point(170, 0x7b);
            this.UseSpiritHealer.MaximumSize = new Size(60, 20);
            this.UseSpiritHealer.MinimumSize = new Size(60, 20);
            this.UseSpiritHealer.Name = "UseSpiritHealer";
            this.UseSpiritHealer.OffText = "OFF";
            this.UseSpiritHealer.OnText = "ON";
            this.UseSpiritHealer.Size = new Size(60, 20);
            this.UseSpiritHealer.TabIndex = 0x31;
            this.UseSpiritHealer.Value = false;
            this.ActivateSkillsAutoTrainingLabel.BackColor = Color.Transparent;
            this.ActivateSkillsAutoTrainingLabel.ForeColor = Color.Black;
            this.ActivateSkillsAutoTrainingLabel.Location = new Point(12, 0xb3);
            this.ActivateSkillsAutoTrainingLabel.Name = "ActivateSkillsAutoTrainingLabel";
            this.ActivateSkillsAutoTrainingLabel.Size = new Size(0x9a, 0x16);
            this.ActivateSkillsAutoTrainingLabel.TabIndex = 0x18;
            this.ActivateSkillsAutoTrainingLabel.Text = "Activate Skill Auto Training";
            this.ActivateSkillsAutoTraining.Font = new Font("Microsoft Sans Serif", 8.25f, FontStyle.Bold);
            this.ActivateSkillsAutoTraining.Location = new Point(0xab, 0xb3);
            this.ActivateSkillsAutoTraining.MaximumSize = new Size(60, 20);
            this.ActivateSkillsAutoTraining.MinimumSize = new Size(60, 20);
            this.ActivateSkillsAutoTraining.Name = "ActivateSkillsAutoTraining";
            this.ActivateSkillsAutoTraining.OffText = "OFF";
            this.ActivateSkillsAutoTraining.OnText = "ON";
            this.ActivateSkillsAutoTraining.Size = new Size(60, 20);
            this.ActivateSkillsAutoTraining.TabIndex = 50;
            this.ActivateSkillsAutoTraining.Value = false;
            this.DontPullMonstersLabel.BackColor = Color.Transparent;
            this.DontPullMonstersLabel.ForeColor = Color.Black;
            this.DontPullMonstersLabel.Location = new Point(300, 0x97);
            this.DontPullMonstersLabel.Name = "DontPullMonstersLabel";
            this.DontPullMonstersLabel.Size = new Size(0x9a, 0x16);
            this.DontPullMonstersLabel.TabIndex = 9;
            this.DontPullMonstersLabel.Text = "Don't start fighting";
            this.DontPullMonsters.Font = new Font("Microsoft Sans Serif", 8.25f, FontStyle.Bold);
            this.DontPullMonsters.Location = new Point(0x1cb, 0x97);
            this.DontPullMonsters.MaximumSize = new Size(60, 20);
            this.DontPullMonsters.MinimumSize = new Size(60, 20);
            this.DontPullMonsters.Name = "DontPullMonsters";
            this.DontPullMonsters.OffText = "OFF";
            this.DontPullMonsters.OnText = "ON";
            this.DontPullMonsters.Size = new Size(60, 20);
            this.DontPullMonsters.TabIndex = 0x33;
            this.DontPullMonsters.Value = false;
            this.CanPullUnitsAlreadyInFightLabel.BackColor = Color.Transparent;
            this.CanPullUnitsAlreadyInFightLabel.ForeColor = Color.Black;
            this.CanPullUnitsAlreadyInFightLabel.Location = new Point(300, 0x7b);
            this.CanPullUnitsAlreadyInFightLabel.Name = "CanPullUnitsAlreadyInFightLabel";
            this.CanPullUnitsAlreadyInFightLabel.Size = new Size(0x9a, 0x16);
            this.CanPullUnitsAlreadyInFightLabel.TabIndex = 7;
            this.CanPullUnitsAlreadyInFightLabel.Text = "Can attack units already in fight";
            this.CanPullUnitsAlreadyInFight.Font = new Font("Microsoft Sans Serif", 8.25f, FontStyle.Bold);
            this.CanPullUnitsAlreadyInFight.Location = new Point(0x1cb, 0x7b);
            this.CanPullUnitsAlreadyInFight.MaximumSize = new Size(60, 20);
            this.CanPullUnitsAlreadyInFight.MinimumSize = new Size(60, 20);
            this.CanPullUnitsAlreadyInFight.Name = "CanPullUnitsAlreadyInFight";
            this.CanPullUnitsAlreadyInFight.OffText = "OFF";
            this.CanPullUnitsAlreadyInFight.OnText = "ON";
            this.CanPullUnitsAlreadyInFight.Size = new Size(60, 20);
            this.CanPullUnitsAlreadyInFight.TabIndex = 0x34;
            this.CanPullUnitsAlreadyInFight.Value = false;
            this.AutoAssignTalentsLabel.BackColor = Color.Transparent;
            this.AutoAssignTalentsLabel.ForeColor = Color.Black;
            this.AutoAssignTalentsLabel.Location = new Point(11, 0x97);
            this.AutoAssignTalentsLabel.Name = "AutoAssignTalentsLabel";
            this.AutoAssignTalentsLabel.Size = new Size(0x9a, 0x16);
            this.AutoAssignTalentsLabel.TabIndex = 5;
            this.AutoAssignTalentsLabel.Text = "Assign Talents";
            this.AutoAssignTalents.Font = new Font("Microsoft Sans Serif", 8.25f, FontStyle.Bold);
            this.AutoAssignTalents.Location = new Point(170, 0x98);
            this.AutoAssignTalents.MaximumSize = new Size(60, 20);
            this.AutoAssignTalents.MinimumSize = new Size(60, 20);
            this.AutoAssignTalents.Name = "AutoAssignTalents";
            this.AutoAssignTalents.OffText = "OFF";
            this.AutoAssignTalents.OnText = "ON";
            this.AutoAssignTalents.Size = new Size(60, 20);
            this.AutoAssignTalents.TabIndex = 0x35;
            this.AutoAssignTalents.Value = false;
            this.CombatClassLabel.BackColor = Color.Transparent;
            this.CombatClassLabel.ForeColor = Color.Black;
            this.CombatClassLabel.Location = new Point(11, 0x34);
            this.CombatClassLabel.Name = "CombatClassLabel";
            this.CombatClassLabel.Size = new Size(0x9a, 0x16);
            this.CombatClassLabel.TabIndex = 3;
            this.CombatClassLabel.Text = "Combat Class";
            this.CombatClassSettingsButton.AutoEllipsis = true;
            this.CombatClassSettingsButton.Font = new Font("Microsoft Sans Serif", 8.25f, FontStyle.Bold);
            this.CombatClassSettingsButton.ForeColor = Color.Snow;
            this.CombatClassSettingsButton.HooverImage = Resources.greenB_70;
            this.CombatClassSettingsButton.Image = Resources.blueB_70;
            this.CombatClassSettingsButton.Location = new Point(0x148, 0x33);
            this.CombatClassSettingsButton.Name = "CombatClassSettingsButton";
            this.CombatClassSettingsButton.Size = new Size(70, 0x1d);
            this.CombatClassSettingsButton.TabIndex = 0x36;
            this.CombatClassSettingsButton.Text = "Settings";
            this.CombatClassSettingsButton.TextAlign = ContentAlignment.MiddleCenter;
            this.CombatClassSettingsButton.Click += new EventHandler(this.CombatClassSettingsButton_Click);
            this.PluginsManagementSystemPanelName.BackColor = Color.FromArgb(0xe8, 0xe8, 0xe8);
            this.PluginsManagementSystemPanelName.BorderColor = Color.FromArgb(0x34, 0x34, 0x34);
            this.PluginsManagementSystemPanelName.BorderStyle = ButtonBorderStyle.Solid;
            this.PluginsManagementSystemPanelName.ContentSize = new Size(0x22c, 0xf7);
            this.PluginsManagementSystemPanelName.Controls.Add(this.ActivatedPluginResetSettings);
            this.PluginsManagementSystemPanelName.Controls.Add(this.ActivatedPluginSettings);
            this.PluginsManagementSystemPanelName.Controls.Add(this.DeactivatePlugin);
            this.PluginsManagementSystemPanelName.Controls.Add(this.ActivatePlugin);
            this.PluginsManagementSystemPanelName.Controls.Add(this.LaunchExpiredPlugins);
            this.PluginsManagementSystemPanelName.Controls.Add(this.ActivatePluginsSystem);
            this.PluginsManagementSystemPanelName.Controls.Add(this.LaunchExpiredPluginsLabel);
            this.PluginsManagementSystemPanelName.Controls.Add(this.ActivatePluginsSystemLabel);
            this.PluginsManagementSystemPanelName.Controls.Add(this.ActivatedPluginsListLabel);
            this.PluginsManagementSystemPanelName.Controls.Add(this.ActivatedPluginsList);
            this.PluginsManagementSystemPanelName.Controls.Add(this.AvailablePluginsListLabel);
            this.PluginsManagementSystemPanelName.Controls.Add(this.AvailablePluginsList);
            this.PluginsManagementSystemPanelName.Fold = true;
            this.PluginsManagementSystemPanelName.FolderImage = (Image) manager.GetObject("PluginsManagementSystemPanelName.FolderImage");
            this.PluginsManagementSystemPanelName.ForeColor = Color.FromArgb(0x34, 0x34, 0x34);
            this.PluginsManagementSystemPanelName.HeaderBackColor = Color.FromArgb(250, 250, 250);
            this.PluginsManagementSystemPanelName.HeaderImage = (Image) manager.GetObject("PluginsManagementSystemPanelName.HeaderImage");
            this.PluginsManagementSystemPanelName.HeaderSize = new Size(0x22c, 0x24);
            this.PluginsManagementSystemPanelName.Location = new Point(0, 0x24);
            this.PluginsManagementSystemPanelName.MaximumSize = new Size(0x22c, 0);
            this.PluginsManagementSystemPanelName.Name = "PluginsManagementSystemPanelName";
            this.PluginsManagementSystemPanelName.OrderIndex = 2;
            this.PluginsManagementSystemPanelName.Padding = new Padding(0, 0, 0, 12);
            this.PluginsManagementSystemPanelName.Size = new Size(0x22c, 0x24);
            this.PluginsManagementSystemPanelName.TabIndex = 0x2d;
            this.PluginsManagementSystemPanelName.TitleFont = new Font("Segoe UI", 7.65f, FontStyle.Bold);
            this.PluginsManagementSystemPanelName.TitleForeColor = Color.FromArgb(0xe8, 0xe8, 0xe8);
            this.PluginsManagementSystemPanelName.TitleText = "Plugins Management System - Load/UnLoad/Configure products";
            this.PluginsManagementSystemPanelName.UnfolderImage = (Image) manager.GetObject("PluginsManagementSystemPanelName.UnfolderImage");
            this.ActivatedPluginResetSettings.AutoEllipsis = true;
            this.ActivatedPluginResetSettings.Font = new Font("Microsoft Sans Serif", 8.25f, FontStyle.Bold);
            this.ActivatedPluginResetSettings.ForeColor = Color.Snow;
            this.ActivatedPluginResetSettings.HooverImage = Resources.greenB_70;
            this.ActivatedPluginResetSettings.Image = Resources.blackB_70;
            this.ActivatedPluginResetSettings.Location = new Point(0x1dd, 0xce);
            this.ActivatedPluginResetSettings.Margin = new Padding(0);
            this.ActivatedPluginResetSettings.Name = "ActivatedPluginResetSettings";
            this.ActivatedPluginResetSettings.Size = new Size(70, 0x1d);
            this.ActivatedPluginResetSettings.TabIndex = 14;
            this.ActivatedPluginResetSettings.Text = "Reset";
            this.ActivatedPluginResetSettings.TextAlign = ContentAlignment.MiddleCenter;
            this.ActivatedPluginResetSettings.Click += new EventHandler(this.ResetPlugin);
            this.ActivatedPluginSettings.AutoEllipsis = true;
            this.ActivatedPluginSettings.Font = new Font("Microsoft Sans Serif", 8.25f, FontStyle.Bold);
            this.ActivatedPluginSettings.ForeColor = Color.Snow;
            this.ActivatedPluginSettings.HooverImage = Resources.greenB_70;
            this.ActivatedPluginSettings.Image = Resources.blueB_70;
            this.ActivatedPluginSettings.Location = new Point(0x192, 0xce);
            this.ActivatedPluginSettings.Margin = new Padding(0);
            this.ActivatedPluginSettings.Name = "ActivatedPluginSettings";
            this.ActivatedPluginSettings.Size = new Size(70, 0x1d);
            this.ActivatedPluginSettings.TabIndex = 13;
            this.ActivatedPluginSettings.Text = "Configure";
            this.ActivatedPluginSettings.TextAlign = ContentAlignment.MiddleCenter;
            this.ActivatedPluginSettings.Click += new EventHandler(this.ConfigurePlugin);
            this.DeactivatePlugin.AutoEllipsis = true;
            this.DeactivatePlugin.Font = new Font("Microsoft Sans Serif", 8.25f, FontStyle.Bold);
            this.DeactivatePlugin.ForeColor = Color.Snow;
            this.DeactivatePlugin.HooverImage = Resources.greenB;
            this.DeactivatePlugin.Image = Resources.blackB;
            this.DeactivatePlugin.Location = new Point(290, 0xce);
            this.DeactivatePlugin.Margin = new Padding(0);
            this.DeactivatePlugin.Name = "DeactivatePlugin";
            this.DeactivatePlugin.Size = new Size(0x6a, 0x1d);
            this.DeactivatePlugin.TabIndex = 12;
            this.DeactivatePlugin.Text = "Deactivate";
            this.DeactivatePlugin.TextAlign = ContentAlignment.MiddleCenter;
            this.DeactivatePlugin.Click += new EventHandler(this.UnLoadPlugin);
            this.ActivatePlugin.AutoEllipsis = true;
            this.ActivatePlugin.Font = new Font("Microsoft Sans Serif", 8.25f, FontStyle.Bold);
            this.ActivatePlugin.ForeColor = Color.Snow;
            this.ActivatePlugin.HooverImage = Resources.greenB_150;
            this.ActivatePlugin.Image = Resources.blueB_150;
            this.ActivatePlugin.Location = new Point(0x76, 0xce);
            this.ActivatePlugin.Margin = new Padding(0);
            this.ActivatePlugin.Name = "ActivatePlugin";
            this.ActivatePlugin.Size = new Size(150, 0x1d);
            this.ActivatePlugin.TabIndex = 11;
            this.ActivatePlugin.Text = "Activate Plugin";
            this.ActivatePlugin.TextAlign = ContentAlignment.MiddleCenter;
            this.ActivatePlugin.Click += new EventHandler(this.LoadPlugin);
            this.LaunchExpiredPlugins.Font = new Font("Microsoft Sans Serif", 8.25f, FontStyle.Bold);
            this.LaunchExpiredPlugins.Location = new Point(0x123, 0x30);
            this.LaunchExpiredPlugins.MaximumSize = new Size(60, 20);
            this.LaunchExpiredPlugins.MinimumSize = new Size(60, 20);
            this.LaunchExpiredPlugins.Name = "LaunchExpiredPlugins";
            this.LaunchExpiredPlugins.OffText = "OFF";
            this.LaunchExpiredPlugins.OnText = "ON";
            this.LaunchExpiredPlugins.Size = new Size(60, 20);
            this.LaunchExpiredPlugins.TabIndex = 10;
            this.LaunchExpiredPlugins.Value = false;
            this.ActivatePluginsSystem.Font = new Font("Microsoft Sans Serif", 8.25f, FontStyle.Bold);
            this.ActivatePluginsSystem.Location = new Point(12, 0x30);
            this.ActivatePluginsSystem.MaximumSize = new Size(60, 20);
            this.ActivatePluginsSystem.MinimumSize = new Size(60, 20);
            this.ActivatePluginsSystem.Name = "ActivatePluginsSystem";
            this.ActivatePluginsSystem.OffText = "OFF";
            this.ActivatePluginsSystem.OnText = "ON";
            this.ActivatePluginsSystem.Size = new Size(60, 20);
            this.ActivatePluginsSystem.TabIndex = 8;
            this.ActivatePluginsSystem.Value = true;
            this.LaunchExpiredPluginsLabel.BackColor = Color.Transparent;
            this.LaunchExpiredPluginsLabel.Font = new Font("Segoe UI", 8.25f, FontStyle.Bold, GraphicsUnit.Point, 0);
            this.LaunchExpiredPluginsLabel.ForeColor = Color.FromArgb(0x34, 0x34, 0x34);
            this.LaunchExpiredPluginsLabel.Location = new Point(0x167, 0x2e);
            this.LaunchExpiredPluginsLabel.Name = "LaunchExpiredPluginsLabel";
            this.LaunchExpiredPluginsLabel.Size = new Size(0xbb, 0x16);
            this.LaunchExpiredPluginsLabel.TabIndex = 9;
            this.LaunchExpiredPluginsLabel.Text = "Launch expired plugins";
            this.LaunchExpiredPluginsLabel.TextAlign = ContentAlignment.MiddleLeft;
            this.ActivatePluginsSystemLabel.BackColor = Color.Transparent;
            this.ActivatePluginsSystemLabel.Font = new Font("Segoe UI", 8.25f, FontStyle.Bold, GraphicsUnit.Point, 0);
            this.ActivatePluginsSystemLabel.ForeColor = Color.FromArgb(0x34, 0x34, 0x34);
            this.ActivatePluginsSystemLabel.Location = new Point(80, 0x2e);
            this.ActivatePluginsSystemLabel.Name = "ActivatePluginsSystemLabel";
            this.ActivatePluginsSystemLabel.Size = new Size(0xbb, 0x16);
            this.ActivatePluginsSystemLabel.TabIndex = 7;
            this.ActivatePluginsSystemLabel.Text = "Plugins System Status";
            this.ActivatePluginsSystemLabel.TextAlign = ContentAlignment.MiddleLeft;
            this.ActivatedPluginsListLabel.BackColor = Color.Transparent;
            this.ActivatedPluginsListLabel.Font = new Font("Segoe UI", 8.25f, FontStyle.Bold, GraphicsUnit.Point, 0);
            this.ActivatedPluginsListLabel.ForeColor = Color.FromArgb(0x34, 0x34, 0x34);
            this.ActivatedPluginsListLabel.Location = new Point(0x123, 0x44);
            this.ActivatedPluginsListLabel.Name = "ActivatedPluginsListLabel";
            this.ActivatedPluginsListLabel.Size = new Size(0x9a, 0x16);
            this.ActivatedPluginsListLabel.TabIndex = 6;
            this.ActivatedPluginsListLabel.Text = "Activated Plugins :";
            this.ActivatedPluginsListLabel.TextAlign = ContentAlignment.BottomLeft;
            this.ActivatedPluginsList.FormattingEnabled = true;
            this.ActivatedPluginsList.Location = new Point(0x123, 100);
            this.ActivatedPluginsList.Name = "ActivatedPluginsList";
            this.ActivatedPluginsList.Size = new Size(0xff, 0x5f);
            this.ActivatedPluginsList.TabIndex = 5;
            this.ActivatedPluginsList.DoubleClick += new EventHandler(this.UnLoadPlugin);
            this.AvailablePluginsListLabel.BackColor = Color.Transparent;
            this.AvailablePluginsListLabel.Font = new Font("Segoe UI", 8.25f, FontStyle.Bold, GraphicsUnit.Point, 0);
            this.AvailablePluginsListLabel.ForeColor = Color.FromArgb(0x34, 0x34, 0x34);
            this.AvailablePluginsListLabel.Location = new Point(11, 0x44);
            this.AvailablePluginsListLabel.Name = "AvailablePluginsListLabel";
            this.AvailablePluginsListLabel.Size = new Size(0x9a, 0x16);
            this.AvailablePluginsListLabel.TabIndex = 4;
            this.AvailablePluginsListLabel.Text = "Available Plugins List :";
            this.AvailablePluginsListLabel.TextAlign = ContentAlignment.BottomLeft;
            this.AvailablePluginsList.FormattingEnabled = true;
            this.AvailablePluginsList.Location = new Point(12, 100);
            this.AvailablePluginsList.Name = "AvailablePluginsList";
            this.AvailablePluginsList.Size = new Size(0xff, 0x5f);
            this.AvailablePluginsList.TabIndex = 2;
            this.AvailablePluginsList.DoubleClick += new EventHandler(this.LoadPlugin);
            this.MountManagementPanelName.BackColor = Color.FromArgb(0xe8, 0xe8, 0xe8);
            this.MountManagementPanelName.BorderColor = Color.FromArgb(0x34, 0x34, 0x34);
            this.MountManagementPanelName.BorderStyle = ButtonBorderStyle.Solid;
            this.MountManagementPanelName.ContentSize = new Size(0x22c, 180);
            this.MountManagementPanelName.Controls.Add(this.AquaticMountName);
            this.MountManagementPanelName.Controls.Add(this.AquaticMountNameLabel);
            this.MountManagementPanelName.Controls.Add(this.IgnoreFightIfMountedLabel);
            this.MountManagementPanelName.Controls.Add(this.IgnoreFightIfMounted);
            this.MountManagementPanelName.Controls.Add(this.MinimumDistanceToUseMount);
            this.MountManagementPanelName.Controls.Add(this.MinimumDistanceToUseMountLabel);
            this.MountManagementPanelName.Controls.Add(this.FlyingMountName);
            this.MountManagementPanelName.Controls.Add(this.FlyingMountNameLabel);
            this.MountManagementPanelName.Controls.Add(this.GroundMountName);
            this.MountManagementPanelName.Controls.Add(this.GroundMountNameLabel);
            this.MountManagementPanelName.Controls.Add(this.UseGroundMountLabel);
            this.MountManagementPanelName.Controls.Add(this.UseGroundMount);
            this.MountManagementPanelName.Fold = true;
            this.MountManagementPanelName.FolderImage = (Image) manager.GetObject("MountManagementPanelName.FolderImage");
            this.MountManagementPanelName.ForeColor = Color.FromArgb(0x34, 0x34, 0x34);
            this.MountManagementPanelName.HeaderBackColor = Color.FromArgb(250, 250, 250);
            this.MountManagementPanelName.HeaderImage = (Image) manager.GetObject("MountManagementPanelName.HeaderImage");
            this.MountManagementPanelName.HeaderSize = new Size(0x22c, 0x24);
            this.MountManagementPanelName.Location = new Point(0, 0x48);
            this.MountManagementPanelName.Margin = new Padding(0);
            this.MountManagementPanelName.MaximumSize = new Size(0x22c, 0);
            this.MountManagementPanelName.MinimumSize = new Size(0x22c, 0x24);
            this.MountManagementPanelName.Name = "MountManagementPanelName";
            this.MountManagementPanelName.OrderIndex = 3;
            this.MountManagementPanelName.Padding = new Padding(0, 0, 0, 12);
            this.MountManagementPanelName.Size = new Size(0x22c, 0x24);
            this.MountManagementPanelName.TabIndex = 3;
            this.MountManagementPanelName.TitleFont = new Font("Segoe UI", 7.65f, FontStyle.Bold);
            this.MountManagementPanelName.TitleForeColor = Color.FromArgb(0xe8, 0xe8, 0xe8);
            this.MountManagementPanelName.TitleText = "Ingame Mount Management - (Allow you to use Ground/Fly/Swim mount)";
            this.MountManagementPanelName.UnfolderImage = (Image) manager.GetObject("MountManagementPanelName.UnfolderImage");
            this.AquaticMountName.ForeColor = Color.Black;
            this.AquaticMountName.Location = new Point(0xa1, 140);
            this.AquaticMountName.Name = "AquaticMountName";
            this.AquaticMountName.Size = new Size(0x90, 0x16);
            this.AquaticMountName.TabIndex = 0x16;
            this.AquaticMountNameLabel.BackColor = Color.Transparent;
            this.AquaticMountNameLabel.ForeColor = Color.Black;
            this.AquaticMountNameLabel.Location = new Point(2, 0x89);
            this.AquaticMountNameLabel.Name = "AquaticMountNameLabel";
            this.AquaticMountNameLabel.Size = new Size(0x9a, 0x16);
            this.AquaticMountNameLabel.TabIndex = 0x15;
            this.AquaticMountNameLabel.Text = "Aquatic Mount";
            this.IgnoreFightIfMountedLabel.BackColor = Color.Transparent;
            this.IgnoreFightIfMountedLabel.ForeColor = Color.Black;
            this.IgnoreFightIfMountedLabel.Location = new Point(0x13c, 0x55);
            this.IgnoreFightIfMountedLabel.Name = "IgnoreFightIfMountedLabel";
            this.IgnoreFightIfMountedLabel.Size = new Size(0x9a, 0x16);
            this.IgnoreFightIfMountedLabel.TabIndex = 20;
            this.IgnoreFightIfMountedLabel.Text = "Ignore Fight if in Gound Mount";
            this.IgnoreFightIfMountedLabel.TextAlign = ContentAlignment.MiddleLeft;
            this.IgnoreFightIfMounted.Font = new Font("Microsoft Sans Serif", 8.25f, FontStyle.Bold);
            this.IgnoreFightIfMounted.Location = new Point(0x1db, 0x55);
            this.IgnoreFightIfMounted.MaximumSize = new Size(60, 20);
            this.IgnoreFightIfMounted.MinimumSize = new Size(60, 20);
            this.IgnoreFightIfMounted.Name = "IgnoreFightIfMounted";
            this.IgnoreFightIfMounted.OffText = "OFF";
            this.IgnoreFightIfMounted.OnText = "ON";
            this.IgnoreFightIfMounted.Size = new Size(60, 20);
            this.IgnoreFightIfMounted.TabIndex = 0x17;
            this.IgnoreFightIfMounted.Value = false;
            this.MinimumDistanceToUseMount.ForeColor = Color.Black;
            this.MinimumDistanceToUseMount.Location = new Point(0xa1, 0x4f);
            int[] bits = new int[4];
            bits[0] = 200;
            this.MinimumDistanceToUseMount.Maximum = new decimal(bits);
            int[] numArray2 = new int[4];
            numArray2[0] = 1;
            this.MinimumDistanceToUseMount.Minimum = new decimal(numArray2);
            this.MinimumDistanceToUseMount.Name = "MinimumDistanceToUseMount";
            this.MinimumDistanceToUseMount.Size = new Size(0x4d, 0x16);
            this.MinimumDistanceToUseMount.TabIndex = 0x12;
            int[] numArray3 = new int[4];
            numArray3[0] = 15;
            this.MinimumDistanceToUseMount.Value = new decimal(numArray3);
            this.MinimumDistanceToUseMountLabel.BackColor = Color.Transparent;
            this.MinimumDistanceToUseMountLabel.ForeColor = Color.Black;
            this.MinimumDistanceToUseMountLabel.Location = new Point(2, 0x4f);
            this.MinimumDistanceToUseMountLabel.Name = "MinimumDistanceToUseMountLabel";
            this.MinimumDistanceToUseMountLabel.Size = new Size(0x9a, 0x16);
            this.MinimumDistanceToUseMountLabel.TabIndex = 0x10;
            this.MinimumDistanceToUseMountLabel.Text = "Mount Distance";
            this.FlyingMountName.ForeColor = Color.Black;
            this.FlyingMountName.Location = new Point(0xa1, 110);
            this.FlyingMountName.Name = "FlyingMountName";
            this.FlyingMountName.Size = new Size(0x90, 0x16);
            this.FlyingMountName.TabIndex = 15;
            this.FlyingMountNameLabel.BackColor = Color.Transparent;
            this.FlyingMountNameLabel.ForeColor = Color.Black;
            this.FlyingMountNameLabel.Location = new Point(2, 0x6c);
            this.FlyingMountNameLabel.Name = "FlyingMountNameLabel";
            this.FlyingMountNameLabel.Size = new Size(0x9a, 0x16);
            this.FlyingMountNameLabel.TabIndex = 14;
            this.FlyingMountNameLabel.Text = "Flying Mount";
            this.GroundMountName.ForeColor = Color.Black;
            this.GroundMountName.Location = new Point(0xa1, 0x36);
            this.GroundMountName.Name = "GroundMountName";
            this.GroundMountName.Size = new Size(0x90, 0x16);
            this.GroundMountName.TabIndex = 13;
            this.GroundMountNameLabel.BackColor = Color.Transparent;
            this.GroundMountNameLabel.ForeColor = Color.Black;
            this.GroundMountNameLabel.Location = new Point(2, 0x33);
            this.GroundMountNameLabel.Name = "GroundMountNameLabel";
            this.GroundMountNameLabel.Size = new Size(0x9a, 0x16);
            this.GroundMountNameLabel.TabIndex = 12;
            this.GroundMountNameLabel.Text = "Ground Mount";
            this.UseGroundMountLabel.BackColor = Color.Transparent;
            this.UseGroundMountLabel.ForeColor = Color.Black;
            this.UseGroundMountLabel.Location = new Point(0x13c, 0x36);
            this.UseGroundMountLabel.Name = "UseGroundMountLabel";
            this.UseGroundMountLabel.Size = new Size(0x9a, 0x16);
            this.UseGroundMountLabel.TabIndex = 11;
            this.UseGroundMountLabel.Text = "Use Ground Mount";
            this.UseGroundMountLabel.TextAlign = ContentAlignment.MiddleLeft;
            this.UseGroundMount.Font = new Font("Microsoft Sans Serif", 8.25f, FontStyle.Bold);
            this.UseGroundMount.Location = new Point(0x1db, 0x36);
            this.UseGroundMount.MaximumSize = new Size(60, 20);
            this.UseGroundMount.MinimumSize = new Size(60, 20);
            this.UseGroundMount.Name = "UseGroundMount";
            this.UseGroundMount.OffText = "OFF";
            this.UseGroundMount.OnText = "ON";
            this.UseGroundMount.Size = new Size(60, 20);
            this.UseGroundMount.TabIndex = 0x18;
            this.UseGroundMount.Value = false;
            this.LootingFarmingManagementPanelName.BackColor = Color.FromArgb(0xe8, 0xe8, 0xe8);
            this.LootingFarmingManagementPanelName.BorderColor = Color.FromArgb(0x34, 0x34, 0x34);
            this.LootingFarmingManagementPanelName.BorderStyle = ButtonBorderStyle.Solid;
            this.LootingFarmingManagementPanelName.ContentSize = new Size(0x22c, 0x206);
            this.LootingFarmingManagementPanelName.Controls.Add(this.UseLootARangeLabel);
            this.LootingFarmingManagementPanelName.Controls.Add(this.UseLootARange);
            this.LootingFarmingManagementPanelName.Controls.Add(this.ActivateLootStatisticsLabel);
            this.LootingFarmingManagementPanelName.Controls.Add(this.ActivateLootStatistics);
            this.LootingFarmingManagementPanelName.Controls.Add(this.DontHarvestTheFollowingObjectsHelper);
            this.LootingFarmingManagementPanelName.Controls.Add(this.DontHarvestTheFollowingObjects);
            this.LootingFarmingManagementPanelName.Controls.Add(this.AutoConfirmOnBoPItems);
            this.LootingFarmingManagementPanelName.Controls.Add(this.AutoConfirmOnBoPItemsLabel);
            this.LootingFarmingManagementPanelName.Controls.Add(this.OnlyUseMillingInTownLabel);
            this.LootingFarmingManagementPanelName.Controls.Add(this.OnlyUseMillingInTown);
            this.LootingFarmingManagementPanelName.Controls.Add(this.TimeBetweenEachMillingAttempt);
            this.LootingFarmingManagementPanelName.Controls.Add(this.TimeBetweenEachMillingAttemptLabel);
            this.LootingFarmingManagementPanelName.Controls.Add(this.ActivateAutoMillingLabel);
            this.LootingFarmingManagementPanelName.Controls.Add(this.ActivateAutoMilling);
            this.LootingFarmingManagementPanelName.Controls.Add(this.HerbsToBeMilled);
            this.LootingFarmingManagementPanelName.Controls.Add(this.HerbsToBeMilledLabel);
            this.LootingFarmingManagementPanelName.Controls.Add(this.MakeStackOfElementalsItemsLabel);
            this.LootingFarmingManagementPanelName.Controls.Add(this.MakeStackOfElementalsItems);
            this.LootingFarmingManagementPanelName.Controls.Add(this.OnlyUseProspectingInTownLabel);
            this.LootingFarmingManagementPanelName.Controls.Add(this.OnlyUseProspectingInTown);
            this.LootingFarmingManagementPanelName.Controls.Add(this.TimeBetweenEachProspectingAttempt);
            this.LootingFarmingManagementPanelName.Controls.Add(this.TimeBetweenEachProspectingAttemptLabel);
            this.LootingFarmingManagementPanelName.Controls.Add(this.ActivateAutoProspectingLabel);
            this.LootingFarmingManagementPanelName.Controls.Add(this.ActivateAutoProspecting);
            this.LootingFarmingManagementPanelName.Controls.Add(this.MineralsToProspect);
            this.LootingFarmingManagementPanelName.Controls.Add(this.MineralsToProspectLabel);
            this.LootingFarmingManagementPanelName.Controls.Add(this.labelX61);
            this.LootingFarmingManagementPanelName.Controls.Add(this.ActivateAutoSmelting);
            this.LootingFarmingManagementPanelName.Controls.Add(this.DontHarvestTheFollowingObjectsLabel);
            this.LootingFarmingManagementPanelName.Controls.Add(this.addBlackListHarvest);
            this.LootingFarmingManagementPanelName.Controls.Add(this.HarvestDuringLongDistanceMovementsLabel);
            this.LootingFarmingManagementPanelName.Controls.Add(this.HarvestDuringLongDistanceMovements);
            this.LootingFarmingManagementPanelName.Controls.Add(this.labelX23);
            this.LootingFarmingManagementPanelName.Controls.Add(this.BeastNinjaSkinning);
            this.LootingFarmingManagementPanelName.Controls.Add(this.GatheringSearchRadius);
            this.LootingFarmingManagementPanelName.Controls.Add(this.GatheringSearchRadiusLabel);
            this.LootingFarmingManagementPanelName.Controls.Add(this.DontHarvestIfMoreThanXUnitInAggroRange);
            this.LootingFarmingManagementPanelName.Controls.Add(this.DontHarvestIfMoreThanXUnitInAggroRangeLabel);
            this.LootingFarmingManagementPanelName.Controls.Add(this.ActivateHerbsHarvestingLabel);
            this.LootingFarmingManagementPanelName.Controls.Add(this.ActivateHerbsHarvesting);
            this.LootingFarmingManagementPanelName.Controls.Add(this.ActivateVeinsHarvestingLabel);
            this.LootingFarmingManagementPanelName.Controls.Add(this.ActivateVeinsHarvesting);
            this.LootingFarmingManagementPanelName.Controls.Add(this.ActivateBeastSkinningLabel);
            this.LootingFarmingManagementPanelName.Controls.Add(this.ActivateBeastSkinning);
            this.LootingFarmingManagementPanelName.Controls.Add(this.labelX16);
            this.LootingFarmingManagementPanelName.Controls.Add(this.ActivateChestLooting);
            this.LootingFarmingManagementPanelName.Controls.Add(this.DontHarvestIfPlayerNearRadius);
            this.LootingFarmingManagementPanelName.Controls.Add(this.DontHarvestIfPlayerNearRadiusLabel);
            this.LootingFarmingManagementPanelName.Controls.Add(this.ActivateMonsterLootingLabel);
            this.LootingFarmingManagementPanelName.Controls.Add(this.ActivateMonsterLooting);
            this.LootingFarmingManagementPanelName.Fold = true;
            this.LootingFarmingManagementPanelName.FolderImage = (Image) manager.GetObject("LootingFarmingManagementPanelName.FolderImage");
            this.LootingFarmingManagementPanelName.ForeColor = Color.FromArgb(0x34, 0x34, 0x34);
            this.LootingFarmingManagementPanelName.HeaderBackColor = Color.FromArgb(250, 250, 250);
            this.LootingFarmingManagementPanelName.HeaderImage = (Image) manager.GetObject("LootingFarmingManagementPanelName.HeaderImage");
            this.LootingFarmingManagementPanelName.HeaderSize = new Size(0x22c, 0x24);
            this.LootingFarmingManagementPanelName.Location = new Point(0, 0x6c);
            this.LootingFarmingManagementPanelName.Margin = new Padding(0);
            this.LootingFarmingManagementPanelName.MaximumSize = new Size(0x22c, 0);
            this.LootingFarmingManagementPanelName.MinimumSize = new Size(0x22c, 0x24);
            this.LootingFarmingManagementPanelName.Name = "LootingFarmingManagementPanelName";
            this.LootingFarmingManagementPanelName.OrderIndex = 4;
            this.LootingFarmingManagementPanelName.Padding = new Padding(0, 0, 0, 12);
            this.LootingFarmingManagementPanelName.Size = new Size(0x22c, 0x24);
            this.LootingFarmingManagementPanelName.TabIndex = 5;
            this.LootingFarmingManagementPanelName.TitleFont = new Font("Segoe UI", 7.65f, FontStyle.Bold);
            this.LootingFarmingManagementPanelName.TitleForeColor = Color.FromArgb(0xe8, 0xe8, 0xe8);
            this.LootingFarmingManagementPanelName.TitleText = "Looting/Farming Management";
            this.LootingFarmingManagementPanelName.UnfolderImage = (Image) manager.GetObject("LootingFarmingManagementPanelName.UnfolderImage");
            this.UseLootARangeLabel.BackColor = Color.Transparent;
            this.UseLootARangeLabel.ForeColor = Color.Black;
            this.UseLootARangeLabel.Location = new Point(4, 0x227);
            this.UseLootARangeLabel.Name = "UseLootARangeLabel";
            this.UseLootARangeLabel.Size = new Size(0x9a, 0x16);
            this.UseLootARangeLabel.TabIndex = 0x52;
            this.UseLootARangeLabel.Text = "Use Loot-A-Range items";
            this.UseLootARange.Font = new Font("Microsoft Sans Serif", 8.25f, FontStyle.Bold);
            this.UseLootARange.Location = new Point(0xa3, 0x227);
            this.UseLootARange.MaximumSize = new Size(60, 20);
            this.UseLootARange.MinimumSize = new Size(60, 20);
            this.UseLootARange.Name = "UseLootARange";
            this.UseLootARange.OffText = "OFF";
            this.UseLootARange.OnText = "ON";
            this.UseLootARange.Size = new Size(60, 20);
            this.UseLootARange.TabIndex = 0x53;
            this.UseLootARange.Value = true;
            this.ActivateLootStatisticsLabel.BackColor = Color.Transparent;
            this.ActivateLootStatisticsLabel.ForeColor = Color.Black;
            this.ActivateLootStatisticsLabel.Location = new Point(4, 0x4d);
            this.ActivateLootStatisticsLabel.Name = "ActivateLootStatisticsLabel";
            this.ActivateLootStatisticsLabel.Size = new Size(0x9a, 0x16);
            this.ActivateLootStatisticsLabel.TabIndex = 0x42;
            this.ActivateLootStatisticsLabel.Text = "Activate Loot Statistics";
            this.ActivateLootStatistics.Font = new Font("Microsoft Sans Serif", 8.25f, FontStyle.Bold);
            this.ActivateLootStatistics.Location = new Point(0xa3, 0x4d);
            this.ActivateLootStatistics.MaximumSize = new Size(60, 20);
            this.ActivateLootStatistics.MinimumSize = new Size(60, 20);
            this.ActivateLootStatistics.Name = "ActivateLootStatistics";
            this.ActivateLootStatistics.OffText = "OFF";
            this.ActivateLootStatistics.OnText = "ON";
            this.ActivateLootStatistics.Size = new Size(60, 20);
            this.ActivateLootStatistics.TabIndex = 0x43;
            this.ActivateLootStatistics.Value = false;
            this.DontHarvestTheFollowingObjectsHelper.BackColor = Color.FromArgb(0xe3, 0xe5, 230);
            this.DontHarvestTheFollowingObjectsHelper.ForeColor = Color.Black;
            this.DontHarvestTheFollowingObjectsHelper.Location = new Point(500, 160);
            this.DontHarvestTheFollowingObjectsHelper.Name = "DontHarvestTheFollowingObjectsHelper";
            this.DontHarvestTheFollowingObjectsHelper.Size = new Size(0x12, 20);
            this.DontHarvestTheFollowingObjectsHelper.TabIndex = 0x40;
            this.DontHarvestTheFollowingObjectsHelper.Text = "?";
            this.DontHarvestTheFollowingObjectsHelper.UseVisualStyleBackColor = false;
            this.DontHarvestTheFollowingObjectsHelper.Click += new EventHandler(this.DontHaverstObjectsTutorial_Click);
            this.DontHarvestTheFollowingObjects.ForeColor = Color.Black;
            this.DontHarvestTheFollowingObjects.Location = new Point(290, 0xbc);
            this.DontHarvestTheFollowingObjects.Multiline = true;
            this.DontHarvestTheFollowingObjects.Name = "DontHarvestTheFollowingObjects";
            this.DontHarvestTheFollowingObjects.ScrollBars = ScrollBars.Vertical;
            this.DontHarvestTheFollowingObjects.Size = new Size(0xe2, 0x53);
            this.DontHarvestTheFollowingObjects.TabIndex = 0x3f;
            this.AutoConfirmOnBoPItems.Font = new Font("Microsoft Sans Serif", 8.25f, FontStyle.Bold);
            this.AutoConfirmOnBoPItems.Location = new Point(0x1c7, 0x31);
            this.AutoConfirmOnBoPItems.MaximumSize = new Size(60, 20);
            this.AutoConfirmOnBoPItems.MinimumSize = new Size(60, 20);
            this.AutoConfirmOnBoPItems.Name = "AutoConfirmOnBoPItems";
            this.AutoConfirmOnBoPItems.OffText = "OFF";
            this.AutoConfirmOnBoPItems.OnText = "ON";
            this.AutoConfirmOnBoPItems.Size = new Size(60, 20);
            this.AutoConfirmOnBoPItems.TabIndex = 0x44;
            this.AutoConfirmOnBoPItems.Value = false;
            this.AutoConfirmOnBoPItemsLabel.BackColor = Color.Transparent;
            this.AutoConfirmOnBoPItemsLabel.ForeColor = Color.Black;
            this.AutoConfirmOnBoPItemsLabel.Location = new Point(0x121, 0x31);
            this.AutoConfirmOnBoPItemsLabel.Name = "AutoConfirmOnBoPItemsLabel";
            this.AutoConfirmOnBoPItemsLabel.Size = new Size(0xa1, 0x16);
            this.AutoConfirmOnBoPItemsLabel.TabIndex = 0x3e;
            this.AutoConfirmOnBoPItemsLabel.Text = "Auto Confirm on BoP Items";
            this.OnlyUseMillingInTownLabel.BackColor = Color.Transparent;
            this.OnlyUseMillingInTownLabel.ForeColor = Color.Black;
            this.OnlyUseMillingInTownLabel.Location = new Point(4, 0x1f0);
            this.OnlyUseMillingInTownLabel.Name = "OnlyUseMillingInTownLabel";
            this.OnlyUseMillingInTownLabel.Size = new Size(0x9a, 0x16);
            this.OnlyUseMillingInTownLabel.TabIndex = 0x3b;
            this.OnlyUseMillingInTownLabel.Text = "Milling only in town";
            this.OnlyUseMillingInTown.Font = new Font("Microsoft Sans Serif", 8.25f, FontStyle.Bold);
            this.OnlyUseMillingInTown.Location = new Point(0xa3, 0x1f0);
            this.OnlyUseMillingInTown.MaximumSize = new Size(60, 20);
            this.OnlyUseMillingInTown.MinimumSize = new Size(60, 20);
            this.OnlyUseMillingInTown.Name = "OnlyUseMillingInTown";
            this.OnlyUseMillingInTown.OffText = "OFF";
            this.OnlyUseMillingInTown.OnText = "ON";
            this.OnlyUseMillingInTown.Size = new Size(60, 20);
            this.OnlyUseMillingInTown.TabIndex = 0x45;
            this.OnlyUseMillingInTown.Value = false;
            this.TimeBetweenEachMillingAttempt.ForeColor = Color.Black;
            this.TimeBetweenEachMillingAttempt.Location = new Point(0xa3, 0x1d4);
            int[] numArray4 = new int[4];
            numArray4[0] = 200;
            this.TimeBetweenEachMillingAttempt.Maximum = new decimal(numArray4);
            int[] numArray5 = new int[4];
            numArray5[0] = 1;
            this.TimeBetweenEachMillingAttempt.Minimum = new decimal(numArray5);
            this.TimeBetweenEachMillingAttempt.Name = "TimeBetweenEachMillingAttempt";
            this.TimeBetweenEachMillingAttempt.Size = new Size(0x4d, 0x16);
            this.TimeBetweenEachMillingAttempt.TabIndex = 0x39;
            int[] numArray6 = new int[4];
            numArray6[0] = 15;
            this.TimeBetweenEachMillingAttempt.Value = new decimal(numArray6);
            this.TimeBetweenEachMillingAttemptLabel.BackColor = Color.Transparent;
            this.TimeBetweenEachMillingAttemptLabel.ForeColor = Color.Black;
            this.TimeBetweenEachMillingAttemptLabel.Location = new Point(4, 0x1d4);
            this.TimeBetweenEachMillingAttemptLabel.Name = "TimeBetweenEachMillingAttemptLabel";
            this.TimeBetweenEachMillingAttemptLabel.Size = new Size(0x9a, 0x16);
            this.TimeBetweenEachMillingAttemptLabel.TabIndex = 0x38;
            this.TimeBetweenEachMillingAttemptLabel.Text = "Milling Every (in minute)";
            this.ActivateAutoMillingLabel.BackColor = Color.Transparent;
            this.ActivateAutoMillingLabel.ForeColor = Color.Black;
            this.ActivateAutoMillingLabel.Location = new Point(4, 440);
            this.ActivateAutoMillingLabel.Name = "ActivateAutoMillingLabel";
            this.ActivateAutoMillingLabel.Size = new Size(0x9a, 0x16);
            this.ActivateAutoMillingLabel.TabIndex = 0x37;
            this.ActivateAutoMillingLabel.Text = "Milling";
            this.ActivateAutoMilling.Font = new Font("Microsoft Sans Serif", 8.25f, FontStyle.Bold);
            this.ActivateAutoMilling.Location = new Point(0xa3, 440);
            this.ActivateAutoMilling.MaximumSize = new Size(60, 20);
            this.ActivateAutoMilling.MinimumSize = new Size(60, 20);
            this.ActivateAutoMilling.Name = "ActivateAutoMilling";
            this.ActivateAutoMilling.OffText = "OFF";
            this.ActivateAutoMilling.OnText = "ON";
            this.ActivateAutoMilling.Size = new Size(60, 20);
            this.ActivateAutoMilling.TabIndex = 70;
            this.ActivateAutoMilling.Value = false;
            this.HerbsToBeMilled.ForeColor = Color.Black;
            this.HerbsToBeMilled.Location = new Point(290, 440);
            this.HerbsToBeMilled.Multiline = true;
            this.HerbsToBeMilled.Name = "HerbsToBeMilled";
            this.HerbsToBeMilled.ScrollBars = ScrollBars.Vertical;
            this.HerbsToBeMilled.Size = new Size(0xe3, 0x53);
            this.HerbsToBeMilled.TabIndex = 0x35;
            this.HerbsToBeMilledLabel.BackColor = Color.Transparent;
            this.HerbsToBeMilledLabel.ForeColor = Color.Black;
            this.HerbsToBeMilledLabel.Location = new Point(290, 0x19d);
            this.HerbsToBeMilledLabel.Name = "HerbsToBeMilledLabel";
            this.HerbsToBeMilledLabel.Size = new Size(0xcc, 0x16);
            this.HerbsToBeMilledLabel.TabIndex = 0x34;
            this.HerbsToBeMilledLabel.Text = "Milling list (one item by line)";
            this.MakeStackOfElementalsItemsLabel.BackColor = Color.Transparent;
            this.MakeStackOfElementalsItemsLabel.ForeColor = Color.Black;
            this.MakeStackOfElementalsItemsLabel.Location = new Point(4, 0x20c);
            this.MakeStackOfElementalsItemsLabel.Name = "MakeStackOfElementalsItemsLabel";
            this.MakeStackOfElementalsItemsLabel.Size = new Size(0x9a, 0x16);
            this.MakeStackOfElementalsItemsLabel.TabIndex = 0x33;
            this.MakeStackOfElementalsItemsLabel.Text = "Auto Make Elemental";
            this.MakeStackOfElementalsItems.Font = new Font("Microsoft Sans Serif", 8.25f, FontStyle.Bold);
            this.MakeStackOfElementalsItems.Location = new Point(0xa3, 0x20c);
            this.MakeStackOfElementalsItems.MaximumSize = new Size(60, 20);
            this.MakeStackOfElementalsItems.MinimumSize = new Size(60, 20);
            this.MakeStackOfElementalsItems.Name = "MakeStackOfElementalsItems";
            this.MakeStackOfElementalsItems.OffText = "OFF";
            this.MakeStackOfElementalsItems.OnText = "ON";
            this.MakeStackOfElementalsItems.Size = new Size(60, 20);
            this.MakeStackOfElementalsItems.TabIndex = 0x47;
            this.MakeStackOfElementalsItems.Value = true;
            this.OnlyUseProspectingInTownLabel.BackColor = Color.Transparent;
            this.OnlyUseProspectingInTownLabel.ForeColor = Color.Black;
            this.OnlyUseProspectingInTownLabel.Location = new Point(4, 0x17e);
            this.OnlyUseProspectingInTownLabel.Name = "OnlyUseProspectingInTownLabel";
            this.OnlyUseProspectingInTownLabel.Size = new Size(0x9a, 0x16);
            this.OnlyUseProspectingInTownLabel.TabIndex = 0x31;
            this.OnlyUseProspectingInTownLabel.Text = "Prospecting only in town";
            this.OnlyUseProspectingInTown.Font = new Font("Microsoft Sans Serif", 8.25f, FontStyle.Bold);
            this.OnlyUseProspectingInTown.Location = new Point(0xa3, 0x17e);
            this.OnlyUseProspectingInTown.MaximumSize = new Size(60, 20);
            this.OnlyUseProspectingInTown.MinimumSize = new Size(60, 20);
            this.OnlyUseProspectingInTown.Name = "OnlyUseProspectingInTown";
            this.OnlyUseProspectingInTown.OffText = "OFF";
            this.OnlyUseProspectingInTown.OnText = "ON";
            this.OnlyUseProspectingInTown.Size = new Size(60, 20);
            this.OnlyUseProspectingInTown.TabIndex = 0x48;
            this.OnlyUseProspectingInTown.Value = false;
            this.TimeBetweenEachProspectingAttempt.BackColor = SystemColors.Window;
            this.TimeBetweenEachProspectingAttempt.ForeColor = Color.Black;
            this.TimeBetweenEachProspectingAttempt.Location = new Point(0xa3, 0x162);
            int[] numArray7 = new int[4];
            numArray7[0] = 200;
            this.TimeBetweenEachProspectingAttempt.Maximum = new decimal(numArray7);
            int[] numArray8 = new int[4];
            numArray8[0] = 1;
            this.TimeBetweenEachProspectingAttempt.Minimum = new decimal(numArray8);
            this.TimeBetweenEachProspectingAttempt.Name = "TimeBetweenEachProspectingAttempt";
            this.TimeBetweenEachProspectingAttempt.Size = new Size(0x4d, 0x16);
            this.TimeBetweenEachProspectingAttempt.TabIndex = 0x2f;
            int[] numArray9 = new int[4];
            numArray9[0] = 15;
            this.TimeBetweenEachProspectingAttempt.Value = new decimal(numArray9);
            this.TimeBetweenEachProspectingAttemptLabel.BackColor = Color.Transparent;
            this.TimeBetweenEachProspectingAttemptLabel.ForeColor = Color.Black;
            this.TimeBetweenEachProspectingAttemptLabel.Location = new Point(4, 0x162);
            this.TimeBetweenEachProspectingAttemptLabel.Name = "TimeBetweenEachProspectingAttemptLabel";
            this.TimeBetweenEachProspectingAttemptLabel.Size = new Size(0x9a, 0x16);
            this.TimeBetweenEachProspectingAttemptLabel.TabIndex = 0x2e;
            this.TimeBetweenEachProspectingAttemptLabel.Text = "Prospecting Every (in minute)";
            this.ActivateAutoProspectingLabel.BackColor = Color.Transparent;
            this.ActivateAutoProspectingLabel.ForeColor = Color.Black;
            this.ActivateAutoProspectingLabel.Location = new Point(4, 0x146);
            this.ActivateAutoProspectingLabel.Name = "ActivateAutoProspectingLabel";
            this.ActivateAutoProspectingLabel.Size = new Size(0x9a, 0x16);
            this.ActivateAutoProspectingLabel.TabIndex = 0x2d;
            this.ActivateAutoProspectingLabel.Text = "Prospecting";
            this.ActivateAutoProspecting.Font = new Font("Microsoft Sans Serif", 8.25f, FontStyle.Bold);
            this.ActivateAutoProspecting.Location = new Point(0xa3, 0x146);
            this.ActivateAutoProspecting.MaximumSize = new Size(60, 20);
            this.ActivateAutoProspecting.MinimumSize = new Size(60, 20);
            this.ActivateAutoProspecting.Name = "ActivateAutoProspecting";
            this.ActivateAutoProspecting.OffText = "OFF";
            this.ActivateAutoProspecting.OnText = "ON";
            this.ActivateAutoProspecting.Size = new Size(60, 20);
            this.ActivateAutoProspecting.TabIndex = 0x49;
            this.ActivateAutoProspecting.Value = false;
            this.MineralsToProspect.ForeColor = Color.Black;
            this.MineralsToProspect.Location = new Point(290, 0x146);
            this.MineralsToProspect.Multiline = true;
            this.MineralsToProspect.Name = "MineralsToProspect";
            this.MineralsToProspect.ScrollBars = ScrollBars.Vertical;
            this.MineralsToProspect.Size = new Size(0xe3, 0x53);
            this.MineralsToProspect.TabIndex = 0x2b;
            this.MineralsToProspectLabel.BackColor = Color.Transparent;
            this.MineralsToProspectLabel.ForeColor = Color.Black;
            this.MineralsToProspectLabel.Location = new Point(290, 0x12a);
            this.MineralsToProspectLabel.Name = "MineralsToProspectLabel";
            this.MineralsToProspectLabel.Size = new Size(0xcc, 0x16);
            this.MineralsToProspectLabel.TabIndex = 0x2a;
            this.MineralsToProspectLabel.Text = "Prospecting list (one item by line)";
            this.labelX61.BackColor = Color.Transparent;
            this.labelX61.ForeColor = Color.Black;
            this.labelX61.Location = new Point(290, 0x84);
            this.labelX61.Name = "labelX61";
            this.labelX61.Size = new Size(160, 0x16);
            this.labelX61.TabIndex = 0x29;
            this.labelX61.Text = "Smelting";
            this.ActivateAutoSmelting.Font = new Font("Microsoft Sans Serif", 8.25f, FontStyle.Bold);
            this.ActivateAutoSmelting.Location = new Point(0x1c7, 0x84);
            this.ActivateAutoSmelting.MaximumSize = new Size(60, 20);
            this.ActivateAutoSmelting.MinimumSize = new Size(60, 20);
            this.ActivateAutoSmelting.Name = "ActivateAutoSmelting";
            this.ActivateAutoSmelting.OffText = "OFF";
            this.ActivateAutoSmelting.OnText = "ON";
            this.ActivateAutoSmelting.Size = new Size(60, 20);
            this.ActivateAutoSmelting.TabIndex = 0x4a;
            this.ActivateAutoSmelting.Value = false;
            this.DontHarvestTheFollowingObjectsLabel.BackColor = Color.Transparent;
            this.DontHarvestTheFollowingObjectsLabel.ForeColor = Color.Black;
            this.DontHarvestTheFollowingObjectsLabel.Location = new Point(0x121, 160);
            this.DontHarvestTheFollowingObjectsLabel.Name = "DontHarvestTheFollowingObjectsLabel";
            this.DontHarvestTheFollowingObjectsLabel.Size = new Size(0xd1, 0x16);
            this.DontHarvestTheFollowingObjectsLabel.TabIndex = 0x26;
            this.DontHarvestTheFollowingObjectsLabel.Text = "Don't harvest List (one id per line)";
            this.addBlackListHarvest.AccessibleRole = AccessibleRole.PushButton;
            this.addBlackListHarvest.AutoEllipsis = true;
            this.addBlackListHarvest.Font = new Font("Microsoft Sans Serif", 8.25f, FontStyle.Bold);
            this.addBlackListHarvest.ForeColor = Color.Snow;
            this.addBlackListHarvest.HooverImage = (Image) manager.GetObject("addBlackListHarvest.HooverImage");
            this.addBlackListHarvest.Image = (Image) manager.GetObject("addBlackListHarvest.Image");
            this.addBlackListHarvest.Location = new Point(0, 0);
            this.addBlackListHarvest.Name = "addBlackListHarvest";
            this.addBlackListHarvest.Size = new Size(0x6a, 0x1d);
            this.addBlackListHarvest.TabIndex = 60;
            this.addBlackListHarvest.TextAlign = ContentAlignment.MiddleCenter;
            this.HarvestDuringLongDistanceMovementsLabel.BackColor = Color.Transparent;
            this.HarvestDuringLongDistanceMovementsLabel.ForeColor = Color.Black;
            this.HarvestDuringLongDistanceMovementsLabel.Location = new Point(4, 0x110);
            this.HarvestDuringLongDistanceMovementsLabel.Name = "HarvestDuringLongDistanceMovementsLabel";
            this.HarvestDuringLongDistanceMovementsLabel.Size = new Size(0x9a, 0x16);
            this.HarvestDuringLongDistanceMovementsLabel.TabIndex = 0x22;
            this.HarvestDuringLongDistanceMovementsLabel.Text = "Harvest During Long Move";
            this.HarvestDuringLongDistanceMovements.Font = new Font("Microsoft Sans Serif", 8.25f, FontStyle.Bold);
            this.HarvestDuringLongDistanceMovements.Location = new Point(0xa3, 0x110);
            this.HarvestDuringLongDistanceMovements.MaximumSize = new Size(60, 20);
            this.HarvestDuringLongDistanceMovements.MinimumSize = new Size(60, 20);
            this.HarvestDuringLongDistanceMovements.Name = "HarvestDuringLongDistanceMovements";
            this.HarvestDuringLongDistanceMovements.OffText = "OFF";
            this.HarvestDuringLongDistanceMovements.OnText = "ON";
            this.HarvestDuringLongDistanceMovements.Size = new Size(60, 20);
            this.HarvestDuringLongDistanceMovements.TabIndex = 0x4b;
            this.HarvestDuringLongDistanceMovements.Value = false;
            this.labelX23.BackColor = Color.Transparent;
            this.labelX23.ForeColor = Color.Black;
            this.labelX23.Location = new Point(0x121, 0x68);
            this.labelX23.Name = "labelX23";
            this.labelX23.Size = new Size(0xa1, 0x16);
            this.labelX23.TabIndex = 0x20;
            this.labelX23.Text = "Ninja";
            this.BeastNinjaSkinning.Font = new Font("Microsoft Sans Serif", 8.25f, FontStyle.Bold);
            this.BeastNinjaSkinning.Location = new Point(0x1c7, 0x68);
            this.BeastNinjaSkinning.MaximumSize = new Size(60, 20);
            this.BeastNinjaSkinning.MinimumSize = new Size(60, 20);
            this.BeastNinjaSkinning.Name = "BeastNinjaSkinning";
            this.BeastNinjaSkinning.OffText = "OFF";
            this.BeastNinjaSkinning.OnText = "ON";
            this.BeastNinjaSkinning.Size = new Size(60, 20);
            this.BeastNinjaSkinning.TabIndex = 0x4c;
            this.BeastNinjaSkinning.Value = false;
            this.GatheringSearchRadius.ForeColor = Color.Black;
            this.GatheringSearchRadius.Location = new Point(0xa3, 0xf4);
            int[] numArray10 = new int[4];
            numArray10[0] = 300;
            this.GatheringSearchRadius.Maximum = new decimal(numArray10);
            int[] numArray11 = new int[4];
            numArray11[0] = 10;
            this.GatheringSearchRadius.Minimum = new decimal(numArray11);
            this.GatheringSearchRadius.Name = "GatheringSearchRadius";
            this.GatheringSearchRadius.Size = new Size(0x4d, 0x16);
            this.GatheringSearchRadius.TabIndex = 30;
            int[] numArray12 = new int[4];
            numArray12[0] = 50;
            this.GatheringSearchRadius.Value = new decimal(numArray12);
            this.GatheringSearchRadiusLabel.BackColor = Color.Transparent;
            this.GatheringSearchRadiusLabel.ForeColor = Color.Black;
            this.GatheringSearchRadiusLabel.Location = new Point(4, 0xf4);
            this.GatheringSearchRadiusLabel.Name = "GatheringSearchRadiusLabel";
            this.GatheringSearchRadiusLabel.Size = new Size(0x9a, 0x16);
            this.GatheringSearchRadiusLabel.TabIndex = 0x1d;
            this.GatheringSearchRadiusLabel.Text = "Search Radius";
            this.DontHarvestIfMoreThanXUnitInAggroRange.ForeColor = Color.Black;
            this.DontHarvestIfMoreThanXUnitInAggroRange.Location = new Point(0xa3, 0xd8);
            int[] numArray13 = new int[4];
            numArray13[0] = 10;
            this.DontHarvestIfMoreThanXUnitInAggroRange.Maximum = new decimal(numArray13);
            this.DontHarvestIfMoreThanXUnitInAggroRange.Name = "DontHarvestIfMoreThanXUnitInAggroRange";
            this.DontHarvestIfMoreThanXUnitInAggroRange.Size = new Size(0x4d, 0x16);
            this.DontHarvestIfMoreThanXUnitInAggroRange.TabIndex = 0x1c;
            int[] numArray14 = new int[4];
            numArray14[0] = 3;
            this.DontHarvestIfMoreThanXUnitInAggroRange.Value = new decimal(numArray14);
            this.DontHarvestIfMoreThanXUnitInAggroRangeLabel.BackColor = Color.Transparent;
            this.DontHarvestIfMoreThanXUnitInAggroRangeLabel.ForeColor = Color.Black;
            this.DontHarvestIfMoreThanXUnitInAggroRangeLabel.Location = new Point(4, 0xd8);
            this.DontHarvestIfMoreThanXUnitInAggroRangeLabel.Name = "DontHarvestIfMoreThanXUnitInAggroRangeLabel";
            this.DontHarvestIfMoreThanXUnitInAggroRangeLabel.Size = new Size(0x9a, 0x16);
            this.DontHarvestIfMoreThanXUnitInAggroRangeLabel.TabIndex = 0x1b;
            this.DontHarvestIfMoreThanXUnitInAggroRangeLabel.Text = "Max Units Near";
            this.ActivateHerbsHarvestingLabel.BackColor = Color.Transparent;
            this.ActivateHerbsHarvestingLabel.ForeColor = Color.Black;
            this.ActivateHerbsHarvestingLabel.Location = new Point(4, 160);
            this.ActivateHerbsHarvestingLabel.Name = "ActivateHerbsHarvestingLabel";
            this.ActivateHerbsHarvestingLabel.Size = new Size(0x9a, 0x16);
            this.ActivateHerbsHarvestingLabel.TabIndex = 0x1a;
            this.ActivateHerbsHarvestingLabel.Text = "Harvest Herbs";
            this.ActivateHerbsHarvesting.Font = new Font("Microsoft Sans Serif", 8.25f, FontStyle.Bold);
            this.ActivateHerbsHarvesting.Location = new Point(0xa3, 160);
            this.ActivateHerbsHarvesting.MaximumSize = new Size(60, 20);
            this.ActivateHerbsHarvesting.MinimumSize = new Size(60, 20);
            this.ActivateHerbsHarvesting.Name = "ActivateHerbsHarvesting";
            this.ActivateHerbsHarvesting.OffText = "OFF";
            this.ActivateHerbsHarvesting.OnText = "ON";
            this.ActivateHerbsHarvesting.Size = new Size(60, 20);
            this.ActivateHerbsHarvesting.TabIndex = 0x4d;
            this.ActivateHerbsHarvesting.Value = false;
            this.ActivateVeinsHarvestingLabel.BackColor = Color.Transparent;
            this.ActivateVeinsHarvestingLabel.ForeColor = Color.Black;
            this.ActivateVeinsHarvestingLabel.Location = new Point(4, 0x84);
            this.ActivateVeinsHarvestingLabel.Name = "ActivateVeinsHarvestingLabel";
            this.ActivateVeinsHarvestingLabel.Size = new Size(0x9a, 0x16);
            this.ActivateVeinsHarvestingLabel.TabIndex = 0x18;
            this.ActivateVeinsHarvestingLabel.Text = "Harvest Minerals";
            this.ActivateVeinsHarvesting.Font = new Font("Microsoft Sans Serif", 8.25f, FontStyle.Bold);
            this.ActivateVeinsHarvesting.Location = new Point(0xa3, 0x84);
            this.ActivateVeinsHarvesting.MaximumSize = new Size(60, 20);
            this.ActivateVeinsHarvesting.MinimumSize = new Size(60, 20);
            this.ActivateVeinsHarvesting.Name = "ActivateVeinsHarvesting";
            this.ActivateVeinsHarvesting.OffText = "OFF";
            this.ActivateVeinsHarvesting.OnText = "ON";
            this.ActivateVeinsHarvesting.Size = new Size(60, 20);
            this.ActivateVeinsHarvesting.TabIndex = 0x4e;
            this.ActivateVeinsHarvesting.Value = false;
            this.ActivateBeastSkinningLabel.BackColor = Color.Transparent;
            this.ActivateBeastSkinningLabel.ForeColor = Color.Black;
            this.ActivateBeastSkinningLabel.Location = new Point(4, 0x68);
            this.ActivateBeastSkinningLabel.Name = "ActivateBeastSkinningLabel";
            this.ActivateBeastSkinningLabel.Size = new Size(0x9a, 0x16);
            this.ActivateBeastSkinningLabel.TabIndex = 0x16;
            this.ActivateBeastSkinningLabel.Text = "Skin Mobs";
            this.ActivateBeastSkinning.Font = new Font("Microsoft Sans Serif", 8.25f, FontStyle.Bold);
            this.ActivateBeastSkinning.Location = new Point(0xa3, 0x68);
            this.ActivateBeastSkinning.MaximumSize = new Size(60, 20);
            this.ActivateBeastSkinning.MinimumSize = new Size(60, 20);
            this.ActivateBeastSkinning.Name = "ActivateBeastSkinning";
            this.ActivateBeastSkinning.OffText = "OFF";
            this.ActivateBeastSkinning.OnText = "ON";
            this.ActivateBeastSkinning.Size = new Size(60, 20);
            this.ActivateBeastSkinning.TabIndex = 0x4f;
            this.ActivateBeastSkinning.Value = false;
            this.labelX16.BackColor = Color.Transparent;
            this.labelX16.ForeColor = Color.Black;
            this.labelX16.Location = new Point(290, 0x4d);
            this.labelX16.Name = "labelX16";
            this.labelX16.Size = new Size(160, 0x16);
            this.labelX16.TabIndex = 20;
            this.labelX16.Text = "Loot Chests";
            this.ActivateChestLooting.Font = new Font("Microsoft Sans Serif", 8.25f, FontStyle.Bold);
            this.ActivateChestLooting.Location = new Point(0x1c7, 0x4d);
            this.ActivateChestLooting.MaximumSize = new Size(60, 20);
            this.ActivateChestLooting.MinimumSize = new Size(60, 20);
            this.ActivateChestLooting.Name = "ActivateChestLooting";
            this.ActivateChestLooting.OffText = "OFF";
            this.ActivateChestLooting.OnText = "ON";
            this.ActivateChestLooting.Size = new Size(60, 20);
            this.ActivateChestLooting.TabIndex = 80;
            this.ActivateChestLooting.Value = false;
            this.DontHarvestIfPlayerNearRadius.ForeColor = Color.Black;
            this.DontHarvestIfPlayerNearRadius.Location = new Point(0xa3, 0xbc);
            int[] numArray15 = new int[4];
            numArray15[0] = 50;
            this.DontHarvestIfPlayerNearRadius.Maximum = new decimal(numArray15);
            this.DontHarvestIfPlayerNearRadius.Name = "DontHarvestIfPlayerNearRadius";
            this.DontHarvestIfPlayerNearRadius.Size = new Size(0x4d, 0x16);
            this.DontHarvestIfPlayerNearRadius.TabIndex = 0x12;
            int[] numArray16 = new int[4];
            numArray16[0] = 10;
            this.DontHarvestIfPlayerNearRadius.Value = new decimal(numArray16);
            this.DontHarvestIfPlayerNearRadiusLabel.BackColor = Color.Transparent;
            this.DontHarvestIfPlayerNearRadiusLabel.ForeColor = Color.Black;
            this.DontHarvestIfPlayerNearRadiusLabel.Location = new Point(4, 0xbc);
            this.DontHarvestIfPlayerNearRadiusLabel.Name = "DontHarvestIfPlayerNearRadiusLabel";
            this.DontHarvestIfPlayerNearRadiusLabel.Size = new Size(0x9a, 0x16);
            this.DontHarvestIfPlayerNearRadiusLabel.TabIndex = 0x10;
            this.DontHarvestIfPlayerNearRadiusLabel.Text = "Harvest Avoid Players Radius";
            this.ActivateMonsterLootingLabel.BackColor = Color.Transparent;
            this.ActivateMonsterLootingLabel.ForeColor = Color.Black;
            this.ActivateMonsterLootingLabel.Location = new Point(4, 0x31);
            this.ActivateMonsterLootingLabel.Name = "ActivateMonsterLootingLabel";
            this.ActivateMonsterLootingLabel.Size = new Size(0x9a, 0x16);
            this.ActivateMonsterLootingLabel.TabIndex = 11;
            this.ActivateMonsterLootingLabel.Text = "Loot Mobs";
            this.ActivateMonsterLooting.Font = new Font("Microsoft Sans Serif", 8.25f, FontStyle.Bold);
            this.ActivateMonsterLooting.Location = new Point(0xa3, 0x31);
            this.ActivateMonsterLooting.MaximumSize = new Size(60, 20);
            this.ActivateMonsterLooting.MinimumSize = new Size(60, 20);
            this.ActivateMonsterLooting.Name = "ActivateMonsterLooting";
            this.ActivateMonsterLooting.OffText = "OFF";
            this.ActivateMonsterLooting.OnText = "ON";
            this.ActivateMonsterLooting.Size = new Size(60, 20);
            this.ActivateMonsterLooting.TabIndex = 0x51;
            this.ActivateMonsterLooting.Value = false;
            this.NPCsRepairSellBuyPanelName.BackColor = Color.FromArgb(0xe8, 0xe8, 0xe8);
            this.NPCsRepairSellBuyPanelName.BorderColor = Color.FromArgb(0x34, 0x34, 0x34);
            this.NPCsRepairSellBuyPanelName.BorderStyle = ButtonBorderStyle.Solid;
            this.NPCsRepairSellBuyPanelName.ContentSize = new Size(0x22c, 0x13c);
            this.NPCsRepairSellBuyPanelName.Controls.Add(this.SellPurple);
            this.NPCsRepairSellBuyPanelName.Controls.Add(this.SellBlue);
            this.NPCsRepairSellBuyPanelName.Controls.Add(this.SellGreen);
            this.NPCsRepairSellBuyPanelName.Controls.Add(this.SellWhite);
            this.NPCsRepairSellBuyPanelName.Controls.Add(this.SellGray);
            this.NPCsRepairSellBuyPanelName.Controls.Add(this.UseRobotLabel);
            this.NPCsRepairSellBuyPanelName.Controls.Add(this.UseRobot);
            this.NPCsRepairSellBuyPanelName.Controls.Add(this.SellItemsWhenLessThanXSlotLeft);
            this.NPCsRepairSellBuyPanelName.Controls.Add(this.RepairWhenDurabilityIsUnderPercent);
            this.NPCsRepairSellBuyPanelName.Controls.Add(this.SellItemsWhenLessThanXSlotLeftLabel);
            this.NPCsRepairSellBuyPanelName.Controls.Add(this.RepairWhenDurabilityIsUnderPercentLabel);
            this.NPCsRepairSellBuyPanelName.Controls.Add(this.ForceToSellTheseItems);
            this.NPCsRepairSellBuyPanelName.Controls.Add(this.ForceToSellTheseItemsLabel);
            this.NPCsRepairSellBuyPanelName.Controls.Add(this.labelX52);
            this.NPCsRepairSellBuyPanelName.Controls.Add(this.ActivateAutoSellingFeature);
            this.NPCsRepairSellBuyPanelName.Controls.Add(this.ActivateAutoRepairFeatureLabel);
            this.NPCsRepairSellBuyPanelName.Controls.Add(this.ActivateAutoRepairFeature);
            this.NPCsRepairSellBuyPanelName.Controls.Add(this.NumberOfFoodsWeGot);
            this.NPCsRepairSellBuyPanelName.Controls.Add(this.NumberOfFoodsWeGotLabel);
            this.NPCsRepairSellBuyPanelName.Controls.Add(this.NumberOfBeverageWeGot);
            this.NPCsRepairSellBuyPanelName.Controls.Add(this.NumberOfBeverageWeGotLabel);
            this.NPCsRepairSellBuyPanelName.Controls.Add(this.DontSellTheseItems);
            this.NPCsRepairSellBuyPanelName.Controls.Add(this.DontSellTheseItemsLabel);
            this.NPCsRepairSellBuyPanelName.Fold = true;
            this.NPCsRepairSellBuyPanelName.FolderImage = (Image) manager.GetObject("NPCsRepairSellBuyPanelName.FolderImage");
            this.NPCsRepairSellBuyPanelName.ForeColor = Color.FromArgb(0x34, 0x34, 0x34);
            this.NPCsRepairSellBuyPanelName.HeaderBackColor = Color.FromArgb(250, 250, 250);
            this.NPCsRepairSellBuyPanelName.HeaderImage = (Image) manager.GetObject("NPCsRepairSellBuyPanelName.HeaderImage");
            this.NPCsRepairSellBuyPanelName.HeaderSize = new Size(0x22c, 0x24);
            this.NPCsRepairSellBuyPanelName.Location = new Point(0, 0x90);
            this.NPCsRepairSellBuyPanelName.Margin = new Padding(0);
            this.NPCsRepairSellBuyPanelName.MaximumSize = new Size(0x22c, 0);
            this.NPCsRepairSellBuyPanelName.MinimumSize = new Size(0x22c, 0x24);
            this.NPCsRepairSellBuyPanelName.Name = "NPCsRepairSellBuyPanelName";
            this.NPCsRepairSellBuyPanelName.OrderIndex = 5;
            this.NPCsRepairSellBuyPanelName.Padding = new Padding(0, 0, 0, 12);
            this.NPCsRepairSellBuyPanelName.Size = new Size(0x22c, 0x24);
            this.NPCsRepairSellBuyPanelName.TabIndex = 9;
            this.NPCsRepairSellBuyPanelName.TitleFont = new Font("Segoe UI", 7.65f, FontStyle.Bold);
            this.NPCsRepairSellBuyPanelName.TitleForeColor = Color.FromArgb(0xe8, 0xe8, 0xe8);
            this.NPCsRepairSellBuyPanelName.TitleText = "NPCs Management - Repairer, Vendor (Selling or Buying)";
            this.NPCsRepairSellBuyPanelName.UnfolderImage = (Image) manager.GetObject("NPCsRepairSellBuyPanelName.UnfolderImage");
            this.SellPurple.ForeColor = Color.Black;
            this.SellPurple.Location = new Point(0xc0, 0xc2);
            this.SellPurple.Name = "SellPurple";
            this.SellPurple.Size = new Size(0xa9, 0x17);
            this.SellPurple.TabIndex = 0x21;
            this.SellPurple.Text = "Sell Purple items";
            this.SellBlue.ForeColor = Color.Black;
            this.SellBlue.Location = new Point(11, 0xc2);
            this.SellBlue.Name = "SellBlue";
            this.SellBlue.Size = new Size(0xaf, 0x17);
            this.SellBlue.TabIndex = 0x20;
            this.SellBlue.Text = "Sell Blue items";
            this.SellGreen.ForeColor = Color.Black;
            this.SellGreen.Location = new Point(0x18a, 0xa5);
            this.SellGreen.Name = "SellGreen";
            this.SellGreen.Size = new Size(0x87, 0x17);
            this.SellGreen.TabIndex = 0x1f;
            this.SellGreen.Text = "Sell Green items";
            this.SellWhite.ForeColor = Color.Black;
            this.SellWhite.Location = new Point(0xc0, 0xa5);
            this.SellWhite.Name = "SellWhite";
            this.SellWhite.Size = new Size(0xbc, 0x17);
            this.SellWhite.TabIndex = 30;
            this.SellWhite.Text = "Sell White items";
            this.SellGray.ForeColor = Color.Black;
            this.SellGray.Location = new Point(11, 0xa5);
            this.SellGray.Name = "SellGray";
            this.SellGray.Size = new Size(0xaf, 0x17);
            this.SellGray.TabIndex = 0x1d;
            this.SellGray.Text = "Sell Gray items";
            this.UseRobotLabel.BackColor = Color.Transparent;
            this.UseRobotLabel.ForeColor = Color.Black;
            this.UseRobotLabel.Location = new Point(4, 0x36);
            this.UseRobotLabel.Name = "UseRobotLabel";
            this.UseRobotLabel.Size = new Size(0x9a, 0x16);
            this.UseRobotLabel.TabIndex = 0x29;
            this.UseRobotLabel.Text = "Use robot when possible";
            this.UseRobot.Font = new Font("Microsoft Sans Serif", 8.25f, FontStyle.Bold);
            this.UseRobot.Location = new Point(0xa3, 0x36);
            this.UseRobot.MaximumSize = new Size(60, 20);
            this.UseRobot.MinimumSize = new Size(60, 20);
            this.UseRobot.Name = "UseRobot";
            this.UseRobot.OffText = "OFF";
            this.UseRobot.OnText = "ON";
            this.UseRobot.Size = new Size(60, 20);
            this.UseRobot.TabIndex = 0x2a;
            this.UseRobot.Value = false;
            this.SellItemsWhenLessThanXSlotLeft.ForeColor = Color.Black;
            this.SellItemsWhenLessThanXSlotLeft.Location = new Point(0x1e8, 0x8a);
            int[] numArray17 = new int[4];
            numArray17[0] = 200;
            this.SellItemsWhenLessThanXSlotLeft.Maximum = new decimal(numArray17);
            int[] numArray18 = new int[4];
            numArray18[0] = 1;
            this.SellItemsWhenLessThanXSlotLeft.Minimum = new decimal(numArray18);
            this.SellItemsWhenLessThanXSlotLeft.Name = "SellItemsWhenLessThanXSlotLeft";
            this.SellItemsWhenLessThanXSlotLeft.Size = new Size(0x29, 0x16);
            this.SellItemsWhenLessThanXSlotLeft.TabIndex = 0x27;
            int[] numArray19 = new int[4];
            numArray19[0] = 2;
            this.SellItemsWhenLessThanXSlotLeft.Value = new decimal(numArray19);
            this.RepairWhenDurabilityIsUnderPercent.ForeColor = Color.Black;
            this.RepairWhenDurabilityIsUnderPercent.Location = new Point(0x1e8, 110);
            int[] numArray20 = new int[4];
            numArray20[0] = 1;
            this.RepairWhenDurabilityIsUnderPercent.Minimum = new decimal(numArray20);
            this.RepairWhenDurabilityIsUnderPercent.Name = "RepairWhenDurabilityIsUnderPercent";
            this.RepairWhenDurabilityIsUnderPercent.Size = new Size(0x29, 0x16);
            this.RepairWhenDurabilityIsUnderPercent.TabIndex = 0x26;
            int[] numArray21 = new int[4];
            numArray21[0] = 30;
            this.RepairWhenDurabilityIsUnderPercent.Value = new decimal(numArray21);
            this.SellItemsWhenLessThanXSlotLeftLabel.BackColor = Color.Transparent;
            this.SellItemsWhenLessThanXSlotLeftLabel.ForeColor = Color.Black;
            this.SellItemsWhenLessThanXSlotLeftLabel.Location = new Point(280, 0x88);
            this.SellItemsWhenLessThanXSlotLeftLabel.Name = "SellItemsWhenLessThanXSlotLeftLabel";
            this.SellItemsWhenLessThanXSlotLeftLabel.Size = new Size(0xc4, 0x17);
            this.SellItemsWhenLessThanXSlotLeftLabel.TabIndex = 0x25;
            this.SellItemsWhenLessThanXSlotLeftLabel.Text = "Sell items when less than X slot left";
            this.RepairWhenDurabilityIsUnderPercentLabel.BackColor = Color.Transparent;
            this.RepairWhenDurabilityIsUnderPercentLabel.ForeColor = Color.Black;
            this.RepairWhenDurabilityIsUnderPercentLabel.Location = new Point(0x117, 0x6c);
            this.RepairWhenDurabilityIsUnderPercentLabel.Name = "RepairWhenDurabilityIsUnderPercentLabel";
            this.RepairWhenDurabilityIsUnderPercentLabel.Size = new Size(0xc5, 0x17);
            this.RepairWhenDurabilityIsUnderPercentLabel.TabIndex = 0x24;
            this.RepairWhenDurabilityIsUnderPercentLabel.Text = "Repair when Durability is under than X %";
            this.ForceToSellTheseItems.ForeColor = Color.Black;
            this.ForceToSellTheseItems.Location = new Point(0x110, 0xfe);
            this.ForceToSellTheseItems.Multiline = true;
            this.ForceToSellTheseItems.Name = "ForceToSellTheseItems";
            this.ForceToSellTheseItems.ScrollBars = ScrollBars.Vertical;
            this.ForceToSellTheseItems.Size = new Size(0xe3, 0x53);
            this.ForceToSellTheseItems.TabIndex = 0x23;
            this.ForceToSellTheseItemsLabel.BackColor = Color.Transparent;
            this.ForceToSellTheseItemsLabel.ForeColor = Color.Black;
            this.ForceToSellTheseItemsLabel.Location = new Point(0x110, 0xe2);
            this.ForceToSellTheseItemsLabel.Name = "ForceToSellTheseItemsLabel";
            this.ForceToSellTheseItemsLabel.Size = new Size(0xe3, 0x16);
            this.ForceToSellTheseItemsLabel.TabIndex = 0x22;
            this.ForceToSellTheseItemsLabel.Text = "Force Sell List (one item by line)";
            this.labelX52.BackColor = Color.Transparent;
            this.labelX52.ForeColor = Color.Black;
            this.labelX52.Location = new Point(3, 0x89);
            this.labelX52.Name = "labelX52";
            this.labelX52.Size = new Size(0x9a, 0x16);
            this.labelX52.TabIndex = 0x1c;
            this.labelX52.Text = "Selling";
            this.ActivateAutoSellingFeature.Font = new Font("Microsoft Sans Serif", 8.25f, FontStyle.Bold);
            this.ActivateAutoSellingFeature.Location = new Point(0xa2, 0x89);
            this.ActivateAutoSellingFeature.MaximumSize = new Size(60, 20);
            this.ActivateAutoSellingFeature.MinimumSize = new Size(60, 20);
            this.ActivateAutoSellingFeature.Name = "ActivateAutoSellingFeature";
            this.ActivateAutoSellingFeature.OffText = "OFF";
            this.ActivateAutoSellingFeature.OnText = "ON";
            this.ActivateAutoSellingFeature.Size = new Size(60, 20);
            this.ActivateAutoSellingFeature.TabIndex = 0x2b;
            this.ActivateAutoSellingFeature.Value = false;
            this.ActivateAutoRepairFeatureLabel.BackColor = Color.Transparent;
            this.ActivateAutoRepairFeatureLabel.ForeColor = Color.Black;
            this.ActivateAutoRepairFeatureLabel.Location = new Point(3, 0x6d);
            this.ActivateAutoRepairFeatureLabel.Name = "ActivateAutoRepairFeatureLabel";
            this.ActivateAutoRepairFeatureLabel.Size = new Size(0x9a, 0x16);
            this.ActivateAutoRepairFeatureLabel.TabIndex = 0x1a;
            this.ActivateAutoRepairFeatureLabel.Text = "Repair";
            this.ActivateAutoRepairFeature.Font = new Font("Microsoft Sans Serif", 8.25f, FontStyle.Bold);
            this.ActivateAutoRepairFeature.Location = new Point(0xa2, 0x6d);
            this.ActivateAutoRepairFeature.MaximumSize = new Size(60, 20);
            this.ActivateAutoRepairFeature.MinimumSize = new Size(60, 20);
            this.ActivateAutoRepairFeature.Name = "ActivateAutoRepairFeature";
            this.ActivateAutoRepairFeature.OffText = "OFF";
            this.ActivateAutoRepairFeature.OnText = "ON";
            this.ActivateAutoRepairFeature.Size = new Size(60, 20);
            this.ActivateAutoRepairFeature.TabIndex = 0x2c;
            this.ActivateAutoRepairFeature.Value = false;
            this.NumberOfFoodsWeGot.ForeColor = Color.Black;
            this.NumberOfFoodsWeGot.Location = new Point(0x1d2, 80);
            this.NumberOfFoodsWeGot.Name = "NumberOfFoodsWeGot";
            this.NumberOfFoodsWeGot.Size = new Size(0x3f, 0x16);
            this.NumberOfFoodsWeGot.TabIndex = 0x18;
            this.NumberOfFoodsWeGotLabel.BackColor = Color.Transparent;
            this.NumberOfFoodsWeGotLabel.ForeColor = Color.Black;
            this.NumberOfFoodsWeGotLabel.Location = new Point(280, 80);
            this.NumberOfFoodsWeGotLabel.Name = "NumberOfFoodsWeGotLabel";
            this.NumberOfFoodsWeGotLabel.Size = new Size(0x9a, 0x16);
            this.NumberOfFoodsWeGotLabel.TabIndex = 0x17;
            this.NumberOfFoodsWeGotLabel.Text = "Food Amount";
            this.NumberOfBeverageWeGot.ForeColor = Color.Black;
            this.NumberOfBeverageWeGot.Location = new Point(0xa2, 0x51);
            this.NumberOfBeverageWeGot.Name = "NumberOfBeverageWeGot";
            this.NumberOfBeverageWeGot.Size = new Size(0x3f, 0x16);
            this.NumberOfBeverageWeGot.TabIndex = 0x12;
            this.NumberOfBeverageWeGotLabel.BackColor = Color.Transparent;
            this.NumberOfBeverageWeGotLabel.ForeColor = Color.Black;
            this.NumberOfBeverageWeGotLabel.Location = new Point(3, 0x51);
            this.NumberOfBeverageWeGotLabel.Name = "NumberOfBeverageWeGotLabel";
            this.NumberOfBeverageWeGotLabel.Size = new Size(0x9a, 0x16);
            this.NumberOfBeverageWeGotLabel.TabIndex = 0x10;
            this.NumberOfBeverageWeGotLabel.Text = "Drink Amount";
            this.DontSellTheseItems.ForeColor = Color.Black;
            this.DontSellTheseItems.Location = new Point(12, 0xfe);
            this.DontSellTheseItems.Multiline = true;
            this.DontSellTheseItems.Name = "DontSellTheseItems";
            this.DontSellTheseItems.ScrollBars = ScrollBars.Vertical;
            this.DontSellTheseItems.Size = new Size(0xe3, 0x53);
            this.DontSellTheseItems.TabIndex = 15;
            this.DontSellTheseItemsLabel.BackColor = Color.Transparent;
            this.DontSellTheseItemsLabel.ForeColor = Color.Black;
            this.DontSellTheseItemsLabel.Location = new Point(12, 0xe2);
            this.DontSellTheseItemsLabel.Name = "DontSellTheseItemsLabel";
            this.DontSellTheseItemsLabel.Size = new Size(0xe3, 0x16);
            this.DontSellTheseItemsLabel.TabIndex = 14;
            this.DontSellTheseItemsLabel.Text = "Do not Sell List (one item by line)";
            this.MailsManagementPanelName.BackColor = Color.FromArgb(0xe8, 0xe8, 0xe8);
            this.MailsManagementPanelName.BorderColor = Color.FromArgb(0x34, 0x34, 0x34);
            this.MailsManagementPanelName.BorderStyle = ButtonBorderStyle.Solid;
            this.MailsManagementPanelName.ContentSize = new Size(0x22c, 0x13c);
            this.MailsManagementPanelName.Controls.Add(this.MailPurple);
            this.MailsManagementPanelName.Controls.Add(this.MailBlue);
            this.MailsManagementPanelName.Controls.Add(this.MailGreen);
            this.MailsManagementPanelName.Controls.Add(this.MailWhite);
            this.MailsManagementPanelName.Controls.Add(this.MailGray);
            this.MailsManagementPanelName.Controls.Add(this.UseMollELabel);
            this.MailsManagementPanelName.Controls.Add(this.UseMollE);
            this.MailsManagementPanelName.Controls.Add(this.SendMailWhenLessThanXSlotLeft);
            this.MailsManagementPanelName.Controls.Add(this.SendMailWhenLessThanXSlotLeftLabel);
            this.MailsManagementPanelName.Controls.Add(this.MaillingFeatureRecipient);
            this.MailsManagementPanelName.Controls.Add(this.MaillingFeatureRecipientLabel);
            this.MailsManagementPanelName.Controls.Add(this.MaillingFeatureSubject);
            this.MailsManagementPanelName.Controls.Add(this.ForceToMailTheseItems);
            this.MailsManagementPanelName.Controls.Add(this.ForceToMailTheseItemsLabel);
            this.MailsManagementPanelName.Controls.Add(this.MaillingFeatureSubjectLabel);
            this.MailsManagementPanelName.Controls.Add(this.ActivateAutoMaillingFeatureLabel);
            this.MailsManagementPanelName.Controls.Add(this.ActivateAutoMaillingFeature);
            this.MailsManagementPanelName.Controls.Add(this.DontMailTheseItems);
            this.MailsManagementPanelName.Controls.Add(this.DontMailTheseItemsLabel);
            this.MailsManagementPanelName.Fold = true;
            this.MailsManagementPanelName.FolderImage = (Image) manager.GetObject("MailsManagementPanelName.FolderImage");
            this.MailsManagementPanelName.ForeColor = Color.FromArgb(0x34, 0x34, 0x34);
            this.MailsManagementPanelName.HeaderBackColor = Color.FromArgb(250, 250, 250);
            this.MailsManagementPanelName.HeaderImage = (Image) manager.GetObject("MailsManagementPanelName.HeaderImage");
            this.MailsManagementPanelName.HeaderSize = new Size(0x22c, 0x24);
            this.MailsManagementPanelName.Location = new Point(0, 180);
            this.MailsManagementPanelName.Margin = new Padding(0);
            this.MailsManagementPanelName.MaximumSize = new Size(0x22c, 0);
            this.MailsManagementPanelName.MinimumSize = new Size(0x22c, 0x24);
            this.MailsManagementPanelName.Name = "MailsManagementPanelName";
            this.MailsManagementPanelName.OrderIndex = 6;
            this.MailsManagementPanelName.Padding = new Padding(0, 0, 0, 12);
            this.MailsManagementPanelName.Size = new Size(0x22c, 0x24);
            this.MailsManagementPanelName.TabIndex = 10;
            this.MailsManagementPanelName.TitleFont = new Font("Segoe UI", 7.65f, FontStyle.Bold);
            this.MailsManagementPanelName.TitleForeColor = Color.FromArgb(0xe8, 0xe8, 0xe8);
            this.MailsManagementPanelName.TitleText = "Mails Management (Allow you to send items to Alt. Char)";
            this.MailsManagementPanelName.UnfolderImage = (Image) manager.GetObject("MailsManagementPanelName.UnfolderImage");
            this.MailPurple.ForeColor = Color.Black;
            this.MailPurple.Location = new Point(0xc2, 190);
            this.MailPurple.Name = "MailPurple";
            this.MailPurple.Size = new Size(0xa6, 0x17);
            this.MailPurple.TabIndex = 0x21;
            this.MailPurple.Text = "Mail Purple items";
            this.MailBlue.ForeColor = Color.Black;
            this.MailBlue.Location = new Point(11, 0xc2);
            this.MailBlue.Name = "MailBlue";
            this.MailBlue.Size = new Size(0xaf, 0x17);
            this.MailBlue.TabIndex = 0x20;
            this.MailBlue.Text = "Mail Blue items";
            this.MailGreen.ForeColor = Color.Black;
            this.MailGreen.Location = new Point(380, 0xa2);
            this.MailGreen.Name = "MailGreen";
            this.MailGreen.Size = new Size(0xa6, 0x17);
            this.MailGreen.TabIndex = 0x1f;
            this.MailGreen.Text = "Mail Green items";
            this.MailWhite.ForeColor = Color.Black;
            this.MailWhite.Location = new Point(0xc2, 0xa3);
            this.MailWhite.Name = "MailWhite";
            this.MailWhite.Size = new Size(0xa6, 0x17);
            this.MailWhite.TabIndex = 30;
            this.MailWhite.Text = "Mail White items";
            this.MailGray.ForeColor = Color.Black;
            this.MailGray.Location = new Point(11, 0xa2);
            this.MailGray.Name = "MailGray";
            this.MailGray.Size = new Size(0xaf, 0x17);
            this.MailGray.TabIndex = 0x1d;
            this.MailGray.Text = "Mail Gray items";
            this.UseMollELabel.BackColor = Color.Transparent;
            this.UseMollELabel.ForeColor = Color.Black;
            this.UseMollELabel.Location = new Point(0x121, 50);
            this.UseMollELabel.Name = "UseMollELabel";
            this.UseMollELabel.Size = new Size(0x9a, 0x16);
            this.UseMollELabel.TabIndex = 0x2b;
            this.UseMollELabel.Text = "Use MOLL-E if up";
            this.UseMollE.Font = new Font("Microsoft Sans Serif", 8.25f, FontStyle.Bold);
            this.UseMollE.Location = new Point(0x1c0, 50);
            this.UseMollE.MaximumSize = new Size(60, 20);
            this.UseMollE.MinimumSize = new Size(60, 20);
            this.UseMollE.Name = "UseMollE";
            this.UseMollE.OffText = "OFF";
            this.UseMollE.OnText = "ON";
            this.UseMollE.Size = new Size(60, 20);
            this.UseMollE.TabIndex = 0x2c;
            this.UseMollE.Value = false;
            this.SendMailWhenLessThanXSlotLeft.ForeColor = Color.Black;
            this.SendMailWhenLessThanXSlotLeft.Location = new Point(0xd3, 0x4f);
            int[] numArray22 = new int[4];
            numArray22[0] = 200;
            this.SendMailWhenLessThanXSlotLeft.Maximum = new decimal(numArray22);
            int[] numArray23 = new int[4];
            numArray23[0] = 1;
            this.SendMailWhenLessThanXSlotLeft.Minimum = new decimal(numArray23);
            this.SendMailWhenLessThanXSlotLeft.Name = "SendMailWhenLessThanXSlotLeft";
            this.SendMailWhenLessThanXSlotLeft.Size = new Size(0x29, 0x16);
            this.SendMailWhenLessThanXSlotLeft.TabIndex = 0x29;
            int[] numArray24 = new int[4];
            numArray24[0] = 2;
            this.SendMailWhenLessThanXSlotLeft.Value = new decimal(numArray24);
            this.SendMailWhenLessThanXSlotLeftLabel.BackColor = Color.Transparent;
            this.SendMailWhenLessThanXSlotLeftLabel.ForeColor = Color.Black;
            this.SendMailWhenLessThanXSlotLeftLabel.Location = new Point(3, 0x4d);
            this.SendMailWhenLessThanXSlotLeftLabel.Name = "SendMailWhenLessThanXSlotLeftLabel";
            this.SendMailWhenLessThanXSlotLeftLabel.Size = new Size(0xc4, 0x17);
            this.SendMailWhenLessThanXSlotLeftLabel.TabIndex = 40;
            this.SendMailWhenLessThanXSlotLeftLabel.Text = "Send Mail when less than X slot left";
            this.MaillingFeatureRecipient.ForeColor = Color.Black;
            this.MaillingFeatureRecipient.Location = new Point(0xa2, 0x6d);
            this.MaillingFeatureRecipient.Name = "MaillingFeatureRecipient";
            this.MaillingFeatureRecipient.Size = new Size(0xaf, 0x16);
            this.MaillingFeatureRecipient.TabIndex = 0x26;
            this.MaillingFeatureRecipientLabel.BackColor = Color.Transparent;
            this.MaillingFeatureRecipientLabel.ForeColor = Color.Black;
            this.MaillingFeatureRecipientLabel.Location = new Point(3, 0x6a);
            this.MaillingFeatureRecipientLabel.Name = "MaillingFeatureRecipientLabel";
            this.MaillingFeatureRecipientLabel.Size = new Size(0x9a, 0x16);
            this.MaillingFeatureRecipientLabel.TabIndex = 0x25;
            this.MaillingFeatureRecipientLabel.Text = "Mail Recipient";
            this.MaillingFeatureSubject.ForeColor = Color.Black;
            this.MaillingFeatureSubject.Location = new Point(0xa2, 0x89);
            this.MaillingFeatureSubject.Name = "MaillingFeatureSubject";
            this.MaillingFeatureSubject.Size = new Size(0xaf, 0x16);
            this.MaillingFeatureSubject.TabIndex = 0x24;
            this.ForceToMailTheseItems.ForeColor = Color.Black;
            this.ForceToMailTheseItems.Location = new Point(0x110, 0xfb);
            this.ForceToMailTheseItems.Multiline = true;
            this.ForceToMailTheseItems.Name = "ForceToMailTheseItems";
            this.ForceToMailTheseItems.ScrollBars = ScrollBars.Vertical;
            this.ForceToMailTheseItems.Size = new Size(0xe3, 0x53);
            this.ForceToMailTheseItems.TabIndex = 0x23;
            this.ForceToMailTheseItemsLabel.BackColor = Color.Transparent;
            this.ForceToMailTheseItemsLabel.ForeColor = Color.Black;
            this.ForceToMailTheseItemsLabel.Location = new Point(0x110, 0xdf);
            this.ForceToMailTheseItemsLabel.Name = "ForceToMailTheseItemsLabel";
            this.ForceToMailTheseItemsLabel.Size = new Size(0xe3, 0x16);
            this.ForceToMailTheseItemsLabel.TabIndex = 0x22;
            this.ForceToMailTheseItemsLabel.Text = "Force Mail List (one item by line)";
            this.MaillingFeatureSubjectLabel.BackColor = Color.Transparent;
            this.MaillingFeatureSubjectLabel.ForeColor = Color.Black;
            this.MaillingFeatureSubjectLabel.Location = new Point(3, 0x86);
            this.MaillingFeatureSubjectLabel.Name = "MaillingFeatureSubjectLabel";
            this.MaillingFeatureSubjectLabel.Size = new Size(0x9a, 0x16);
            this.MaillingFeatureSubjectLabel.TabIndex = 0x1c;
            this.MaillingFeatureSubjectLabel.Text = "Subject";
            this.ActivateAutoMaillingFeatureLabel.BackColor = Color.Transparent;
            this.ActivateAutoMaillingFeatureLabel.ForeColor = Color.Black;
            this.ActivateAutoMaillingFeatureLabel.Location = new Point(3, 0x33);
            this.ActivateAutoMaillingFeatureLabel.Name = "ActivateAutoMaillingFeatureLabel";
            this.ActivateAutoMaillingFeatureLabel.Size = new Size(0x9a, 0x16);
            this.ActivateAutoMaillingFeatureLabel.TabIndex = 0x1a;
            this.ActivateAutoMaillingFeatureLabel.Text = "Use Mail";
            this.ActivateAutoMaillingFeature.Font = new Font("Microsoft Sans Serif", 8.25f, FontStyle.Bold);
            this.ActivateAutoMaillingFeature.Location = new Point(0xa2, 0x33);
            this.ActivateAutoMaillingFeature.MaximumSize = new Size(60, 20);
            this.ActivateAutoMaillingFeature.MinimumSize = new Size(60, 20);
            this.ActivateAutoMaillingFeature.Name = "ActivateAutoMaillingFeature";
            this.ActivateAutoMaillingFeature.OffText = "OFF";
            this.ActivateAutoMaillingFeature.OnText = "ON";
            this.ActivateAutoMaillingFeature.Size = new Size(60, 20);
            this.ActivateAutoMaillingFeature.TabIndex = 0x2d;
            this.ActivateAutoMaillingFeature.Value = false;
            this.DontMailTheseItems.ForeColor = Color.Black;
            this.DontMailTheseItems.Location = new Point(12, 0xfb);
            this.DontMailTheseItems.Multiline = true;
            this.DontMailTheseItems.Name = "DontMailTheseItems";
            this.DontMailTheseItems.ScrollBars = ScrollBars.Vertical;
            this.DontMailTheseItems.Size = new Size(0xe3, 0x53);
            this.DontMailTheseItems.TabIndex = 15;
            this.DontMailTheseItemsLabel.BackColor = Color.Transparent;
            this.DontMailTheseItemsLabel.ForeColor = Color.Black;
            this.DontMailTheseItemsLabel.Location = new Point(12, 0xdf);
            this.DontMailTheseItemsLabel.Name = "DontMailTheseItemsLabel";
            this.DontMailTheseItemsLabel.Size = new Size(0xe4, 0x16);
            this.DontMailTheseItemsLabel.TabIndex = 14;
            this.DontMailTheseItemsLabel.Text = "Do not Mail List (one item by line)";
            this.RegenerationManagementPanelName.BackColor = Color.FromArgb(0xe8, 0xe8, 0xe8);
            this.RegenerationManagementPanelName.BorderColor = Color.FromArgb(0x34, 0x34, 0x34);
            this.RegenerationManagementPanelName.BorderStyle = ButtonBorderStyle.Solid;
            this.RegenerationManagementPanelName.ContentSize = new Size(0x22c, 0x4e);
            this.RegenerationManagementPanelName.Controls.Add(this.DoRegenManaIfLow);
            this.RegenerationManagementPanelName.Controls.Add(this.labelX9);
            this.RegenerationManagementPanelName.Controls.Add(this.labelX10);
            this.RegenerationManagementPanelName.Controls.Add(this.DrinkBeverageWhenManaIsUnderXPercent);
            this.RegenerationManagementPanelName.Controls.Add(this.BeverageName);
            this.RegenerationManagementPanelName.Controls.Add(this.BeverageNameLabel);
            this.RegenerationManagementPanelName.Controls.Add(this.labelX14);
            this.RegenerationManagementPanelName.Controls.Add(this.labelX13);
            this.RegenerationManagementPanelName.Controls.Add(this.EatFoodWhenHealthIsUnderXPercent);
            this.RegenerationManagementPanelName.Controls.Add(this.FoodName);
            this.RegenerationManagementPanelName.Controls.Add(this.FoodNameLabel);
            this.RegenerationManagementPanelName.Fold = true;
            this.RegenerationManagementPanelName.FolderImage = (Image) manager.GetObject("RegenerationManagementPanelName.FolderImage");
            this.RegenerationManagementPanelName.ForeColor = Color.FromArgb(0x34, 0x34, 0x34);
            this.RegenerationManagementPanelName.HeaderBackColor = Color.FromArgb(250, 250, 250);
            this.RegenerationManagementPanelName.HeaderImage = (Image) manager.GetObject("RegenerationManagementPanelName.HeaderImage");
            this.RegenerationManagementPanelName.HeaderSize = new Size(0x22c, 0x24);
            this.RegenerationManagementPanelName.Location = new Point(0, 0xd8);
            this.RegenerationManagementPanelName.Margin = new Padding(0);
            this.RegenerationManagementPanelName.MaximumSize = new Size(0x22c, 0);
            this.RegenerationManagementPanelName.Name = "RegenerationManagementPanelName";
            this.RegenerationManagementPanelName.OrderIndex = 7;
            this.RegenerationManagementPanelName.Padding = new Padding(0, 0, 0, 12);
            this.RegenerationManagementPanelName.Size = new Size(0x22c, 0x24);
            this.RegenerationManagementPanelName.TabIndex = 4;
            this.RegenerationManagementPanelName.TitleFont = new Font("Segoe UI", 7.65f, FontStyle.Bold);
            this.RegenerationManagementPanelName.TitleForeColor = Color.FromArgb(0xe8, 0xe8, 0xe8);
            this.RegenerationManagementPanelName.TitleText = "Regeneration Management - Food / Drink && percentage to be used";
            this.RegenerationManagementPanelName.UnfolderImage = (Image) manager.GetObject("RegenerationManagementPanelName.UnfolderImage");
            this.DoRegenManaIfLow.Font = new Font("Microsoft Sans Serif", 8.25f, FontStyle.Bold);
            this.DoRegenManaIfLow.Location = new Point(0x1d2, 0x4b);
            this.DoRegenManaIfLow.MaximumSize = new Size(60, 20);
            this.DoRegenManaIfLow.MinimumSize = new Size(60, 20);
            this.DoRegenManaIfLow.Name = "DoRegenManaIfLow";
            this.DoRegenManaIfLow.OffText = "OFF";
            this.DoRegenManaIfLow.OnText = "ON";
            this.DoRegenManaIfLow.Size = new Size(60, 20);
            this.DoRegenManaIfLow.TabIndex = 2;
            this.DoRegenManaIfLow.Value = false;
            this.labelX9.BackColor = Color.Transparent;
            this.labelX9.ForeColor = Color.Black;
            this.labelX9.Location = new Point(0x18a, 0x4a);
            this.labelX9.Name = "labelX9";
            this.labelX9.Size = new Size(30, 0x16);
            this.labelX9.TabIndex = 0x19;
            this.labelX9.Text = "%";
            this.labelX10.BackColor = Color.Transparent;
            this.labelX10.ForeColor = Color.Black;
            this.labelX10.Location = new Point(0x138, 0x4a);
            this.labelX10.Name = "labelX10";
            this.labelX10.Size = new Size(0x11, 0x16);
            this.labelX10.TabIndex = 0x18;
            this.labelX10.Text = "on";
            this.DrinkBeverageWhenManaIsUnderXPercent.ForeColor = Color.Black;
            this.DrinkBeverageWhenManaIsUnderXPercent.Location = new Point(0x14f, 0x4d);
            int[] numArray25 = new int[4];
            numArray25[0] = 0x63;
            this.DrinkBeverageWhenManaIsUnderXPercent.Maximum = new decimal(numArray25);
            int[] numArray26 = new int[4];
            numArray26[0] = 1;
            this.DrinkBeverageWhenManaIsUnderXPercent.Minimum = new decimal(numArray26);
            this.DrinkBeverageWhenManaIsUnderXPercent.Name = "DrinkBeverageWhenManaIsUnderXPercent";
            this.DrinkBeverageWhenManaIsUnderXPercent.Size = new Size(0x35, 0x16);
            this.DrinkBeverageWhenManaIsUnderXPercent.TabIndex = 0x17;
            int[] numArray27 = new int[4];
            numArray27[0] = 0x23;
            this.DrinkBeverageWhenManaIsUnderXPercent.Value = new decimal(numArray27);
            this.BeverageName.ForeColor = Color.Black;
            this.BeverageName.Location = new Point(0xa2, 0x4d);
            this.BeverageName.Name = "BeverageName";
            this.BeverageName.Size = new Size(0x90, 0x16);
            this.BeverageName.TabIndex = 0x16;
            this.BeverageNameLabel.BackColor = Color.Transparent;
            this.BeverageNameLabel.ForeColor = Color.Black;
            this.BeverageNameLabel.Location = new Point(3, 0x4a);
            this.BeverageNameLabel.Name = "BeverageNameLabel";
            this.BeverageNameLabel.Size = new Size(0x9a, 0x16);
            this.BeverageNameLabel.TabIndex = 0x15;
            this.BeverageNameLabel.Text = "Drink";
            this.labelX14.BackColor = Color.Transparent;
            this.labelX14.ForeColor = Color.Black;
            this.labelX14.Location = new Point(0x18a, 0x2e);
            this.labelX14.Name = "labelX14";
            this.labelX14.Size = new Size(30, 0x16);
            this.labelX14.TabIndex = 20;
            this.labelX14.Text = "%";
            this.labelX13.BackColor = Color.Transparent;
            this.labelX13.ForeColor = Color.Black;
            this.labelX13.Location = new Point(0x138, 0x2e);
            this.labelX13.Name = "labelX13";
            this.labelX13.Size = new Size(0x11, 0x16);
            this.labelX13.TabIndex = 0x13;
            this.labelX13.Text = "on";
            this.EatFoodWhenHealthIsUnderXPercent.ForeColor = Color.Black;
            this.EatFoodWhenHealthIsUnderXPercent.Location = new Point(0x14f, 0x31);
            int[] numArray28 = new int[4];
            numArray28[0] = 0x63;
            this.EatFoodWhenHealthIsUnderXPercent.Maximum = new decimal(numArray28);
            int[] numArray29 = new int[4];
            numArray29[0] = 1;
            this.EatFoodWhenHealthIsUnderXPercent.Minimum = new decimal(numArray29);
            this.EatFoodWhenHealthIsUnderXPercent.Name = "EatFoodWhenHealthIsUnderXPercent";
            this.EatFoodWhenHealthIsUnderXPercent.Size = new Size(0x35, 0x16);
            this.EatFoodWhenHealthIsUnderXPercent.TabIndex = 0x12;
            int[] numArray30 = new int[4];
            numArray30[0] = 0x23;
            this.EatFoodWhenHealthIsUnderXPercent.Value = new decimal(numArray30);
            this.FoodName.ForeColor = Color.Black;
            this.FoodName.Location = new Point(0xa2, 0x31);
            this.FoodName.Name = "FoodName";
            this.FoodName.Size = new Size(0x90, 0x16);
            this.FoodName.TabIndex = 13;
            this.FoodNameLabel.BackColor = Color.Transparent;
            this.FoodNameLabel.ForeColor = Color.Black;
            this.FoodNameLabel.Location = new Point(3, 0x2e);
            this.FoodNameLabel.Name = "FoodNameLabel";
            this.FoodNameLabel.Size = new Size(0x9a, 0x16);
            this.FoodNameLabel.TabIndex = 12;
            this.FoodNameLabel.Text = "Food";
            this.SecuritySystemPanelName.BackColor = Color.FromArgb(0xe8, 0xe8, 0xe8);
            this.SecuritySystemPanelName.BorderColor = Color.FromArgb(0x34, 0x34, 0x34);
            this.SecuritySystemPanelName.BorderStyle = ButtonBorderStyle.Solid;
            this.SecuritySystemPanelName.ContentSize = new Size(0x22c, 0x162);
            this.SecuritySystemPanelName.Controls.Add(this.UseHearthstoneLabel);
            this.SecuritySystemPanelName.Controls.Add(this.ActiveStopTNBAfterXMinutes);
            this.SecuritySystemPanelName.Controls.Add(this.ActiveStopTNBAfterXStucks);
            this.SecuritySystemPanelName.Controls.Add(this.ActiveStopTNBIfReceivedAtMostXWhispers);
            this.SecuritySystemPanelName.Controls.Add(this.ActiveStopTNBAfterXLevelup);
            this.SecuritySystemPanelName.Controls.Add(this.UseHearthstone);
            this.SecuritySystemPanelName.Controls.Add(this.SecuritySystemLabel);
            this.SecuritySystemPanelName.Controls.Add(this.PlayASongIfNewWhispReceived);
            this.SecuritySystemPanelName.Controls.Add(this.CloseGameLabel);
            this.SecuritySystemPanelName.Controls.Add(this.labelX33);
            this.SecuritySystemPanelName.Controls.Add(this.RecordWhispsInLogFilesLabel);
            this.SecuritySystemPanelName.Controls.Add(this.labelX32);
            this.SecuritySystemPanelName.Controls.Add(this.labelX31);
            this.SecuritySystemPanelName.Controls.Add(this.RecordWhispsInLogFiles);
            this.SecuritySystemPanelName.Controls.Add(this.StopTNBIfPlayerHaveBeenTeleportedLabel);
            this.SecuritySystemPanelName.Controls.Add(this.StopTNBIfPlayerHaveBeenTeleported);
            this.SecuritySystemPanelName.Controls.Add(this.PauseTNBIfNearByPlayerLabel);
            this.SecuritySystemPanelName.Controls.Add(this.StopTNBIfHonorPointsLimitReachedLabel);
            this.SecuritySystemPanelName.Controls.Add(this.PauseTNBIfNearByPlayer);
            this.SecuritySystemPanelName.Controls.Add(this.StopTNBIfHonorPointsLimitReached);
            this.SecuritySystemPanelName.Controls.Add(this.StopTNBAfterXMinutes);
            this.SecuritySystemPanelName.Controls.Add(this.StopTNBAfterXMinutesLabel);
            this.SecuritySystemPanelName.Controls.Add(this.StopTNBAfterXStucks);
            this.SecuritySystemPanelName.Controls.Add(this.StopTNBAfterXStucksLabel);
            this.SecuritySystemPanelName.Controls.Add(this.StopTNBIfReceivedAtMostXWhispers);
            this.SecuritySystemPanelName.Controls.Add(this.StopTNBIfReceivedAtMostXWhispersLabel);
            this.SecuritySystemPanelName.Controls.Add(this.StopTNBAfterXLevelup);
            this.SecuritySystemPanelName.Controls.Add(this.StopTNBAfterXLevelupLabel);
            this.SecuritySystemPanelName.Controls.Add(this.StopTNBIfBagAreFullLabel);
            this.SecuritySystemPanelName.Controls.Add(this.StopTNBIfBagAreFull);
            this.SecuritySystemPanelName.Fold = true;
            this.SecuritySystemPanelName.FolderImage = (Image) manager.GetObject("SecuritySystemPanelName.FolderImage");
            this.SecuritySystemPanelName.ForeColor = Color.FromArgb(0x34, 0x34, 0x34);
            this.SecuritySystemPanelName.HeaderBackColor = Color.FromArgb(250, 250, 250);
            this.SecuritySystemPanelName.HeaderImage = (Image) manager.GetObject("SecuritySystemPanelName.HeaderImage");
            this.SecuritySystemPanelName.HeaderSize = new Size(0x22c, 0x24);
            this.SecuritySystemPanelName.Location = new Point(0, 0xfc);
            this.SecuritySystemPanelName.Margin = new Padding(0);
            this.SecuritySystemPanelName.MaximumSize = new Size(0x22c, 0);
            this.SecuritySystemPanelName.Name = "SecuritySystemPanelName";
            this.SecuritySystemPanelName.OrderIndex = 8;
            this.SecuritySystemPanelName.Padding = new Padding(0, 0, 0, 12);
            this.SecuritySystemPanelName.Size = new Size(0x22c, 0x24);
            this.SecuritySystemPanelName.TabIndex = 11;
            this.SecuritySystemPanelName.TitleFont = new Font("Segoe UI", 7.65f, FontStyle.Bold);
            this.SecuritySystemPanelName.TitleForeColor = Color.FromArgb(0xe8, 0xe8, 0xe8);
            this.SecuritySystemPanelName.TitleText = "Security System Management (Allow to Pause, Stop Tnb, Close WoW)";
            this.SecuritySystemPanelName.UnfolderImage = (Image) manager.GetObject("SecuritySystemPanelName.UnfolderImage");
            this.UseHearthstoneLabel.BackColor = Color.Transparent;
            this.UseHearthstoneLabel.Font = new Font("Segoe UI Semibold", 8.25f, FontStyle.Bold, GraphicsUnit.Point, 0);
            this.UseHearthstoneLabel.ForeColor = Color.Black;
            this.UseHearthstoneLabel.Location = new Point(0xfc, 0x34);
            this.UseHearthstoneLabel.Name = "UseHearthstoneLabel";
            this.UseHearthstoneLabel.Size = new Size(0x9a, 0x16);
            this.UseHearthstoneLabel.TabIndex = 0x30;
            this.UseHearthstoneLabel.Text = "Use Hearthstone";
            this.ActiveStopTNBAfterXMinutes.Font = new Font("Microsoft Sans Serif", 8.25f, FontStyle.Bold);
            this.ActiveStopTNBAfterXMinutes.Location = new Point(0x198, 0xf8);
            this.ActiveStopTNBAfterXMinutes.MaximumSize = new Size(60, 20);
            this.ActiveStopTNBAfterXMinutes.MinimumSize = new Size(60, 20);
            this.ActiveStopTNBAfterXMinutes.Name = "ActiveStopTNBAfterXMinutes";
            this.ActiveStopTNBAfterXMinutes.OffText = "OFF";
            this.ActiveStopTNBAfterXMinutes.OnText = "ON";
            this.ActiveStopTNBAfterXMinutes.Size = new Size(60, 20);
            this.ActiveStopTNBAfterXMinutes.TabIndex = 0x31;
            this.ActiveStopTNBAfterXMinutes.Value = false;
            this.ActiveStopTNBAfterXStucks.Font = new Font("Microsoft Sans Serif", 8.25f, FontStyle.Bold);
            this.ActiveStopTNBAfterXStucks.Location = new Point(0x198, 0xdb);
            this.ActiveStopTNBAfterXStucks.MaximumSize = new Size(60, 20);
            this.ActiveStopTNBAfterXStucks.MinimumSize = new Size(60, 20);
            this.ActiveStopTNBAfterXStucks.Name = "ActiveStopTNBAfterXStucks";
            this.ActiveStopTNBAfterXStucks.OffText = "OFF";
            this.ActiveStopTNBAfterXStucks.OnText = "ON";
            this.ActiveStopTNBAfterXStucks.Size = new Size(60, 20);
            this.ActiveStopTNBAfterXStucks.TabIndex = 50;
            this.ActiveStopTNBAfterXStucks.Value = false;
            this.ActiveStopTNBIfReceivedAtMostXWhispers.Font = new Font("Microsoft Sans Serif", 8.25f, FontStyle.Bold);
            this.ActiveStopTNBIfReceivedAtMostXWhispers.Location = new Point(0x198, 0xc0);
            this.ActiveStopTNBIfReceivedAtMostXWhispers.MaximumSize = new Size(60, 20);
            this.ActiveStopTNBIfReceivedAtMostXWhispers.MinimumSize = new Size(60, 20);
            this.ActiveStopTNBIfReceivedAtMostXWhispers.Name = "ActiveStopTNBIfReceivedAtMostXWhispers";
            this.ActiveStopTNBIfReceivedAtMostXWhispers.OffText = "OFF";
            this.ActiveStopTNBIfReceivedAtMostXWhispers.OnText = "ON";
            this.ActiveStopTNBIfReceivedAtMostXWhispers.Size = new Size(60, 20);
            this.ActiveStopTNBIfReceivedAtMostXWhispers.TabIndex = 0x33;
            this.ActiveStopTNBIfReceivedAtMostXWhispers.Value = false;
            this.ActiveStopTNBAfterXLevelup.Font = new Font("Microsoft Sans Serif", 8.25f, FontStyle.Bold);
            this.ActiveStopTNBAfterXLevelup.Location = new Point(0x198, 0xa3);
            this.ActiveStopTNBAfterXLevelup.MaximumSize = new Size(60, 20);
            this.ActiveStopTNBAfterXLevelup.MinimumSize = new Size(60, 20);
            this.ActiveStopTNBAfterXLevelup.Name = "ActiveStopTNBAfterXLevelup";
            this.ActiveStopTNBAfterXLevelup.OffText = "OFF";
            this.ActiveStopTNBAfterXLevelup.OnText = "ON";
            this.ActiveStopTNBAfterXLevelup.Size = new Size(60, 20);
            this.ActiveStopTNBAfterXLevelup.TabIndex = 0x34;
            this.ActiveStopTNBAfterXLevelup.Value = false;
            this.UseHearthstone.Font = new Font("Microsoft Sans Serif", 8.25f, FontStyle.Bold);
            this.UseHearthstone.Location = new Point(0x19b, 0x35);
            this.UseHearthstone.MaximumSize = new Size(60, 20);
            this.UseHearthstone.MinimumSize = new Size(60, 20);
            this.UseHearthstone.Name = "UseHearthstone";
            this.UseHearthstone.OffText = "OFF";
            this.UseHearthstone.OnText = "ON";
            this.UseHearthstone.Size = new Size(60, 20);
            this.UseHearthstone.TabIndex = 0x35;
            this.UseHearthstone.Value = false;
            this.SecuritySystemLabel.BackColor = Color.Transparent;
            this.SecuritySystemLabel.Font = new Font("Segoe UI Semibold", 8.25f, FontStyle.Bold, GraphicsUnit.Point, 0);
            this.SecuritySystemLabel.ForeColor = Color.Black;
            this.SecuritySystemLabel.Location = new Point(3, 0x112);
            this.SecuritySystemLabel.Name = "SecuritySystemLabel";
            this.SecuritySystemLabel.Size = new Size(0x9a, 0x16);
            this.SecuritySystemLabel.TabIndex = 0x23;
            this.SecuritySystemLabel.Text = "Security:";
            this.PlayASongIfNewWhispReceived.Font = new Font("Microsoft Sans Serif", 8.25f, FontStyle.Bold);
            this.PlayASongIfNewWhispReceived.Location = new Point(0, 0);
            this.PlayASongIfNewWhispReceived.MaximumSize = new Size(60, 20);
            this.PlayASongIfNewWhispReceived.MinimumSize = new Size(60, 20);
            this.PlayASongIfNewWhispReceived.Name = "PlayASongIfNewWhispReceived";
            this.PlayASongIfNewWhispReceived.OffText = "OFF";
            this.PlayASongIfNewWhispReceived.OnText = "ON";
            this.PlayASongIfNewWhispReceived.Size = new Size(60, 20);
            this.PlayASongIfNewWhispReceived.TabIndex = 0x36;
            this.PlayASongIfNewWhispReceived.Value = false;
            this.CloseGameLabel.BackColor = Color.Transparent;
            this.CloseGameLabel.Font = new Font("Segoe UI Semibold", 8.25f, FontStyle.Bold, GraphicsUnit.Point, 0);
            this.CloseGameLabel.ForeColor = Color.Black;
            this.CloseGameLabel.Location = new Point(3, 0x34);
            this.CloseGameLabel.Name = "CloseGameLabel";
            this.CloseGameLabel.Size = new Size(0x9a, 0x16);
            this.CloseGameLabel.TabIndex = 0x22;
            this.CloseGameLabel.Text = "Close game:";
            this.labelX33.BackColor = Color.Transparent;
            this.labelX33.ForeColor = Color.Black;
            this.labelX33.Location = new Point(0x13e, 0xf6);
            this.labelX33.Name = "labelX33";
            this.labelX33.Size = new Size(0x9a, 0x16);
            this.labelX33.TabIndex = 0x21;
            this.labelX33.Text = "Min";
            this.RecordWhispsInLogFilesLabel.BackColor = Color.Transparent;
            this.RecordWhispsInLogFilesLabel.ForeColor = Color.Black;
            this.RecordWhispsInLogFilesLabel.Location = new Point(3, 330);
            this.RecordWhispsInLogFilesLabel.Name = "RecordWhispsInLogFilesLabel";
            this.RecordWhispsInLogFilesLabel.Size = new Size(0x9a, 0x16);
            this.RecordWhispsInLogFilesLabel.TabIndex = 0x27;
            this.RecordWhispsInLogFilesLabel.Text = "Record whisper in Log file";
            this.labelX32.BackColor = Color.Transparent;
            this.labelX32.ForeColor = Color.Black;
            this.labelX32.Location = new Point(0x13e, 0xdb);
            this.labelX32.Name = "labelX32";
            this.labelX32.Size = new Size(0x9a, 0x16);
            this.labelX32.TabIndex = 0x20;
            this.labelX32.Text = "Blockages";
            this.labelX31.BackColor = Color.Transparent;
            this.labelX31.ForeColor = Color.Black;
            this.labelX31.Location = new Point(0x13e, 0xa3);
            this.labelX31.Name = "labelX31";
            this.labelX31.Size = new Size(0x9a, 0x16);
            this.labelX31.TabIndex = 0x1f;
            this.labelX31.Text = "Level";
            this.RecordWhispsInLogFiles.Font = new Font("Microsoft Sans Serif", 8.25f, FontStyle.Bold);
            this.RecordWhispsInLogFiles.Location = new Point(0xa2, 330);
            this.RecordWhispsInLogFiles.MaximumSize = new Size(60, 20);
            this.RecordWhispsInLogFiles.MinimumSize = new Size(60, 20);
            this.RecordWhispsInLogFiles.Name = "RecordWhispsInLogFiles";
            this.RecordWhispsInLogFiles.OffText = "OFF";
            this.RecordWhispsInLogFiles.OnText = "ON";
            this.RecordWhispsInLogFiles.Size = new Size(60, 20);
            this.RecordWhispsInLogFiles.TabIndex = 0x37;
            this.RecordWhispsInLogFiles.Value = false;
            this.StopTNBIfPlayerHaveBeenTeleportedLabel.BackColor = Color.Transparent;
            this.StopTNBIfPlayerHaveBeenTeleportedLabel.ForeColor = Color.Black;
            this.StopTNBIfPlayerHaveBeenTeleportedLabel.Location = new Point(3, 0x87);
            this.StopTNBIfPlayerHaveBeenTeleportedLabel.Name = "StopTNBIfPlayerHaveBeenTeleportedLabel";
            this.StopTNBIfPlayerHaveBeenTeleportedLabel.Size = new Size(0x9a, 0x16);
            this.StopTNBIfPlayerHaveBeenTeleportedLabel.TabIndex = 30;
            this.StopTNBIfPlayerHaveBeenTeleportedLabel.Text = "If Player Teleported";
            this.StopTNBIfPlayerHaveBeenTeleported.Font = new Font("Microsoft Sans Serif", 8.25f, FontStyle.Bold);
            this.StopTNBIfPlayerHaveBeenTeleported.Location = new Point(0xa2, 0x87);
            this.StopTNBIfPlayerHaveBeenTeleported.MaximumSize = new Size(60, 20);
            this.StopTNBIfPlayerHaveBeenTeleported.MinimumSize = new Size(60, 20);
            this.StopTNBIfPlayerHaveBeenTeleported.Name = "StopTNBIfPlayerHaveBeenTeleported";
            this.StopTNBIfPlayerHaveBeenTeleported.OffText = "OFF";
            this.StopTNBIfPlayerHaveBeenTeleported.OnText = "ON";
            this.StopTNBIfPlayerHaveBeenTeleported.Size = new Size(60, 20);
            this.StopTNBIfPlayerHaveBeenTeleported.TabIndex = 0x38;
            this.StopTNBIfPlayerHaveBeenTeleported.Value = false;
            this.PauseTNBIfNearByPlayerLabel.BackColor = Color.Transparent;
            this.PauseTNBIfNearByPlayerLabel.ForeColor = Color.Black;
            this.PauseTNBIfNearByPlayerLabel.Location = new Point(3, 0x12e);
            this.PauseTNBIfNearByPlayerLabel.Name = "PauseTNBIfNearByPlayerLabel";
            this.PauseTNBIfNearByPlayerLabel.Size = new Size(0x9a, 0x16);
            this.PauseTNBIfNearByPlayerLabel.TabIndex = 0x25;
            this.PauseTNBIfNearByPlayerLabel.Text = "Pause Bot if Nearby Player";
            this.StopTNBIfHonorPointsLimitReachedLabel.BackColor = Color.Transparent;
            this.StopTNBIfHonorPointsLimitReachedLabel.ForeColor = Color.Black;
            this.StopTNBIfHonorPointsLimitReachedLabel.Location = new Point(3, 0x6b);
            this.StopTNBIfHonorPointsLimitReachedLabel.Name = "StopTNBIfHonorPointsLimitReachedLabel";
            this.StopTNBIfHonorPointsLimitReachedLabel.Size = new Size(0x9a, 0x16);
            this.StopTNBIfHonorPointsLimitReachedLabel.TabIndex = 0x1c;
            this.StopTNBIfHonorPointsLimitReachedLabel.Text = "If reached 4000 Honor Points";
            this.PauseTNBIfNearByPlayer.Font = new Font("Microsoft Sans Serif", 8.25f, FontStyle.Bold);
            this.PauseTNBIfNearByPlayer.Location = new Point(0xa2, 0x12e);
            this.PauseTNBIfNearByPlayer.MaximumSize = new Size(60, 20);
            this.PauseTNBIfNearByPlayer.MinimumSize = new Size(60, 20);
            this.PauseTNBIfNearByPlayer.Name = "PauseTNBIfNearByPlayer";
            this.PauseTNBIfNearByPlayer.OffText = "OFF";
            this.PauseTNBIfNearByPlayer.OnText = "ON";
            this.PauseTNBIfNearByPlayer.Size = new Size(60, 20);
            this.PauseTNBIfNearByPlayer.TabIndex = 0x39;
            this.PauseTNBIfNearByPlayer.Value = false;
            this.StopTNBIfHonorPointsLimitReached.Font = new Font("Microsoft Sans Serif", 8.25f, FontStyle.Bold);
            this.StopTNBIfHonorPointsLimitReached.Location = new Point(0xa2, 0x6b);
            this.StopTNBIfHonorPointsLimitReached.MaximumSize = new Size(60, 20);
            this.StopTNBIfHonorPointsLimitReached.MinimumSize = new Size(60, 20);
            this.StopTNBIfHonorPointsLimitReached.Name = "StopTNBIfHonorPointsLimitReached";
            this.StopTNBIfHonorPointsLimitReached.OffText = "OFF";
            this.StopTNBIfHonorPointsLimitReached.OnText = "ON";
            this.StopTNBIfHonorPointsLimitReached.Size = new Size(60, 20);
            this.StopTNBIfHonorPointsLimitReached.TabIndex = 0x3a;
            this.StopTNBIfHonorPointsLimitReached.Value = false;
            this.StopTNBAfterXMinutes.ForeColor = Color.Black;
            this.StopTNBAfterXMinutes.Location = new Point(0xa2, 0xf7);
            int[] numArray31 = new int[4];
            numArray31[0] = 0xbb8;
            this.StopTNBAfterXMinutes.Maximum = new decimal(numArray31);
            int[] numArray32 = new int[4];
            numArray32[0] = 1;
            this.StopTNBAfterXMinutes.Minimum = new decimal(numArray32);
            this.StopTNBAfterXMinutes.Name = "StopTNBAfterXMinutes";
            this.StopTNBAfterXMinutes.Size = new Size(0x4d, 0x16);
            this.StopTNBAfterXMinutes.TabIndex = 0x18;
            int[] numArray33 = new int[4];
            numArray33[0] = 0x5a0;
            this.StopTNBAfterXMinutes.Value = new decimal(numArray33);
            this.StopTNBAfterXMinutesLabel.BackColor = Color.Transparent;
            this.StopTNBAfterXMinutesLabel.ForeColor = Color.Black;
            this.StopTNBAfterXMinutesLabel.Location = new Point(3, 0xf7);
            this.StopTNBAfterXMinutesLabel.Name = "StopTNBAfterXMinutesLabel";
            this.StopTNBAfterXMinutesLabel.Size = new Size(0x9a, 0x16);
            this.StopTNBAfterXMinutesLabel.TabIndex = 0x17;
            this.StopTNBAfterXMinutesLabel.Text = "After";
            this.StopTNBAfterXStucks.ForeColor = Color.Black;
            this.StopTNBAfterXStucks.Location = new Point(0xa2, 0xdb);
            int[] numArray34 = new int[4];
            numArray34[0] = 200;
            this.StopTNBAfterXStucks.Maximum = new decimal(numArray34);
            int[] numArray35 = new int[4];
            numArray35[0] = 1;
            this.StopTNBAfterXStucks.Minimum = new decimal(numArray35);
            this.StopTNBAfterXStucks.Name = "StopTNBAfterXStucks";
            this.StopTNBAfterXStucks.Size = new Size(0x4d, 0x16);
            this.StopTNBAfterXStucks.TabIndex = 0x16;
            int[] numArray36 = new int[4];
            numArray36[0] = 80;
            this.StopTNBAfterXStucks.Value = new decimal(numArray36);
            this.StopTNBAfterXStucksLabel.BackColor = Color.Transparent;
            this.StopTNBAfterXStucksLabel.ForeColor = Color.Black;
            this.StopTNBAfterXStucksLabel.Location = new Point(3, 0xdb);
            this.StopTNBAfterXStucksLabel.Name = "StopTNBAfterXStucksLabel";
            this.StopTNBAfterXStucksLabel.Size = new Size(0x9a, 0x16);
            this.StopTNBAfterXStucksLabel.TabIndex = 0x15;
            this.StopTNBAfterXStucksLabel.Text = "After";
            this.StopTNBIfReceivedAtMostXWhispers.ForeColor = Color.Black;
            this.StopTNBIfReceivedAtMostXWhispers.Location = new Point(0xa2, 0xbf);
            int[] numArray37 = new int[4];
            numArray37[0] = 1;
            this.StopTNBIfReceivedAtMostXWhispers.Minimum = new decimal(numArray37);
            this.StopTNBIfReceivedAtMostXWhispers.Name = "StopTNBIfReceivedAtMostXWhispers";
            this.StopTNBIfReceivedAtMostXWhispers.Size = new Size(0x4d, 0x16);
            this.StopTNBIfReceivedAtMostXWhispers.TabIndex = 20;
            int[] numArray38 = new int[4];
            numArray38[0] = 10;
            this.StopTNBIfReceivedAtMostXWhispers.Value = new decimal(numArray38);
            this.StopTNBIfReceivedAtMostXWhispersLabel.BackColor = Color.Transparent;
            this.StopTNBIfReceivedAtMostXWhispersLabel.ForeColor = Color.Black;
            this.StopTNBIfReceivedAtMostXWhispersLabel.Location = new Point(3, 0xbf);
            this.StopTNBIfReceivedAtMostXWhispersLabel.Name = "StopTNBIfReceivedAtMostXWhispersLabel";
            this.StopTNBIfReceivedAtMostXWhispersLabel.Size = new Size(0x9a, 0x16);
            this.StopTNBIfReceivedAtMostXWhispersLabel.TabIndex = 0x13;
            this.StopTNBIfReceivedAtMostXWhispersLabel.Text = "If Whisper bigger or equal to";
            this.StopTNBAfterXLevelup.ForeColor = Color.Black;
            this.StopTNBAfterXLevelup.Location = new Point(0xa2, 0xa3);
            int[] numArray39 = new int[4];
            numArray39[0] = 110;
            this.StopTNBAfterXLevelup.Maximum = new decimal(numArray39);
            int[] numArray40 = new int[4];
            numArray40[0] = 1;
            this.StopTNBAfterXLevelup.Minimum = new decimal(numArray40);
            this.StopTNBAfterXLevelup.Name = "StopTNBAfterXLevelup";
            this.StopTNBAfterXLevelup.Size = new Size(0x4d, 0x16);
            this.StopTNBAfterXLevelup.TabIndex = 0x12;
            int[] numArray41 = new int[4];
            numArray41[0] = 90;
            this.StopTNBAfterXLevelup.Value = new decimal(numArray41);
            this.StopTNBAfterXLevelupLabel.BackColor = Color.Transparent;
            this.StopTNBAfterXLevelupLabel.ForeColor = Color.Black;
            this.StopTNBAfterXLevelupLabel.Location = new Point(3, 0xa3);
            this.StopTNBAfterXLevelupLabel.Name = "StopTNBAfterXLevelupLabel";
            this.StopTNBAfterXLevelupLabel.Size = new Size(0x9a, 0x16);
            this.StopTNBAfterXLevelupLabel.TabIndex = 0x10;
            this.StopTNBAfterXLevelupLabel.Text = "After";
            this.StopTNBIfBagAreFullLabel.BackColor = Color.Transparent;
            this.StopTNBIfBagAreFullLabel.ForeColor = Color.Black;
            this.StopTNBIfBagAreFullLabel.Location = new Point(3, 80);
            this.StopTNBIfBagAreFullLabel.Name = "StopTNBIfBagAreFullLabel";
            this.StopTNBIfBagAreFullLabel.Size = new Size(0x9a, 0x16);
            this.StopTNBIfBagAreFullLabel.TabIndex = 11;
            this.StopTNBIfBagAreFullLabel.Text = "If full Bag";
            this.StopTNBIfBagAreFull.Font = new Font("Microsoft Sans Serif", 8.25f, FontStyle.Bold);
            this.StopTNBIfBagAreFull.Location = new Point(0xa2, 80);
            this.StopTNBIfBagAreFull.MaximumSize = new Size(60, 20);
            this.StopTNBIfBagAreFull.MinimumSize = new Size(60, 20);
            this.StopTNBIfBagAreFull.Name = "StopTNBIfBagAreFull";
            this.StopTNBIfBagAreFull.OffText = "OFF";
            this.StopTNBIfBagAreFull.OnText = "ON";
            this.StopTNBIfBagAreFull.Size = new Size(60, 20);
            this.StopTNBIfBagAreFull.TabIndex = 0x3b;
            this.StopTNBIfBagAreFull.Value = false;
            this.ReloggerManagementPanelName.BackColor = Color.FromArgb(0xe8, 0xe8, 0xe8);
            this.ReloggerManagementPanelName.BorderColor = Color.FromArgb(0x34, 0x34, 0x34);
            this.ReloggerManagementPanelName.BorderStyle = ButtonBorderStyle.Solid;
            this.ReloggerManagementPanelName.ContentSize = new Size(0x22c, 0x90);
            this.ReloggerManagementPanelName.Controls.Add(this.BattleNetSubAccount);
            this.ReloggerManagementPanelName.Controls.Add(this.BattleNetSubAccountLabel);
            this.ReloggerManagementPanelName.Controls.Add(this.ActivateReloggerFeatureLabel);
            this.ReloggerManagementPanelName.Controls.Add(this.ActivateReloggerFeature);
            this.ReloggerManagementPanelName.Controls.Add(this.PasswordOfTheBattleNetAccount);
            this.ReloggerManagementPanelName.Controls.Add(this.PasswordOfTheBattleNetAccountLabel);
            this.ReloggerManagementPanelName.Controls.Add(this.EmailOfTheBattleNetAccount);
            this.ReloggerManagementPanelName.Controls.Add(this.EmailOfTheBattleNetAccountLabel);
            this.ReloggerManagementPanelName.Fold = true;
            this.ReloggerManagementPanelName.FolderImage = (Image) manager.GetObject("ReloggerManagementPanelName.FolderImage");
            this.ReloggerManagementPanelName.ForeColor = Color.FromArgb(0x34, 0x34, 0x34);
            this.ReloggerManagementPanelName.HeaderBackColor = Color.FromArgb(250, 250, 250);
            this.ReloggerManagementPanelName.HeaderImage = (Image) manager.GetObject("ReloggerManagementPanelName.HeaderImage");
            this.ReloggerManagementPanelName.HeaderSize = new Size(0x22c, 0x24);
            this.ReloggerManagementPanelName.Location = new Point(0, 0x120);
            this.ReloggerManagementPanelName.Margin = new Padding(0);
            this.ReloggerManagementPanelName.MaximumSize = new Size(0x22c, 0);
            this.ReloggerManagementPanelName.Name = "ReloggerManagementPanelName";
            this.ReloggerManagementPanelName.OrderIndex = 9;
            this.ReloggerManagementPanelName.Padding = new Padding(0, 0, 0, 12);
            this.ReloggerManagementPanelName.Size = new Size(0x22c, 0x24);
            this.ReloggerManagementPanelName.TabIndex = 7;
            this.ReloggerManagementPanelName.TitleFont = new Font("Segoe UI", 7.65f, FontStyle.Bold);
            this.ReloggerManagementPanelName.TitleForeColor = Color.FromArgb(0xe8, 0xe8, 0xe8);
            this.ReloggerManagementPanelName.TitleText = "AutoRelogger - (Allow you to automaticly relog your char after a disconnection)";
            this.ReloggerManagementPanelName.UnfolderImage = (Image) manager.GetObject("ReloggerManagementPanelName.UnfolderImage");
            this.BattleNetSubAccount.ForeColor = Color.Black;
            this.BattleNetSubAccount.Location = new Point(0xa2, 0x8f);
            this.BattleNetSubAccount.Name = "BattleNetSubAccount";
            this.BattleNetSubAccount.Size = new Size(0xaf, 0x16);
            this.BattleNetSubAccount.TabIndex = 0x18;
            this.BattleNetSubAccountLabel.BackColor = Color.Transparent;
            this.BattleNetSubAccountLabel.ForeColor = Color.Black;
            this.BattleNetSubAccountLabel.Location = new Point(3, 140);
            this.BattleNetSubAccountLabel.Name = "BattleNetSubAccountLabel";
            this.BattleNetSubAccountLabel.Size = new Size(0x9a, 0x16);
            this.BattleNetSubAccountLabel.TabIndex = 0x17;
            this.BattleNetSubAccountLabel.Text = "BattleNet Account";
            this.ActivateReloggerFeatureLabel.BackColor = Color.Transparent;
            this.ActivateReloggerFeatureLabel.ForeColor = Color.Black;
            this.ActivateReloggerFeatureLabel.Location = new Point(3, 0x34);
            this.ActivateReloggerFeatureLabel.Name = "ActivateReloggerFeatureLabel";
            this.ActivateReloggerFeatureLabel.Size = new Size(0x9a, 0x16);
            this.ActivateReloggerFeatureLabel.TabIndex = 13;
            this.ActivateReloggerFeatureLabel.Text = "Relogger";
            this.ActivateReloggerFeature.Font = new Font("Microsoft Sans Serif", 8.25f, FontStyle.Bold);
            this.ActivateReloggerFeature.Location = new Point(0xa2, 0x34);
            this.ActivateReloggerFeature.MaximumSize = new Size(60, 20);
            this.ActivateReloggerFeature.MinimumSize = new Size(60, 20);
            this.ActivateReloggerFeature.Name = "ActivateReloggerFeature";
            this.ActivateReloggerFeature.OffText = "OFF";
            this.ActivateReloggerFeature.OnText = "ON";
            this.ActivateReloggerFeature.Size = new Size(60, 20);
            this.ActivateReloggerFeature.TabIndex = 0x19;
            this.ActivateReloggerFeature.Value = false;
            this.PasswordOfTheBattleNetAccount.ForeColor = Color.Black;
            this.PasswordOfTheBattleNetAccount.Location = new Point(0xa2, 110);
            this.PasswordOfTheBattleNetAccount.Name = "PasswordOfTheBattleNetAccount";
            this.PasswordOfTheBattleNetAccount.Size = new Size(0xaf, 0x16);
            this.PasswordOfTheBattleNetAccount.TabIndex = 0x16;
            this.PasswordOfTheBattleNetAccountLabel.BackColor = Color.Transparent;
            this.PasswordOfTheBattleNetAccountLabel.ForeColor = Color.Black;
            this.PasswordOfTheBattleNetAccountLabel.Location = new Point(3, 0x6c);
            this.PasswordOfTheBattleNetAccountLabel.Name = "PasswordOfTheBattleNetAccountLabel";
            this.PasswordOfTheBattleNetAccountLabel.Size = new Size(0x9a, 0x16);
            this.PasswordOfTheBattleNetAccountLabel.TabIndex = 0x15;
            this.PasswordOfTheBattleNetAccountLabel.Text = "Account Password";
            this.EmailOfTheBattleNetAccount.ForeColor = Color.Black;
            this.EmailOfTheBattleNetAccount.Location = new Point(0xa2, 0x53);
            this.EmailOfTheBattleNetAccount.Name = "EmailOfTheBattleNetAccount";
            this.EmailOfTheBattleNetAccount.Size = new Size(0xaf, 0x16);
            this.EmailOfTheBattleNetAccount.TabIndex = 13;
            this.EmailOfTheBattleNetAccountLabel.BackColor = Color.Transparent;
            this.EmailOfTheBattleNetAccountLabel.ForeColor = Color.Black;
            this.EmailOfTheBattleNetAccountLabel.Location = new Point(3, 80);
            this.EmailOfTheBattleNetAccountLabel.Name = "EmailOfTheBattleNetAccountLabel";
            this.EmailOfTheBattleNetAccountLabel.Size = new Size(0x9a, 0x16);
            this.EmailOfTheBattleNetAccountLabel.TabIndex = 12;
            this.EmailOfTheBattleNetAccountLabel.Text = "Account Email";
            this.MimesisBroadcasterSettingsPanel.BackColor = Color.FromArgb(0xe8, 0xe8, 0xe8);
            this.MimesisBroadcasterSettingsPanel.BorderColor = Color.FromArgb(0x34, 0x34, 0x34);
            this.MimesisBroadcasterSettingsPanel.BorderStyle = ButtonBorderStyle.Solid;
            this.MimesisBroadcasterSettingsPanel.ContentSize = new Size(0x22c, 0x9e);
            this.MimesisBroadcasterSettingsPanel.Controls.Add(this.BroadcastingPort);
            this.MimesisBroadcasterSettingsPanel.Controls.Add(this.BroadcastingIPWan);
            this.MimesisBroadcasterSettingsPanel.Controls.Add(this.BroadcastingIPLan);
            this.MimesisBroadcasterSettingsPanel.Controls.Add(this.BroadcastingIPLocal);
            this.MimesisBroadcasterSettingsPanel.Controls.Add(this.BroadcastingPortDefaultLabel);
            this.MimesisBroadcasterSettingsPanel.Controls.Add(this.BroadcastingIPWanLabel);
            this.MimesisBroadcasterSettingsPanel.Controls.Add(this.BroadcastingIPLanLabel);
            this.MimesisBroadcasterSettingsPanel.Controls.Add(this.ActivateBroadcastingMimesisLabel);
            this.MimesisBroadcasterSettingsPanel.Controls.Add(this.ActivateBroadcastingMimesis);
            this.MimesisBroadcasterSettingsPanel.Controls.Add(this.BroadcastingIPLocalLabel);
            this.MimesisBroadcasterSettingsPanel.Controls.Add(this.BroadcastingPortLabel);
            this.MimesisBroadcasterSettingsPanel.Fold = true;
            this.MimesisBroadcasterSettingsPanel.FolderImage = (Image) manager.GetObject("MimesisBroadcasterSettingsPanel.FolderImage");
            this.MimesisBroadcasterSettingsPanel.ForeColor = Color.FromArgb(0x34, 0x34, 0x34);
            this.MimesisBroadcasterSettingsPanel.HeaderBackColor = Color.FromArgb(250, 250, 250);
            this.MimesisBroadcasterSettingsPanel.HeaderImage = (Image) manager.GetObject("MimesisBroadcasterSettingsPanel.HeaderImage");
            this.MimesisBroadcasterSettingsPanel.HeaderSize = new Size(0x22c, 0x24);
            this.MimesisBroadcasterSettingsPanel.Location = new Point(0, 0x144);
            this.MimesisBroadcasterSettingsPanel.Margin = new Padding(0);
            this.MimesisBroadcasterSettingsPanel.MaximumSize = new Size(0x22c, 0);
            this.MimesisBroadcasterSettingsPanel.Name = "MimesisBroadcasterSettingsPanel";
            this.MimesisBroadcasterSettingsPanel.OrderIndex = 10;
            this.MimesisBroadcasterSettingsPanel.Padding = new Padding(0, 0, 0, 12);
            this.MimesisBroadcasterSettingsPanel.Size = new Size(0x22c, 0x24);
            this.MimesisBroadcasterSettingsPanel.TabIndex = 13;
            this.MimesisBroadcasterSettingsPanel.TitleFont = new Font("Segoe UI", 7.65f, FontStyle.Bold);
            this.MimesisBroadcasterSettingsPanel.TitleForeColor = Color.FromArgb(0xe8, 0xe8, 0xe8);
            this.MimesisBroadcasterSettingsPanel.TitleText = "Mimesis Broadcaster - (Others sessions with a started Mimesis can teamplay with this session)";
            this.MimesisBroadcasterSettingsPanel.UnfolderImage = (Image) manager.GetObject("MimesisBroadcasterSettingsPanel.UnfolderImage");
            this.BroadcastingPort.Location = new Point(0xa2, 0x4e);
            int[] numArray42 = new int[4];
            numArray42[0] = 0x10000;
            this.BroadcastingPort.Maximum = new decimal(numArray42);
            int[] numArray43 = new int[4];
            numArray43[0] = 0x400;
            this.BroadcastingPort.Minimum = new decimal(numArray43);
            this.BroadcastingPort.Name = "BroadcastingPort";
            this.BroadcastingPort.Size = new Size(0x3f, 0x16);
            this.BroadcastingPort.TabIndex = 0x20;
            int[] numArray44 = new int[4];
            numArray44[0] = 0x198f;
            this.BroadcastingPort.Value = new decimal(numArray44);
            this.BroadcastingIPWan.BackColor = Color.Transparent;
            this.BroadcastingIPWan.ForeColor = Color.Black;
            this.BroadcastingIPWan.Location = new Point(160, 160);
            this.BroadcastingIPWan.Name = "BroadcastingIPWan";
            this.BroadcastingIPWan.Size = new Size(0x9a, 0x16);
            this.BroadcastingIPWan.TabIndex = 0x1f;
            this.BroadcastingIPWan.Text = "0.0.0.0";
            this.BroadcastingIPLan.BackColor = Color.Transparent;
            this.BroadcastingIPLan.ForeColor = Color.Black;
            this.BroadcastingIPLan.Location = new Point(160, 0x84);
            this.BroadcastingIPLan.Name = "BroadcastingIPLan";
            this.BroadcastingIPLan.Size = new Size(0x9a, 0x16);
            this.BroadcastingIPLan.TabIndex = 30;
            this.BroadcastingIPLan.Text = "192.168.1.2";
            this.BroadcastingIPLocal.BackColor = Color.Transparent;
            this.BroadcastingIPLocal.ForeColor = Color.Black;
            this.BroadcastingIPLocal.Location = new Point(160, 0x68);
            this.BroadcastingIPLocal.Name = "BroadcastingIPLocal";
            this.BroadcastingIPLocal.Size = new Size(0x9a, 0x16);
            this.BroadcastingIPLocal.TabIndex = 0x1d;
            this.BroadcastingIPLocal.Text = "127.0.0.1";
            this.BroadcastingPortDefaultLabel.BackColor = Color.Transparent;
            this.BroadcastingPortDefaultLabel.ForeColor = Color.Black;
            this.BroadcastingPortDefaultLabel.Location = new Point(0xe7, 0x4e);
            this.BroadcastingPortDefaultLabel.Name = "BroadcastingPortDefaultLabel";
            this.BroadcastingPortDefaultLabel.Size = new Size(0x6a, 0x16);
            this.BroadcastingPortDefaultLabel.TabIndex = 0x1c;
            this.BroadcastingPortDefaultLabel.Text = "Default: 6543";
            this.BroadcastingIPWanLabel.BackColor = Color.Transparent;
            this.BroadcastingIPWanLabel.ForeColor = Color.Black;
            this.BroadcastingIPWanLabel.Location = new Point(2, 160);
            this.BroadcastingIPWanLabel.Name = "BroadcastingIPWanLabel";
            this.BroadcastingIPWanLabel.Size = new Size(0x9a, 0x16);
            this.BroadcastingIPWanLabel.TabIndex = 0x1a;
            this.BroadcastingIPWanLabel.Text = "IP Wan (internet)";
            this.BroadcastingIPLanLabel.BackColor = Color.Transparent;
            this.BroadcastingIPLanLabel.ForeColor = Color.Black;
            this.BroadcastingIPLanLabel.Location = new Point(2, 0x84);
            this.BroadcastingIPLanLabel.Name = "BroadcastingIPLanLabel";
            this.BroadcastingIPLanLabel.Size = new Size(0x9a, 0x16);
            this.BroadcastingIPLanLabel.TabIndex = 0x18;
            this.BroadcastingIPLanLabel.Text = "IP Lan (network)";
            this.ActivateBroadcastingMimesisLabel.BackColor = Color.Transparent;
            this.ActivateBroadcastingMimesisLabel.ForeColor = Color.Black;
            this.ActivateBroadcastingMimesisLabel.Location = new Point(2, 50);
            this.ActivateBroadcastingMimesisLabel.Name = "ActivateBroadcastingMimesisLabel";
            this.ActivateBroadcastingMimesisLabel.Size = new Size(0x9a, 0x16);
            this.ActivateBroadcastingMimesisLabel.TabIndex = 13;
            this.ActivateBroadcastingMimesisLabel.Text = "Activate Broadcasting";
            this.ActivateBroadcastingMimesis.BackColor = Color.FromArgb(0xe3, 0xe5, 230);
            this.ActivateBroadcastingMimesis.Font = new Font("Microsoft Sans Serif", 8.25f, FontStyle.Bold);
            this.ActivateBroadcastingMimesis.ForeColor = Color.Black;
            this.ActivateBroadcastingMimesis.Location = new Point(0xa2, 0x33);
            this.ActivateBroadcastingMimesis.MaximumSize = new Size(60, 20);
            this.ActivateBroadcastingMimesis.MinimumSize = new Size(60, 20);
            this.ActivateBroadcastingMimesis.Name = "ActivateBroadcastingMimesis";
            this.ActivateBroadcastingMimesis.OffText = "OFF";
            this.ActivateBroadcastingMimesis.OnText = "ON";
            this.ActivateBroadcastingMimesis.Size = new Size(60, 20);
            this.ActivateBroadcastingMimesis.TabIndex = 12;
            this.ActivateBroadcastingMimesis.Value = false;
            this.BroadcastingIPLocalLabel.BackColor = Color.Transparent;
            this.BroadcastingIPLocalLabel.ForeColor = Color.Black;
            this.BroadcastingIPLocalLabel.Location = new Point(2, 0x68);
            this.BroadcastingIPLocalLabel.Name = "BroadcastingIPLocalLabel";
            this.BroadcastingIPLocalLabel.Size = new Size(0x9a, 0x16);
            this.BroadcastingIPLocalLabel.TabIndex = 0x15;
            this.BroadcastingIPLocalLabel.Text = "IP Local (computer)";
            this.BroadcastingPortLabel.BackColor = Color.Transparent;
            this.BroadcastingPortLabel.ForeColor = Color.Black;
            this.BroadcastingPortLabel.Location = new Point(2, 0x4e);
            this.BroadcastingPortLabel.Name = "BroadcastingPortLabel";
            this.BroadcastingPortLabel.Size = new Size(0x9a, 0x16);
            this.BroadcastingPortLabel.TabIndex = 12;
            this.BroadcastingPortLabel.Text = "Broadcasting Port";
            this.AdvancedSettingsPanelName.BackColor = Color.FromArgb(0xe8, 0xe8, 0xe8);
            this.AdvancedSettingsPanelName.BorderColor = Color.FromArgb(0x34, 0x34, 0x34);
            this.AdvancedSettingsPanelName.BorderStyle = ButtonBorderStyle.Solid;
            this.AdvancedSettingsPanelName.ContentSize = new Size(0x22c, 0x7b);
            this.AdvancedSettingsPanelName.Controls.Add(this.HideCharacterNameFromTitleLabel);
            this.AdvancedSettingsPanelName.Controls.Add(this.HideCharacterNameFromTitle);
            this.AdvancedSettingsPanelName.Controls.Add(this.UseFrameLockLabel);
            this.AdvancedSettingsPanelName.Controls.Add(this.UseFrameLock);
            this.AdvancedSettingsPanelName.Controls.Add(this.HideSDKFilesLabel);
            this.AdvancedSettingsPanelName.Controls.Add(this.HideSDKFiles);
            this.AdvancedSettingsPanelName.Controls.Add(this.AutoCloseChatFrameLabel);
            this.AdvancedSettingsPanelName.Controls.Add(this.AutoCloseChatFrame);
            this.AdvancedSettingsPanelName.Controls.Add(this.AlwaysOnTopFeatureLabel);
            this.AdvancedSettingsPanelName.Controls.Add(this.ActivateAlwaysOnTopFeature);
            this.AdvancedSettingsPanelName.Controls.Add(this.AllowTNBToSetYourMaxFpsLabel);
            this.AdvancedSettingsPanelName.Controls.Add(this.AllowTNBToSetYourMaxFps);
            this.AdvancedSettingsPanelName.Controls.Add(this.MaxDistanceToGoToMailboxesOrNPCs);
            this.AdvancedSettingsPanelName.Controls.Add(this.MaxDistanceToGoToMailboxesOrNPCsLabel);
            this.AdvancedSettingsPanelName.Controls.Add(this.ActivatePathFindingFeatureLabel);
            this.AdvancedSettingsPanelName.Controls.Add(this.ActivatePathFindingFeature);
            this.AdvancedSettingsPanelName.Fold = true;
            this.AdvancedSettingsPanelName.FolderImage = (Image) manager.GetObject("AdvancedSettingsPanelName.FolderImage");
            this.AdvancedSettingsPanelName.ForeColor = Color.FromArgb(0x34, 0x34, 0x34);
            this.AdvancedSettingsPanelName.HeaderBackColor = Color.FromArgb(250, 250, 250);
            this.AdvancedSettingsPanelName.HeaderImage = (Image) manager.GetObject("AdvancedSettingsPanelName.HeaderImage");
            this.AdvancedSettingsPanelName.HeaderSize = new Size(0x22c, 0x24);
            this.AdvancedSettingsPanelName.Location = new Point(0, 360);
            this.AdvancedSettingsPanelName.Margin = new Padding(0);
            this.AdvancedSettingsPanelName.MaximumSize = new Size(0x22c, 0);
            this.AdvancedSettingsPanelName.MinimumSize = new Size(0x22c, 0x24);
            this.AdvancedSettingsPanelName.Name = "AdvancedSettingsPanelName";
            this.AdvancedSettingsPanelName.OrderIndex = 11;
            this.AdvancedSettingsPanelName.Padding = new Padding(0, 0, 0, 12);
            this.AdvancedSettingsPanelName.Size = new Size(0x22c, 0x24);
            this.AdvancedSettingsPanelName.TabIndex = 12;
            this.AdvancedSettingsPanelName.TitleFont = new Font("Segoe UI", 7.65f, FontStyle.Bold);
            this.AdvancedSettingsPanelName.TitleForeColor = Color.FromArgb(0xe8, 0xe8, 0xe8);
            this.AdvancedSettingsPanelName.TitleText = "Advanced Settings";
            this.AdvancedSettingsPanelName.UnfolderImage = (Image) manager.GetObject("AdvancedSettingsPanelName.UnfolderImage");
            this.UseFrameLockLabel.BackColor = Color.Transparent;
            this.UseFrameLockLabel.ForeColor = Color.Black;
            this.UseFrameLockLabel.ImageAlign = ContentAlignment.BottomLeft;
            this.UseFrameLockLabel.Location = new Point(4, 0x85);
            this.UseFrameLockLabel.Name = "UseFrameLockLabel";
            this.UseFrameLockLabel.Size = new Size(430, 0x16);
            this.UseFrameLockLabel.TabIndex = 0x25;
            this.UseFrameLockLabel.Text = "Allow Game FrameLocking to increase TheNoobBot performance";
            this.UseFrameLockLabel.TextAlign = ContentAlignment.MiddleLeft;
            this.UseFrameLock.BackColor = Color.White;
            this.UseFrameLock.Font = new Font("Microsoft Sans Serif", 8.25f, FontStyle.Bold);
            this.UseFrameLock.ForeColor = Color.Black;
            this.UseFrameLock.Location = new Point(0x1c0, 0x85);
            this.UseFrameLock.MaximumSize = new Size(60, 20);
            this.UseFrameLock.MinimumSize = new Size(60, 20);
            this.UseFrameLock.Name = "UseFrameLock";
            this.UseFrameLock.OffText = "OFF";
            this.UseFrameLock.OnText = "ON";
            this.UseFrameLock.Size = new Size(60, 20);
            this.UseFrameLock.TabIndex = 0x24;
            this.UseFrameLock.Value = true;
            this.HideSDKFilesLabel.BackColor = Color.Transparent;
            this.HideSDKFilesLabel.ForeColor = Color.Black;
            this.HideSDKFilesLabel.Location = new Point(4, 0x68);
            this.HideSDKFilesLabel.Name = "HideSDKFilesLabel";
            this.HideSDKFilesLabel.Size = new Size(0x9a, 0x16);
            this.HideSDKFilesLabel.TabIndex = 0x23;
            this.HideSDKFilesLabel.Text = "Hide SDK Files (.cs)";
            this.HideSDKFiles.BackColor = Color.White;
            this.HideSDKFiles.Font = new Font("Microsoft Sans Serif", 8.25f, FontStyle.Bold);
            this.HideSDKFiles.ForeColor = Color.Black;
            this.HideSDKFiles.Location = new Point(0xa3, 0x68);
            this.HideSDKFiles.MaximumSize = new Size(60, 20);
            this.HideSDKFiles.MinimumSize = new Size(60, 20);
            this.HideSDKFiles.Name = "HideSDKFiles";
            this.HideSDKFiles.OffText = "OFF";
            this.HideSDKFiles.OnText = "ON";
            this.HideSDKFiles.Size = new Size(60, 20);
            this.HideSDKFiles.TabIndex = 0x22;
            this.HideSDKFiles.Value = true;
            this.AutoCloseChatFrameLabel.BackColor = Color.Transparent;
            this.AutoCloseChatFrameLabel.ForeColor = Color.Black;
            this.AutoCloseChatFrameLabel.Location = new Point(0x121, 0x68);
            this.AutoCloseChatFrameLabel.Name = "AutoCloseChatFrameLabel";
            this.AutoCloseChatFrameLabel.Size = new Size(0x9a, 0x16);
            this.AutoCloseChatFrameLabel.TabIndex = 0x20;
            this.AutoCloseChatFrameLabel.Text = "Auto Close Chat";
            this.AutoCloseChatFrame.BackColor = Color.White;
            this.AutoCloseChatFrame.Font = new Font("Microsoft Sans Serif", 8.25f, FontStyle.Bold);
            this.AutoCloseChatFrame.ForeColor = Color.Black;
            this.AutoCloseChatFrame.Location = new Point(0x1c0, 0x68);
            this.AutoCloseChatFrame.MaximumSize = new Size(60, 20);
            this.AutoCloseChatFrame.MinimumSize = new Size(60, 20);
            this.AutoCloseChatFrame.Name = "AutoCloseChatFrame";
            this.AutoCloseChatFrame.OffText = "OFF";
            this.AutoCloseChatFrame.OnText = "ON";
            this.AutoCloseChatFrame.Size = new Size(60, 20);
            this.AutoCloseChatFrame.TabIndex = 0x1f;
            this.AutoCloseChatFrame.Value = false;
            this.AlwaysOnTopFeatureLabel.BackColor = Color.Transparent;
            this.AlwaysOnTopFeatureLabel.ForeColor = Color.Black;
            this.AlwaysOnTopFeatureLabel.Location = new Point(290, 0x4c);
            this.AlwaysOnTopFeatureLabel.Name = "AlwaysOnTopFeatureLabel";
            this.AlwaysOnTopFeatureLabel.Size = new Size(0x9a, 0x16);
            this.AlwaysOnTopFeatureLabel.TabIndex = 30;
            this.AlwaysOnTopFeatureLabel.Text = "Always On Top";
            this.ActivateAlwaysOnTopFeature.BackColor = Color.FromArgb(0xe3, 0xe5, 230);
            this.ActivateAlwaysOnTopFeature.Font = new Font("Microsoft Sans Serif", 8.25f, FontStyle.Bold);
            this.ActivateAlwaysOnTopFeature.Location = new Point(0x1c1, 0x4c);
            this.ActivateAlwaysOnTopFeature.MaximumSize = new Size(60, 20);
            this.ActivateAlwaysOnTopFeature.MinimumSize = new Size(60, 20);
            this.ActivateAlwaysOnTopFeature.Name = "ActivateAlwaysOnTopFeature";
            this.ActivateAlwaysOnTopFeature.OffText = "OFF";
            this.ActivateAlwaysOnTopFeature.OnText = "ON";
            this.ActivateAlwaysOnTopFeature.Size = new Size(60, 20);
            this.ActivateAlwaysOnTopFeature.TabIndex = 0x1d;
            this.ActivateAlwaysOnTopFeature.Value = false;
            this.AllowTNBToSetYourMaxFpsLabel.BackColor = Color.Transparent;
            this.AllowTNBToSetYourMaxFpsLabel.ForeColor = Color.Black;
            this.AllowTNBToSetYourMaxFpsLabel.Location = new Point(290, 0x30);
            this.AllowTNBToSetYourMaxFpsLabel.Name = "AllowTNBToSetYourMaxFpsLabel";
            this.AllowTNBToSetYourMaxFpsLabel.Size = new Size(0x9a, 0x16);
            this.AllowTNBToSetYourMaxFpsLabel.TabIndex = 0x1c;
            this.AllowTNBToSetYourMaxFpsLabel.Text = "Uncap MaxFPS (recommended)";
            this.AllowTNBToSetYourMaxFps.BackColor = Color.FromArgb(0xe3, 0xe5, 230);
            this.AllowTNBToSetYourMaxFps.Font = new Font("Microsoft Sans Serif", 8.25f, FontStyle.Bold);
            this.AllowTNBToSetYourMaxFps.ForeColor = Color.Black;
            this.AllowTNBToSetYourMaxFps.Location = new Point(0x1c1, 0x30);
            this.AllowTNBToSetYourMaxFps.MaximumSize = new Size(60, 20);
            this.AllowTNBToSetYourMaxFps.MinimumSize = new Size(60, 20);
            this.AllowTNBToSetYourMaxFps.Name = "AllowTNBToSetYourMaxFps";
            this.AllowTNBToSetYourMaxFps.OffText = "OFF";
            this.AllowTNBToSetYourMaxFps.OnText = "ON";
            this.AllowTNBToSetYourMaxFps.Size = new Size(60, 20);
            this.AllowTNBToSetYourMaxFps.TabIndex = 0x1b;
            this.AllowTNBToSetYourMaxFps.Value = false;
            this.MaxDistanceToGoToMailboxesOrNPCs.ForeColor = Color.Black;
            this.MaxDistanceToGoToMailboxesOrNPCs.Location = new Point(0xa2, 0x4c);
            int[] numArray45 = new int[4];
            numArray45[0] = 0x2710;
            this.MaxDistanceToGoToMailboxesOrNPCs.Maximum = new decimal(numArray45);
            int[] numArray46 = new int[4];
            numArray46[0] = 1;
            this.MaxDistanceToGoToMailboxesOrNPCs.Minimum = new decimal(numArray46);
            this.MaxDistanceToGoToMailboxesOrNPCs.Name = "MaxDistanceToGoToMailboxesOrNPCs";
            this.MaxDistanceToGoToMailboxesOrNPCs.Size = new Size(0x4d, 0x16);
            this.MaxDistanceToGoToMailboxesOrNPCs.TabIndex = 0x1a;
            int[] numArray47 = new int[4];
            numArray47[0] = 100;
            this.MaxDistanceToGoToMailboxesOrNPCs.Value = new decimal(numArray47);
            this.MaxDistanceToGoToMailboxesOrNPCsLabel.BackColor = Color.Transparent;
            this.MaxDistanceToGoToMailboxesOrNPCsLabel.ForeColor = Color.Black;
            this.MaxDistanceToGoToMailboxesOrNPCsLabel.Location = new Point(3, 0x4c);
            this.MaxDistanceToGoToMailboxesOrNPCsLabel.Name = "MaxDistanceToGoToMailboxesOrNPCsLabel";
            this.MaxDistanceToGoToMailboxesOrNPCsLabel.Size = new Size(0x9a, 0x16);
            this.MaxDistanceToGoToMailboxesOrNPCsLabel.TabIndex = 0x19;
            this.MaxDistanceToGoToMailboxesOrNPCsLabel.Text = "Npc/Mailbox Search Radius";
            this.ActivatePathFindingFeatureLabel.BackColor = Color.Transparent;
            this.ActivatePathFindingFeatureLabel.ForeColor = Color.Black;
            this.ActivatePathFindingFeatureLabel.Location = new Point(3, 0x31);
            this.ActivatePathFindingFeatureLabel.Name = "ActivatePathFindingFeatureLabel";
            this.ActivatePathFindingFeatureLabel.Size = new Size(0x9a, 0x16);
            this.ActivatePathFindingFeatureLabel.TabIndex = 11;
            this.ActivatePathFindingFeatureLabel.Text = "Use Paths Finder";
            this.ActivatePathFindingFeature.BackColor = Color.FromArgb(0xe3, 0xe5, 230);
            this.ActivatePathFindingFeature.Font = new Font("Microsoft Sans Serif", 8.25f, FontStyle.Bold);
            this.ActivatePathFindingFeature.Location = new Point(0xa2, 0x31);
            this.ActivatePathFindingFeature.MaximumSize = new Size(60, 20);
            this.ActivatePathFindingFeature.MinimumSize = new Size(60, 20);
            this.ActivatePathFindingFeature.Name = "ActivatePathFindingFeature";
            this.ActivatePathFindingFeature.OffText = "OFF";
            this.ActivatePathFindingFeature.OnText = "ON";
            this.ActivatePathFindingFeature.Size = new Size(60, 20);
            this.ActivatePathFindingFeature.TabIndex = 0x21;
            this.ActivatePathFindingFeature.Value = true;
            this.MainHeader.BackgroundImage = Resources._800x43_controlbar;
            this.MainHeader.BackgroundImageLayout = ImageLayout.None;
            this.MainHeader.Location = new Point(0, 0);
            this.MainHeader.LogoImage = (Image) manager.GetObject("MainHeader.LogoImage");
            this.MainHeader.Margin = new Padding(0);
            this.MainHeader.Name = "MainHeader";
            this.MainHeader.Size = new Size(0x23f, 0x2b);
            this.MainHeader.TabIndex = 7;
            this.MainHeader.TitleFont = new Font("Microsoft Sans Serif", 12f, FontStyle.Regular, GraphicsUnit.Point, 0);
            this.MainHeader.TitleForeColor = Color.White;
            this.MainHeader.TitleText = "General Settings";
            this.HideCharacterNameFromTitleLabel.BackColor = Color.Transparent;
            this.HideCharacterNameFromTitleLabel.ForeColor = Color.Black;
            this.HideCharacterNameFromTitleLabel.ImageAlign = ContentAlignment.BottomLeft;
            this.HideCharacterNameFromTitleLabel.Location = new Point(4, 0xa1);
            this.HideCharacterNameFromTitleLabel.Name = "HideCharacterNameFromTitleLabel";
            this.HideCharacterNameFromTitleLabel.Size = new Size(430, 0x16);
            this.HideCharacterNameFromTitleLabel.TabIndex = 0x27;
            this.HideCharacterNameFromTitleLabel.Text = "Replace your Character's Name with \"Anonymous\" in the title of the Main Window";
            this.HideCharacterNameFromTitleLabel.TextAlign = ContentAlignment.MiddleLeft;
            this.HideCharacterNameFromTitle.BackColor = Color.White;
            this.HideCharacterNameFromTitle.Font = new Font("Microsoft Sans Serif", 8.25f, FontStyle.Bold);
            this.HideCharacterNameFromTitle.ForeColor = Color.Black;
            this.HideCharacterNameFromTitle.Location = new Point(0x1c0, 0xa1);
            this.HideCharacterNameFromTitle.MaximumSize = new Size(60, 20);
            this.HideCharacterNameFromTitle.MinimumSize = new Size(60, 20);
            this.HideCharacterNameFromTitle.Name = "HideCharacterNameFromTitle";
            this.HideCharacterNameFromTitle.OffText = "OFF";
            this.HideCharacterNameFromTitle.OnText = "ON";
            this.HideCharacterNameFromTitle.Size = new Size(60, 20);
            this.HideCharacterNameFromTitle.TabIndex = 0x26;
            this.HideCharacterNameFromTitle.Value = false;
            base.AutoScaleMode = AutoScaleMode.None;
            this.BackColor = Color.FromArgb(0xe8, 0xe8, 0xe8);
            this.BackgroundImage = (Image) manager.GetObject("$this.BackgroundImage");
            base.ClientSize = new Size(0x23f, 0x1c7);
            base.Controls.Add(this.closeB);
            base.Controls.Add(this.resetB);
            base.Controls.Add(this.saveAndCloseB);
            base.Controls.Add(this.MainPanel);
            base.Controls.Add(this.MainHeader);
            this.Font = new Font("Segoe UI", 8.25f, FontStyle.Regular, GraphicsUnit.Point, 0);
            base.FormBorderStyle = FormBorderStyle.None;
            base.Icon = (Icon) manager.GetObject("$this.Icon");
            base.Name = "GeneralSettings";
            base.StartPosition = FormStartPosition.CenterParent;
            this.Text = "General Settings";
            base.FormClosing += new FormClosingEventHandler(this.GeneralSettings_FormClosing);
            this.MainPanel.ResumeLayout(false);
            this.SpellManagementSystemPanelName.ResumeLayout(false);
            this.PluginsManagementSystemPanelName.ResumeLayout(false);
            this.MountManagementPanelName.ResumeLayout(false);
            this.MountManagementPanelName.PerformLayout();
            this.MinimumDistanceToUseMount.EndInit();
            this.LootingFarmingManagementPanelName.ResumeLayout(false);
            this.LootingFarmingManagementPanelName.PerformLayout();
            this.TimeBetweenEachMillingAttempt.EndInit();
            this.TimeBetweenEachProspectingAttempt.EndInit();
            this.GatheringSearchRadius.EndInit();
            this.DontHarvestIfMoreThanXUnitInAggroRange.EndInit();
            this.DontHarvestIfPlayerNearRadius.EndInit();
            this.NPCsRepairSellBuyPanelName.ResumeLayout(false);
            this.NPCsRepairSellBuyPanelName.PerformLayout();
            this.SellItemsWhenLessThanXSlotLeft.EndInit();
            this.RepairWhenDurabilityIsUnderPercent.EndInit();
            this.NumberOfFoodsWeGot.EndInit();
            this.NumberOfBeverageWeGot.EndInit();
            this.MailsManagementPanelName.ResumeLayout(false);
            this.MailsManagementPanelName.PerformLayout();
            this.SendMailWhenLessThanXSlotLeft.EndInit();
            this.RegenerationManagementPanelName.ResumeLayout(false);
            this.RegenerationManagementPanelName.PerformLayout();
            this.DrinkBeverageWhenManaIsUnderXPercent.EndInit();
            this.EatFoodWhenHealthIsUnderXPercent.EndInit();
            this.SecuritySystemPanelName.ResumeLayout(false);
            this.StopTNBAfterXMinutes.EndInit();
            this.StopTNBAfterXStucks.EndInit();
            this.StopTNBIfReceivedAtMostXWhispers.EndInit();
            this.StopTNBAfterXLevelup.EndInit();
            this.ReloggerManagementPanelName.ResumeLayout(false);
            this.ReloggerManagementPanelName.PerformLayout();
            this.MimesisBroadcasterSettingsPanel.ResumeLayout(false);
            this.BroadcastingPort.EndInit();
            this.AdvancedSettingsPanelName.ResumeLayout(false);
            this.MaxDistanceToGoToMailboxesOrNPCs.EndInit();
            base.ResumeLayout(false);
        }

        private void LoadPlugin(object sender, EventArgs e)
        {
            this.ActivatePlugin.Enabled = false;
            if ((this.AvailablePluginsList.Items.Count <= 0) || (this.AvailablePluginsList.SelectedIndex < 0))
            {
                MessageBox.Show("There is no plugins available or selected.");
                this.ActivatePlugin.Enabled = true;
            }
            else
            {
                Plugin plugin = new Plugin {
                    PathToPluginFile = Application.StartupPath + @"\Plugins\" + this.AvailablePluginsList.SelectedItem
                };
                if (!plugin.IsAlive)
                {
                    MessageBox.Show("This plugin cannot be activated, read error logs for more informations.");
                }
                else if (!this.LaunchExpiredPlugins.Value && plugin.IsExpired)
                {
                    MessageBox.Show("This plugin is expired and LaunchExpiredPlugins is OFF.");
                }
                else
                {
                    this.ActivatedPluginsList.Items.Add(this.AvailablePluginsList.SelectedItem);
                    this.AvailablePluginsList.Items.Remove(this.AvailablePluginsList.SelectedItem);
                }
                nManager.Plugins.Plugins.DisposePlugins();
                this.ActivatePlugin.Enabled = true;
            }
        }

        private void LoadSetting(nManagerSetting managerSetting)
        {
            try
            {
                this.CombatClass.Text = managerSetting.CombatClass;
                this.HealerClass.Text = managerSetting.HealerClass;
                this.AutoAssignTalents.Value = managerSetting.AutoAssignTalents;
                this.ActivateSkillsAutoTraining.Value = managerSetting.ActivateSkillsAutoTraining;
                this.OnlyTrainCurrentlyUsedSkills.Value = managerSetting.OnlyTrainCurrentlyUsedSkills;
                this.TrainMountingCapacity.Value = managerSetting.TrainMountingCapacity;
                this.OnlyTrainIfWeHave2TimesMoreMoneyThanOurWishListSum.Value = managerSetting.OnlyTrainIfWeHave2TimesMoreMoneyThanOurWishListSum;
                this.BecomeApprenticeIfNeededByProduct.Value = managerSetting.BecomeApprenticeIfNeededByProduct;
                this.BecomeApprenticeOfSecondarySkillsWhileQuesting.Value = managerSetting.BecomeApprenticeOfSecondarySkillsWhileQuesting;
                this.CanPullUnitsAlreadyInFight.Value = managerSetting.CanPullUnitsAlreadyInFight;
                this.DontPullMonsters.Value = managerSetting.DontPullMonsters;
                this.UseSpiritHealer.Value = managerSetting.UseSpiritHealer;
                this.UseGroundMount.Value = managerSetting.UseGroundMount;
                this.GroundMountName.Text = managerSetting.GroundMountName;
                this.MinimumDistanceToUseMount.Value = managerSetting.MinimumDistanceToUseMount;
                this.IgnoreFightIfMounted.Value = managerSetting.IgnoreFightIfMounted;
                this.FlyingMountName.Text = managerSetting.FlyingMountName;
                this.AquaticMountName.Text = managerSetting.AquaticMountName;
                this.FoodName.Text = managerSetting.FoodName;
                this.EatFoodWhenHealthIsUnderXPercent.Value = managerSetting.EatFoodWhenHealthIsUnderXPercent;
                this.BeverageName.Text = managerSetting.BeverageName;
                this.DrinkBeverageWhenManaIsUnderXPercent.Value = managerSetting.DrinkBeverageWhenManaIsUnderXPercent;
                this.DoRegenManaIfLow.Value = managerSetting.DoRegenManaIfLow;
                this.ActivateMonsterLooting.Value = managerSetting.ActivateMonsterLooting;
                this.ActivateLootStatistics.Value = managerSetting.ActivateLootStatistics;
                this.ActivateChestLooting.Value = managerSetting.ActivateChestLooting;
                this.ActivateBeastSkinning.Value = managerSetting.ActivateBeastSkinning;
                this.BeastNinjaSkinning.Value = managerSetting.BeastNinjaSkinning;
                this.ActivateVeinsHarvesting.Value = managerSetting.ActivateVeinsHarvesting;
                this.ActivateHerbsHarvesting.Value = managerSetting.ActivateHerbsHarvesting;
                this.DontHarvestIfPlayerNearRadius.Value = (decimal) managerSetting.DontHarvestIfPlayerNearRadius;
                this.DontHarvestIfMoreThanXUnitInAggroRange.Value = managerSetting.DontHarvestIfMoreThanXUnitInAggroRange;
                this.GatheringSearchRadius.Value = (decimal) managerSetting.GatheringSearchRadius;
                this.HarvestDuringLongDistanceMovements.Value = managerSetting.HarvestDuringLongDistanceMovements;
                this.ActivateAutoSmelting.Value = managerSetting.ActivateAutoSmelting;
                this.ActivateAutoProspecting.Value = managerSetting.ActivateAutoProspecting;
                this.OnlyUseProspectingInTown.Value = managerSetting.OnlyUseProspectingInTown;
                this.TimeBetweenEachProspectingAttempt.Value = managerSetting.TimeBetweenEachProspectingAttempt;
                this.MineralsToProspect.Text = Others.ArrayToTextByLine(managerSetting.MineralsToProspect.ToArray());
                this.ActivateAutoMilling.Value = managerSetting.ActivateAutoMilling;
                this.OnlyUseMillingInTown.Value = managerSetting.OnlyUseMillingInTown;
                this.TimeBetweenEachMillingAttempt.Value = managerSetting.TimeBetweenEachMillingAttempt;
                this.HerbsToBeMilled.Text = Others.ArrayToTextByLine(managerSetting.HerbsToBeMilled.ToArray());
                this.DontHarvestTheFollowingObjects.Text = Others.ArrayToTextByLine(managerSetting.DontHarvestTheFollowingObjects.ToArray());
                this.MakeStackOfElementalsItems.Value = managerSetting.MakeStackOfElementalsItems;
                this.ActivateReloggerFeature.Value = managerSetting.ActivateReloggerFeature;
                this.EmailOfTheBattleNetAccount.Text = managerSetting.EmailOfTheBattleNetAccount;
                this.PasswordOfTheBattleNetAccount.Text = managerSetting.PasswordOfTheBattleNetAccount;
                this.BattleNetSubAccount.Text = managerSetting.BattleNetSubAccount;
                this.NumberOfFoodsWeGot.Value = managerSetting.NumberOfFoodsWeGot;
                this.NumberOfBeverageWeGot.Value = managerSetting.NumberOfBeverageWeGot;
                this.ActivateAutoRepairFeature.Value = managerSetting.ActivateAutoRepairFeature;
                this.ActivateAutoSellingFeature.Value = managerSetting.ActivateAutoSellingFeature;
                this.SellGray.Checked = managerSetting.SellGray;
                this.SellWhite.Checked = managerSetting.SellWhite;
                this.SellGreen.Checked = managerSetting.SellGreen;
                this.SellBlue.Checked = managerSetting.SellBlue;
                this.SellPurple.Checked = managerSetting.SellPurple;
                this.DontSellTheseItems.Text = Others.ArrayToTextByLine(managerSetting.DontSellTheseItems.ToArray());
                this.ForceToSellTheseItems.Text = Others.ArrayToTextByLine(managerSetting.ForceToSellTheseItems.ToArray());
                this.ActivateAutoMaillingFeature.Value = managerSetting.ActivateAutoMaillingFeature;
                this.MaillingFeatureRecipient.Text = managerSetting.MaillingFeatureRecipient;
                this.MaillingFeatureSubject.Text = managerSetting.MaillingFeatureSubject;
                this.MailGray.Checked = managerSetting.MailGray;
                this.MailWhite.Checked = managerSetting.MailWhite;
                this.MailGreen.Checked = managerSetting.MailGreen;
                this.MailBlue.Checked = managerSetting.MailBlue;
                this.MailPurple.Checked = managerSetting.MailPurple;
                this.ForceToMailTheseItems.Text = Others.ArrayToTextByLine(managerSetting.ForceToMailTheseItems.ToArray());
                this.DontMailTheseItems.Text = Others.ArrayToTextByLine(managerSetting.DontMailTheseItems.ToArray());
                this.StopTNBIfBagAreFull.Value = managerSetting.StopTNBIfBagAreFull;
                this.StopTNBIfHonorPointsLimitReached.Value = managerSetting.StopTNBIfHonorPointsLimitReached;
                this.StopTNBIfPlayerHaveBeenTeleported.Value = managerSetting.StopTNBIfPlayerHaveBeenTeleported;
                this.StopTNBAfterXLevelup.Value = managerSetting.StopTNBAfterXLevelup;
                this.StopTNBIfReceivedAtMostXWhispers.Value = managerSetting.StopTNBIfReceivedAtMostXWhispers;
                this.StopTNBAfterXStucks.Value = managerSetting.StopTNBAfterXStucks;
                this.StopTNBAfterXMinutes.Value = managerSetting.StopTNBAfterXMinutes;
                this.PauseTNBIfNearByPlayer.Value = managerSetting.PauseTNBIfNearByPlayer;
                this.RecordWhispsInLogFiles.Value = managerSetting.RecordWhispsInLogFiles;
                this.PlayASongIfNewWhispReceived.Value = managerSetting.PlayASongIfNewWhispReceived;
                this.ActivatePathFindingFeature.Value = managerSetting.ActivatePathFindingFeature;
                this.AllowTNBToSetYourMaxFps.Value = managerSetting.AllowTNBToSetYourMaxFps;
                this.MaxDistanceToGoToMailboxesOrNPCs.Value = (decimal) managerSetting.MaxDistanceToGoToMailboxesOrNPCs;
                this.AutoConfirmOnBoPItems.Value = managerSetting.AutoConfirmOnBoPItems;
                this.ActivateAlwaysOnTopFeature.Value = managerSetting.ActivateAlwaysOnTopFeature;
                this.RepairWhenDurabilityIsUnderPercent.Value = managerSetting.RepairWhenDurabilityIsUnderPercent;
                this.SellItemsWhenLessThanXSlotLeft.Value = managerSetting.SellItemsWhenLessThanXSlotLeft;
                this.SendMailWhenLessThanXSlotLeft.Value = managerSetting.SendMailWhenLessThanXSlotLeft;
                this.UseHearthstone.Value = managerSetting.UseHearthstone;
                this.ActiveStopTNBAfterXLevelup.Value = managerSetting.ActiveStopTNBAfterXLevelup;
                this.ActiveStopTNBAfterXMinutes.Value = managerSetting.ActiveStopTNBAfterXMinutes;
                this.ActiveStopTNBAfterXStucks.Value = managerSetting.ActiveStopTNBAfterXStucks;
                this.ActiveStopTNBIfReceivedAtMostXWhispers.Value = managerSetting.ActiveStopTNBIfReceivedAtMostXWhispers;
                this.UseMollE.Value = managerSetting.UseMollE;
                this.UseRobot.Value = managerSetting.UseRobot;
                this.AutoCloseChatFrame.Value = managerSetting.AutoCloseChatFrame;
                this.ActivateBroadcastingMimesis.Value = managerSetting.ActivateBroadcastingMimesis;
                this.BroadcastingPort.Value = managerSetting.BroadcastingPort;
                this.ActivatePluginsSystem.Value = managerSetting.ActivatePluginsSystem;
                this.LaunchExpiredPlugins.Value = managerSetting.LaunchExpiredPlugins;
                this.HideSDKFiles.Value = managerSetting.HideSdkFiles;
                this.UseLootARange.Value = managerSetting.UseLootARange;
                this.HideCharacterNameFromTitle.Value = managerSetting.HideCharacterNameFromTitle;
                this.ActivatedPluginsList.Items.Clear();
                this.UseFrameLock.Value = managerSetting.UseFrameLock;
                foreach (string str in managerSetting.ActivatedPluginsList)
                {
                    if (this.AvailablePluginsList.Items.Contains(str))
                    {
                        this.AvailablePluginsList.Items.Remove(str);
                        this.ActivatedPluginsList.Items.Add(str);
                    }
                }
            }
            catch (Exception exception)
            {
                nManager.Helpful.Logging.WriteError("GeneralSettings > LoadSetting(nManagerSetting managerSetting): " + exception, true);
            }
        }

        private void resetB_Click(object sender, EventArgs e)
        {
            try
            {
                this.resetB.Enabled = false;
                this.LoadSetting(new nManagerSetting());
                this.resetB.Enabled = true;
            }
            catch (Exception exception)
            {
                nManager.Helpful.Logging.WriteError("GeneralSettings >  resetB_Click(object sender, EventArgs e): " + exception, true);
            }
        }

        private void ResetPlugin(object sender, EventArgs e)
        {
            this.ActivatedPluginResetSettings.Enabled = false;
            if ((this.ActivatedPluginsList.Items.Count <= 0) || (this.ActivatedPluginsList.SelectedIndex < 0))
            {
                MessageBox.Show("There is no plugins activated or selected.");
                this.ActivatedPluginResetSettings.Enabled = true;
            }
            else
            {
                Plugin plugin2 = new Plugin {
                    PathToPluginFile = Application.StartupPath + @"\Plugins\" + this.ActivatedPluginsList.SelectedItem
                };
                plugin2.ResetConfigurationPlugin();
                this.ActivatedPluginResetSettings.Enabled = true;
            }
        }

        private void saveAndCloseB_Click(object sender, EventArgs e)
        {
            try
            {
                this.SaveSetting();
                base.Dispose();
            }
            catch (Exception exception)
            {
                nManager.Helpful.Logging.WriteError("GeneralSettings >  saveAndCloseB_Click(object sender, EventArgs e): " + exception, true);
            }
        }

        private void SaveSetting()
        {
            try
            {
                nManagerSetting.CurrentSetting.CombatClass = this.CombatClass.Text;
                nManagerSetting.CurrentSetting.HealerClass = this.HealerClass.Text;
                nManagerSetting.CurrentSetting.AutoAssignTalents = this.AutoAssignTalents.Value;
                nManagerSetting.CurrentSetting.ActivateSkillsAutoTraining = this.ActivateSkillsAutoTraining.Value;
                nManagerSetting.CurrentSetting.OnlyTrainCurrentlyUsedSkills = this.OnlyTrainCurrentlyUsedSkills.Value;
                nManagerSetting.CurrentSetting.TrainMountingCapacity = this.TrainMountingCapacity.Value;
                nManagerSetting.CurrentSetting.OnlyTrainIfWeHave2TimesMoreMoneyThanOurWishListSum = this.OnlyTrainIfWeHave2TimesMoreMoneyThanOurWishListSum.Value;
                nManagerSetting.CurrentSetting.BecomeApprenticeIfNeededByProduct = this.BecomeApprenticeIfNeededByProduct.Value;
                nManagerSetting.CurrentSetting.BecomeApprenticeOfSecondarySkillsWhileQuesting = this.BecomeApprenticeOfSecondarySkillsWhileQuesting.Value;
                nManagerSetting.CurrentSetting.CanPullUnitsAlreadyInFight = this.CanPullUnitsAlreadyInFight.Value;
                nManagerSetting.CurrentSetting.DontPullMonsters = this.DontPullMonsters.Value;
                nManagerSetting.CurrentSetting.UseSpiritHealer = this.UseSpiritHealer.Value;
                nManagerSetting.CurrentSetting.UseGroundMount = this.UseGroundMount.Value;
                nManagerSetting.CurrentSetting.GroundMountName = this.GroundMountName.Text;
                nManagerSetting.CurrentSetting.MinimumDistanceToUseMount = (uint) this.MinimumDistanceToUseMount.Value;
                nManagerSetting.CurrentSetting.IgnoreFightIfMounted = this.IgnoreFightIfMounted.Value;
                nManagerSetting.CurrentSetting.FlyingMountName = this.FlyingMountName.Text;
                nManagerSetting.CurrentSetting.AquaticMountName = this.AquaticMountName.Text;
                nManagerSetting.CurrentSetting.FoodName = this.FoodName.Text;
                nManagerSetting.CurrentSetting.EatFoodWhenHealthIsUnderXPercent = (int) this.EatFoodWhenHealthIsUnderXPercent.Value;
                nManagerSetting.CurrentSetting.BeverageName = this.BeverageName.Text;
                nManagerSetting.CurrentSetting.DrinkBeverageWhenManaIsUnderXPercent = (int) this.DrinkBeverageWhenManaIsUnderXPercent.Value;
                nManagerSetting.CurrentSetting.DoRegenManaIfLow = this.DoRegenManaIfLow.Value;
                nManagerSetting.CurrentSetting.ActivateMonsterLooting = this.ActivateMonsterLooting.Value;
                nManagerSetting.CurrentSetting.ActivateChestLooting = this.ActivateChestLooting.Value;
                nManagerSetting.CurrentSetting.ActivateBeastSkinning = this.ActivateBeastSkinning.Value;
                nManagerSetting.CurrentSetting.BeastNinjaSkinning = this.BeastNinjaSkinning.Value;
                nManagerSetting.CurrentSetting.ActivateVeinsHarvesting = this.ActivateVeinsHarvesting.Value;
                nManagerSetting.CurrentSetting.ActivateHerbsHarvesting = this.ActivateHerbsHarvesting.Value;
                nManagerSetting.CurrentSetting.DontHarvestIfPlayerNearRadius = (int) this.DontHarvestIfPlayerNearRadius.Value;
                nManagerSetting.CurrentSetting.DontHarvestIfMoreThanXUnitInAggroRange = (int) this.DontHarvestIfMoreThanXUnitInAggroRange.Value;
                nManagerSetting.CurrentSetting.GatheringSearchRadius = (int) this.GatheringSearchRadius.Value;
                nManagerSetting.CurrentSetting.HarvestDuringLongDistanceMovements = this.HarvestDuringLongDistanceMovements.Value;
                nManagerSetting.CurrentSetting.ActivateAutoSmelting = this.ActivateAutoSmelting.Value;
                nManagerSetting.CurrentSetting.ActivateAutoProspecting = this.ActivateAutoProspecting.Value;
                nManagerSetting.CurrentSetting.TimeBetweenEachProspectingAttempt = (int) this.TimeBetweenEachProspectingAttempt.Value;
                nManagerSetting.CurrentSetting.OnlyUseProspectingInTown = this.OnlyUseProspectingInTown.Value;
                nManagerSetting.CurrentSetting.MineralsToProspect.Clear();
                nManagerSetting.CurrentSetting.MineralsToProspect.AddRange(Others.TextToArrayByLine(this.MineralsToProspect.Text));
                nManagerSetting.CurrentSetting.ActivateAutoMilling = this.ActivateAutoMilling.Value;
                nManagerSetting.CurrentSetting.TimeBetweenEachMillingAttempt = (int) this.TimeBetweenEachMillingAttempt.Value;
                nManagerSetting.CurrentSetting.OnlyUseMillingInTown = this.OnlyUseMillingInTown.Value;
                nManagerSetting.CurrentSetting.HerbsToBeMilled.Clear();
                nManagerSetting.CurrentSetting.HerbsToBeMilled.AddRange(Others.TextToArrayByLine(this.HerbsToBeMilled.Text));
                nManagerSetting.CurrentSetting.DontHarvestTheFollowingObjects.Clear();
                nManagerSetting.CurrentSetting.DontHarvestTheFollowingObjects.AddRange(Others.TextToArrayByLine(this.DontHarvestTheFollowingObjects.Text));
                nManagerSetting.CurrentSetting.MakeStackOfElementalsItems = this.MakeStackOfElementalsItems.Value;
                nManagerSetting.CurrentSetting.ActivateReloggerFeature = this.ActivateReloggerFeature.Value;
                nManagerSetting.CurrentSetting.EmailOfTheBattleNetAccount = this.EmailOfTheBattleNetAccount.Text;
                nManagerSetting.CurrentSetting.PasswordOfTheBattleNetAccount = this.PasswordOfTheBattleNetAccount.Text;
                nManagerSetting.CurrentSetting.BattleNetSubAccount = this.BattleNetSubAccount.Text;
                nManagerSetting.CurrentSetting.NumberOfFoodsWeGot = (int) this.NumberOfFoodsWeGot.Value;
                nManagerSetting.CurrentSetting.NumberOfBeverageWeGot = (int) this.NumberOfBeverageWeGot.Value;
                nManagerSetting.CurrentSetting.ActivateAutoRepairFeature = this.ActivateAutoRepairFeature.Value;
                nManagerSetting.CurrentSetting.ActivateAutoSellingFeature = this.ActivateAutoSellingFeature.Value;
                nManagerSetting.CurrentSetting.SellGray = this.SellGray.Checked;
                nManagerSetting.CurrentSetting.SellWhite = this.SellWhite.Checked;
                nManagerSetting.CurrentSetting.SellGreen = this.SellGreen.Checked;
                nManagerSetting.CurrentSetting.SellBlue = this.SellBlue.Checked;
                nManagerSetting.CurrentSetting.SellPurple = this.SellPurple.Checked;
                nManagerSetting.CurrentSetting.DontSellTheseItems.Clear();
                nManagerSetting.CurrentSetting.DontSellTheseItems.AddRange(Others.TextToArrayByLine(this.DontSellTheseItems.Text));
                nManagerSetting.CurrentSetting.ForceToSellTheseItems.Clear();
                nManagerSetting.CurrentSetting.ForceToSellTheseItems.AddRange(Others.TextToArrayByLine(this.ForceToSellTheseItems.Text));
                nManagerSetting.CurrentSetting.ActivateAutoMaillingFeature = this.ActivateAutoMaillingFeature.Value;
                nManagerSetting.CurrentSetting.MaillingFeatureRecipient = this.MaillingFeatureRecipient.Text;
                nManagerSetting.CurrentSetting.MaillingFeatureSubject = this.MaillingFeatureSubject.Text;
                nManagerSetting.CurrentSetting.MailGray = this.MailGray.Checked;
                nManagerSetting.CurrentSetting.MailWhite = this.MailWhite.Checked;
                nManagerSetting.CurrentSetting.MailGreen = this.MailGreen.Checked;
                nManagerSetting.CurrentSetting.MailBlue = this.MailBlue.Checked;
                nManagerSetting.CurrentSetting.MailPurple = this.MailPurple.Checked;
                nManagerSetting.CurrentSetting.ForceToMailTheseItems.Clear();
                nManagerSetting.CurrentSetting.ForceToMailTheseItems.AddRange(Others.TextToArrayByLine(this.ForceToMailTheseItems.Text));
                nManagerSetting.CurrentSetting.DontMailTheseItems.Clear();
                nManagerSetting.CurrentSetting.DontMailTheseItems.AddRange(Others.TextToArrayByLine(this.DontMailTheseItems.Text));
                nManagerSetting.CurrentSetting.StopTNBIfBagAreFull = this.StopTNBIfBagAreFull.Value;
                nManagerSetting.CurrentSetting.StopTNBIfHonorPointsLimitReached = this.StopTNBIfHonorPointsLimitReached.Value;
                nManagerSetting.CurrentSetting.StopTNBIfPlayerHaveBeenTeleported = this.StopTNBIfPlayerHaveBeenTeleported.Value;
                nManagerSetting.CurrentSetting.StopTNBAfterXLevelup = (int) this.StopTNBAfterXLevelup.Value;
                nManagerSetting.CurrentSetting.StopTNBIfReceivedAtMostXWhispers = (int) this.StopTNBIfReceivedAtMostXWhispers.Value;
                nManagerSetting.CurrentSetting.StopTNBAfterXStucks = (int) this.StopTNBAfterXStucks.Value;
                nManagerSetting.CurrentSetting.StopTNBAfterXMinutes = (int) this.StopTNBAfterXMinutes.Value;
                nManagerSetting.CurrentSetting.PauseTNBIfNearByPlayer = this.PauseTNBIfNearByPlayer.Value;
                nManagerSetting.CurrentSetting.RecordWhispsInLogFiles = this.RecordWhispsInLogFiles.Value;
                nManagerSetting.CurrentSetting.PlayASongIfNewWhispReceived = this.PlayASongIfNewWhispReceived.Value;
                nManagerSetting.CurrentSetting.ActivatePathFindingFeature = this.ActivatePathFindingFeature.Value;
                nManagerSetting.CurrentSetting.AllowTNBToSetYourMaxFps = this.AllowTNBToSetYourMaxFps.Value;
                nManagerSetting.CurrentSetting.MaxDistanceToGoToMailboxesOrNPCs = (int) this.MaxDistanceToGoToMailboxesOrNPCs.Value;
                nManagerSetting.CurrentSetting.AutoConfirmOnBoPItems = this.AutoConfirmOnBoPItems.Value;
                nManagerSetting.CurrentSetting.ActivateAlwaysOnTopFeature = this.ActivateAlwaysOnTopFeature.Value;
                nManagerSetting.CurrentSetting.RepairWhenDurabilityIsUnderPercent = (int) this.RepairWhenDurabilityIsUnderPercent.Value;
                nManagerSetting.CurrentSetting.SellItemsWhenLessThanXSlotLeft = (int) this.SellItemsWhenLessThanXSlotLeft.Value;
                nManagerSetting.CurrentSetting.SendMailWhenLessThanXSlotLeft = (int) this.SendMailWhenLessThanXSlotLeft.Value;
                nManagerSetting.CurrentSetting.UseHearthstone = this.UseHearthstone.Value;
                nManagerSetting.CurrentSetting.ActiveStopTNBAfterXLevelup = this.ActiveStopTNBAfterXLevelup.Value;
                nManagerSetting.CurrentSetting.ActiveStopTNBAfterXMinutes = this.ActiveStopTNBAfterXMinutes.Value;
                nManagerSetting.CurrentSetting.ActiveStopTNBAfterXStucks = this.ActiveStopTNBAfterXStucks.Value;
                nManagerSetting.CurrentSetting.ActiveStopTNBIfReceivedAtMostXWhispers = this.ActiveStopTNBIfReceivedAtMostXWhispers.Value;
                nManagerSetting.CurrentSetting.UseMollE = this.UseMollE.Value;
                nManagerSetting.CurrentSetting.UseRobot = this.UseRobot.Value;
                nManagerSetting.CurrentSetting.UseLootARange = this.UseLootARange.Value;
                nManagerSetting.CurrentSetting.HideCharacterNameFromTitle = this.HideCharacterNameFromTitle.Value;
                nManagerSetting.CurrentSetting.AutoCloseChatFrame = this.AutoCloseChatFrame.Value;
                if (nManagerSetting.CurrentSetting.ActivateLootStatistics && !this.ActivateLootStatistics.Value)
                {
                    Others.LootStatistics(false);
                }
                else if (!nManagerSetting.CurrentSetting.ActivateLootStatistics && this.ActivateLootStatistics.Value)
                {
                    Others.LootStatistics(true);
                }
                nManagerSetting.CurrentSetting.ActivateLootStatistics = this.ActivateLootStatistics.Value;
                int broadcastingPort = nManagerSetting.CurrentSetting.BroadcastingPort;
                bool activateBroadcastingMimesis = nManagerSetting.CurrentSetting.ActivateBroadcastingMimesis;
                nManagerSetting.CurrentSetting.ActivateBroadcastingMimesis = this.ActivateBroadcastingMimesis.Value;
                nManagerSetting.CurrentSetting.BroadcastingPort = (int) this.BroadcastingPort.Value;
                nManagerSetting.CurrentSetting.ActivatePluginsSystem = this.ActivatePluginsSystem.Value;
                nManagerSetting.CurrentSetting.LaunchExpiredPlugins = this.LaunchExpiredPlugins.Value;
                nManagerSetting.CurrentSetting.HideSdkFiles = this.HideSDKFiles.Value;
                nManagerSetting.CurrentSetting.ActivatedPluginsList.Clear();
                nManagerSetting.CurrentSetting.UseFrameLock = this.UseFrameLock.Value;
                foreach (string str in this.ActivatedPluginsList.Items)
                {
                    nManagerSetting.CurrentSetting.ActivatedPluginsList.Add(str);
                }
                if (nManagerSetting.CurrentSetting.ActivatePluginsSystem)
                {
                    nManager.Plugins.Plugins.ReLoadPlugins();
                }
                nManagerSetting.CurrentSetting.Save();
                if (activateBroadcastingMimesis && !this.ActivateBroadcastingMimesis.Value)
                {
                    Communication.Shutdown(broadcastingPort);
                }
                else if (!activateBroadcastingMimesis && this.ActivateBroadcastingMimesis.Value)
                {
                    Communication.Listen();
                }
                else if ((activateBroadcastingMimesis && this.ActivateBroadcastingMimesis.Value) && (this.BroadcastingPort.Value != broadcastingPort))
                {
                    Communication.Shutdown(broadcastingPort);
                    Communication.Listen();
                }
                MountTask.SettingsHasChanged = true;
            }
            catch (Exception exception)
            {
                nManager.Helpful.Logging.WriteError("GeneralSettings > SaveSetting(): " + exception, true);
            }
        }

        private void SetToolTypeIfNeeded(Control label)
        {
            using (Graphics graphics = base.CreateGraphics())
            {
                if (graphics.MeasureString(label.Text, label.Font).Width > label.Width)
                {
                    this.labelsToolTip.SetToolTip(label, label.Text);
                }
            }
        }

        private void TranslateForm()
        {
            string str = Translate.Get(Translate.Id.YES);
            string str2 = Translate.Get(Translate.Id.NO);
            this.SecuritySystemLabel.Text = string.Format("{0}:", Translate.Get(Translate.Id.Security));
            this.SetToolTypeIfNeeded(this.SecuritySystemLabel);
            this.CloseGameLabel.Text = string.Format("{0}:", Translate.Get(Translate.Id.Close_game));
            this.SetToolTypeIfNeeded(this.CloseGameLabel);
            this.StopTNBIfHonorPointsLimitReachedLabel.Text = Translate.Get(Translate.Id.If_reached______Honor_Points);
            this.SetToolTypeIfNeeded(this.StopTNBIfHonorPointsLimitReachedLabel);
            this.StopTNBAfterXMinutesLabel.Text = Translate.Get(Translate.Id.After);
            this.SetToolTypeIfNeeded(this.StopTNBAfterXMinutesLabel);
            this.StopTNBAfterXStucksLabel.Text = Translate.Get(Translate.Id.After);
            this.SetToolTypeIfNeeded(this.StopTNBAfterXStucksLabel);
            this.StopTNBAfterXLevelupLabel.Text = Translate.Get(Translate.Id.After);
            this.SetToolTypeIfNeeded(this.StopTNBAfterXLevelupLabel);
            this.addBlackListHarvest.Text = Translate.Get(Translate.Id.Add);
            this.SetToolTypeIfNeeded(this.addBlackListHarvest);
            this.AdvancedSettingsPanelName.TitleText = Translate.Get(Translate.Id.AdvancedSettingsPanelName);
            this.SetToolTypeIfNeeded(this.AdvancedSettingsPanelName);
            this.MaxDistanceToGoToMailboxesOrNPCsLabel.Text = Translate.Get(Translate.Id.Npc_Mailbox_Search_Radius);
            this.SetToolTypeIfNeeded(this.MaxDistanceToGoToMailboxesOrNPCsLabel);
            this.ActivatePathFindingFeatureLabel.Text = Translate.Get(Translate.Id.Use_Paths_Finder);
            this.SetToolTypeIfNeeded(this.ActivatePathFindingFeatureLabel);
            this.SecuritySystemPanelName.TitleText = Translate.Get(Translate.Id.SecuritySystemPanelName);
            this.SetToolTypeIfNeeded(this.SecuritySystemPanelName);
            this.labelX33.Text = Translate.Get(Translate.Id.Min);
            this.SetToolTypeIfNeeded(this.labelX33);
            this.RecordWhispsInLogFilesLabel.Text = Translate.Get(Translate.Id.Record_whisper_in_Log_file);
            this.SetToolTypeIfNeeded(this.RecordWhispsInLogFilesLabel);
            this.labelX32.Text = Translate.Get(Translate.Id.Blockages);
            this.SetToolTypeIfNeeded(this.labelX32);
            this.labelX31.Text = Translate.Get(Translate.Id.Level);
            this.SetToolTypeIfNeeded(this.labelX31);
            this.StopTNBIfPlayerHaveBeenTeleportedLabel.Text = Translate.Get(Translate.Id.If_Player_Teleported);
            this.SetToolTypeIfNeeded(this.StopTNBIfPlayerHaveBeenTeleportedLabel);
            this.PauseTNBIfNearByPlayerLabel.Text = Translate.Get(Translate.Id.Pause_tnb_if_Nearby_Player);
            this.SetToolTypeIfNeeded(this.PauseTNBIfNearByPlayerLabel);
            this.StopTNBIfReceivedAtMostXWhispersLabel.Text = Translate.Get(Translate.Id.If_Whisper_bigger_or_equal_to);
            this.SetToolTypeIfNeeded(this.StopTNBIfReceivedAtMostXWhispersLabel);
            this.StopTNBIfBagAreFullLabel.Text = Translate.Get(Translate.Id.If_full_Bag);
            this.SetToolTypeIfNeeded(this.StopTNBIfBagAreFullLabel);
            this.MailsManagementPanelName.TitleText = Translate.Get(Translate.Id.MailsManagementPanelName);
            this.SetToolTypeIfNeeded(this.MailsManagementPanelName);
            this.MaillingFeatureRecipientLabel.Text = Translate.Get(Translate.Id.Mail_Recipient);
            this.SetToolTypeIfNeeded(this.MaillingFeatureRecipientLabel);
            this.ForceToMailTheseItemsLabel.Text = Translate.Get(Translate.Id.Force_Mail_List__one_item_by_line);
            this.SetToolTypeIfNeeded(this.ForceToMailTheseItemsLabel);
            this.MailPurple.Text = Translate.Get(Translate.Id.Mail_Purple_items);
            this.SetToolTypeIfNeeded(this.MailPurple);
            this.MailBlue.Text = Translate.Get(Translate.Id.Mail_Blue_items);
            this.SetToolTypeIfNeeded(this.MailBlue);
            this.MailGreen.Text = Translate.Get(Translate.Id.Mail_Green_items);
            this.SetToolTypeIfNeeded(this.MailGreen);
            this.MailWhite.Text = Translate.Get(Translate.Id.Mail_White_items);
            this.SetToolTypeIfNeeded(this.MailWhite);
            this.MailGray.Text = Translate.Get(Translate.Id.Mail_Gray_items);
            this.SetToolTypeIfNeeded(this.MailGray);
            this.MaillingFeatureSubjectLabel.Text = Translate.Get(Translate.Id.Subject);
            this.SetToolTypeIfNeeded(this.MaillingFeatureSubjectLabel);
            this.ActivateAutoMaillingFeatureLabel.Text = Translate.Get(Translate.Id.Use_Mail);
            this.SetToolTypeIfNeeded(this.ActivateAutoMaillingFeatureLabel);
            this.DontMailTheseItemsLabel.Text = Translate.Get(Translate.Id.Do_not_Mail_List__one_item_by_line);
            this.SetToolTypeIfNeeded(this.DontMailTheseItemsLabel);
            this.NPCsRepairSellBuyPanelName.TitleText = Translate.Get(Translate.Id.NPCsRepairSellBuyPanelName);
            this.SetToolTypeIfNeeded(this.NPCsRepairSellBuyPanelName);
            this.ForceToSellTheseItemsLabel.Text = Translate.Get(Translate.Id.Force_Sell_List__one_item_by_line);
            this.SetToolTypeIfNeeded(this.ForceToSellTheseItemsLabel);
            this.SellPurple.Text = Translate.Get(Translate.Id.Sell_Purple_items);
            this.SetToolTypeIfNeeded(this.SellPurple);
            this.SellBlue.Text = Translate.Get(Translate.Id.Sell_Blue_items);
            this.SetToolTypeIfNeeded(this.SellBlue);
            this.SellGreen.Text = Translate.Get(Translate.Id.Sell_Green_items);
            this.SetToolTypeIfNeeded(this.SellGreen);
            this.SellWhite.Text = Translate.Get(Translate.Id.Sell_White_items);
            this.SetToolTypeIfNeeded(this.SellWhite);
            this.SellGray.Text = Translate.Get(Translate.Id.Sell_Gray_items);
            this.SetToolTypeIfNeeded(this.SellGray);
            this.labelX52.Text = Translate.Get(Translate.Id.Selling);
            this.SetToolTypeIfNeeded(this.labelX52);
            this.ActivateAutoRepairFeatureLabel.Text = Translate.Get(Translate.Id.Repair);
            this.SetToolTypeIfNeeded(this.ActivateAutoRepairFeatureLabel);
            this.NumberOfFoodsWeGotLabel.Text = Translate.Get(Translate.Id.Food_Amount);
            this.SetToolTypeIfNeeded(this.NumberOfFoodsWeGotLabel);
            this.NumberOfBeverageWeGotLabel.Text = Translate.Get(Translate.Id.Drink_Amount);
            this.SetToolTypeIfNeeded(this.NumberOfBeverageWeGotLabel);
            this.DontSellTheseItemsLabel.Text = Translate.Get(Translate.Id.Do_not_Sell_List__one_item_by_line);
            this.SetToolTypeIfNeeded(this.DontSellTheseItemsLabel);
            this.ReloggerManagementPanelName.TitleText = Translate.Get(Translate.Id.ReloggerManagementPanelName);
            this.SetToolTypeIfNeeded(this.ReloggerManagementPanelName);
            this.BattleNetSubAccountLabel.Text = Translate.Get(Translate.Id.BattleNet_Account);
            this.SetToolTypeIfNeeded(this.BattleNetSubAccountLabel);
            this.ActivateReloggerFeatureLabel.Text = Translate.Get(Translate.Id.Relogger);
            this.SetToolTypeIfNeeded(this.ActivateReloggerFeatureLabel);
            this.PasswordOfTheBattleNetAccountLabel.Text = Translate.Get(Translate.Id.Account_Password);
            this.SetToolTypeIfNeeded(this.PasswordOfTheBattleNetAccountLabel);
            this.EmailOfTheBattleNetAccountLabel.Text = Translate.Get(Translate.Id.Account_Email);
            this.SetToolTypeIfNeeded(this.EmailOfTheBattleNetAccountLabel);
            this.LootingFarmingManagementPanelName.TitleText = Translate.Get(Translate.Id.LootingFarmingManagementPanelName);
            this.SetToolTypeIfNeeded(this.LootingFarmingManagementPanelName);
            this.OnlyUseProspectingInTownLabel.Text = Translate.Get(Translate.Id.Prospecting_only_in_town);
            this.SetToolTypeIfNeeded(this.OnlyUseProspectingInTownLabel);
            this.TimeBetweenEachProspectingAttemptLabel.Text = Translate.Get(Translate.Id.Prospecting_Every__in_minute);
            this.SetToolTypeIfNeeded(this.TimeBetweenEachProspectingAttemptLabel);
            this.ActivateAutoProspectingLabel.Text = Translate.Get(Translate.Id.Prospecting);
            this.SetToolTypeIfNeeded(this.ActivateAutoProspectingLabel);
            this.MineralsToProspectLabel.Text = Translate.Get(Translate.Id.Prospecting_list__one_item_by_line);
            this.SetToolTypeIfNeeded(this.MineralsToProspectLabel);
            this.OnlyUseMillingInTownLabel.Text = Translate.Get(Translate.Id.Milling_only_in_town);
            this.SetToolTypeIfNeeded(this.OnlyUseMillingInTownLabel);
            this.TimeBetweenEachMillingAttemptLabel.Text = Translate.Get(Translate.Id.Milling_Every__in_minute);
            this.SetToolTypeIfNeeded(this.TimeBetweenEachMillingAttemptLabel);
            this.ActivateAutoMillingLabel.Text = Translate.Get(Translate.Id.Milling);
            this.SetToolTypeIfNeeded(this.ActivateAutoMillingLabel);
            this.HerbsToBeMilledLabel.Text = Translate.Get(Translate.Id.Milling_list__one_item_by_line);
            this.SetToolTypeIfNeeded(this.HerbsToBeMilledLabel);
            this.labelX61.Text = Translate.Get(Translate.Id.Smelting);
            this.SetToolTypeIfNeeded(this.labelX61);
            this.DontHarvestTheFollowingObjectsLabel.Text = Translate.Get(Translate.Id.Don_t_harvest);
            this.SetToolTypeIfNeeded(this.DontHarvestTheFollowingObjectsLabel);
            this.HarvestDuringLongDistanceMovementsLabel.Text = Translate.Get(Translate.Id.Harvest_During_Long_Move);
            this.SetToolTypeIfNeeded(this.HarvestDuringLongDistanceMovementsLabel);
            this.labelX23.Text = Translate.Get(Translate.Id.Ninja);
            this.SetToolTypeIfNeeded(this.labelX23);
            this.GatheringSearchRadiusLabel.Text = Translate.Get(Translate.Id.Search_Radius);
            this.SetToolTypeIfNeeded(this.GatheringSearchRadiusLabel);
            this.DontHarvestIfMoreThanXUnitInAggroRangeLabel.Text = Translate.Get(Translate.Id.Max_Units_Near);
            this.SetToolTypeIfNeeded(this.DontHarvestIfMoreThanXUnitInAggroRangeLabel);
            this.ActivateHerbsHarvestingLabel.Text = Translate.Get(Translate.Id.Harvest_Herbs);
            this.SetToolTypeIfNeeded(this.ActivateHerbsHarvestingLabel);
            this.ActivateVeinsHarvestingLabel.Text = Translate.Get(Translate.Id.Harvest_Minerals);
            this.SetToolTypeIfNeeded(this.ActivateVeinsHarvestingLabel);
            this.ActivateBeastSkinningLabel.Text = Translate.Get(Translate.Id.Skin_Mobs);
            this.SetToolTypeIfNeeded(this.ActivateBeastSkinningLabel);
            this.labelX16.Text = Translate.Get(Translate.Id.Loot_Chests);
            this.SetToolTypeIfNeeded(this.labelX16);
            this.DontHarvestIfPlayerNearRadiusLabel.Text = Translate.Get(Translate.Id.Harvest_Avoid_Players_Radius);
            this.SetToolTypeIfNeeded(this.DontHarvestIfPlayerNearRadiusLabel);
            this.ActivateMonsterLootingLabel.Text = Translate.Get(Translate.Id.Loot_Mobs);
            this.SetToolTypeIfNeeded(this.ActivateMonsterLootingLabel);
            this.ActivateLootStatisticsLabel.Text = Translate.Get(Translate.Id.ActivateLootStatistics);
            this.SetToolTypeIfNeeded(this.ActivateLootStatisticsLabel);
            this.RegenerationManagementPanelName.TitleText = Translate.Get(Translate.Id.RegenerationManagementPanelName);
            this.SetToolTypeIfNeeded(this.RegenerationManagementPanelName);
            this.labelX10.Text = Translate.Get(Translate.Id.on);
            this.SetToolTypeIfNeeded(this.labelX10);
            this.labelX13.Text = Translate.Get(Translate.Id.on);
            this.SetToolTypeIfNeeded(this.labelX13);
            this.BeverageNameLabel.Text = Translate.Get(Translate.Id.Drink);
            this.SetToolTypeIfNeeded(this.BeverageNameLabel);
            this.FoodNameLabel.Text = Translate.Get(Translate.Id.Food);
            this.SetToolTypeIfNeeded(this.FoodNameLabel);
            this.MountManagementPanelName.TitleText = Translate.Get(Translate.Id.MountManagementPanelName);
            this.SetToolTypeIfNeeded(this.MountManagementPanelName);
            this.AquaticMountNameLabel.Text = Translate.Get(Translate.Id.Aquatic);
            this.SetToolTypeIfNeeded(this.AquaticMountNameLabel);
            this.IgnoreFightIfMountedLabel.Text = Translate.Get(Translate.Id.Ignore_Fight_if_in_Gound_Mount);
            this.SetToolTypeIfNeeded(this.IgnoreFightIfMountedLabel);
            this.MinimumDistanceToUseMountLabel.Text = Translate.Get(Translate.Id.Mount_Distance);
            this.SetToolTypeIfNeeded(this.MinimumDistanceToUseMountLabel);
            this.FlyingMountNameLabel.Text = Translate.Get(Translate.Id.Flying);
            this.SetToolTypeIfNeeded(this.FlyingMountNameLabel);
            this.GroundMountNameLabel.Text = Translate.Get(Translate.Id.Ground);
            this.SetToolTypeIfNeeded(this.GroundMountNameLabel);
            this.UseGroundMountLabel.Text = Translate.Get(Translate.Id.Use_Ground_Mount);
            this.SetToolTypeIfNeeded(this.UseGroundMountLabel);
            this.SpellManagementSystemPanelName.TitleText = Translate.Get(Translate.Id.SpellManagementSystemPanelName);
            this.SetToolTypeIfNeeded(this.SpellManagementSystemPanelName);
            this.UseSpiritHealerLabel.Text = Translate.Get(Translate.Id.Use_Spirit_Healer);
            this.SetToolTypeIfNeeded(this.UseSpiritHealerLabel);
            this.ActivateSkillsAutoTrainingLabel.Text = Translate.Get(Translate.Id.ActivateSkillsAutoTraining);
            this.SetToolTypeIfNeeded(this.ActivateSkillsAutoTrainingLabel);
            this.OnlyTrainCurrentlyUsedSkillsLabel.Text = Translate.Get(Translate.Id.OnlyTrainCurrentlyUsedSkills);
            this.SetToolTypeIfNeeded(this.OnlyTrainCurrentlyUsedSkillsLabel);
            this.TrainMountingCapacityLabel.Text = Translate.Get(Translate.Id.TrainMountingCapacity);
            this.SetToolTypeIfNeeded(this.TrainMountingCapacityLabel);
            this.OnlyTrainIfWeHave2TimesMoreMoneyThanOurWishListSumLabel.Text = Translate.Get(Translate.Id.OnlyTrainIfWeHave2TimesMoreMoneyThanOurWishListSum);
            this.SetToolTypeIfNeeded(this.OnlyTrainIfWeHave2TimesMoreMoneyThanOurWishListSumLabel);
            this.BecomeApprenticeIfNeededByProductLabel.Text = Translate.Get(Translate.Id.BecomeApprenticeIfNeededByProduct);
            this.SetToolTypeIfNeeded(this.BecomeApprenticeIfNeededByProductLabel);
            this.BecomeApprenticeOfSecondarySkillsWhileQuestingLabel.Text = Translate.Get(Translate.Id.BecomeApprenticeOfSecondarySkillsWhileQuesting);
            this.SetToolTypeIfNeeded(this.BecomeApprenticeOfSecondarySkillsWhileQuestingLabel);
            this.DontPullMonstersLabel.Text = Translate.Get(Translate.Id.Don_t_start_fighting);
            this.SetToolTypeIfNeeded(this.DontPullMonstersLabel);
            this.CanPullUnitsAlreadyInFightLabel.Text = Translate.Get(Translate.Id.Can_attack_units_already_in_fight);
            this.SetToolTypeIfNeeded(this.CanPullUnitsAlreadyInFightLabel);
            this.AutoAssignTalentsLabel.Text = Translate.Get(Translate.Id.Assign_Talents);
            this.SetToolTypeIfNeeded(this.AutoAssignTalentsLabel);
            this.CombatClassLabel.Text = Translate.Get(Translate.Id.CombatClass);
            this.SetToolTypeIfNeeded(this.CombatClassLabel);
            this.HealerClassLabel.Text = Translate.Get(Translate.Id.HealerClass);
            this.SetToolTypeIfNeeded(this.HealerClassLabel);
            this.CombatClassSettingsButton.Text = Translate.Get(Translate.Id.Settings);
            this.SetToolTypeIfNeeded(this.CombatClassSettingsButton);
            this.HealerClassSettingsButton.Text = Translate.Get(Translate.Id.Settings);
            this.SetToolTypeIfNeeded(this.HealerClassSettingsButton);
            this.CombatClassResetSettingsButton.Text = Translate.Get(Translate.Id.ResetSettings);
            this.SetToolTypeIfNeeded(this.CombatClassResetSettingsButton);
            this.HealerClassResetSettingsButton.Text = Translate.Get(Translate.Id.ResetSettings);
            this.SetToolTypeIfNeeded(this.HealerClassResetSettingsButton);
            this.closeB.Text = Translate.Get(Translate.Id.CloseWithoutSaving);
            this.SetToolTypeIfNeeded(this.closeB);
            this.resetB.Text = Translate.Get(Translate.Id.Reset_Settings);
            this.SetToolTypeIfNeeded(this.resetB);
            this.saveAndCloseB.Text = Translate.Get(Translate.Id.Save_and_Close);
            this.SetToolTypeIfNeeded(this.saveAndCloseB);
            this.MakeStackOfElementalsItemsLabel.Text = Translate.Get(Translate.Id.Auto_Make_Elemental);
            this.SetToolTypeIfNeeded(this.MakeStackOfElementalsItemsLabel);
            this.MainHeader.TitleText = Translate.Get(Translate.Id.General_Settings) + " - " + Information.MainTitle;
            this.Text = this.MainHeader.TitleText;
            this.AllowTNBToSetYourMaxFpsLabel.Text = Translate.Get(Translate.Id.Uncap_MaxFPS);
            this.SetToolTypeIfNeeded(this.AllowTNBToSetYourMaxFpsLabel);
            this.AutoConfirmOnBoPItemsLabel.Text = Translate.Get(Translate.Id.AutoConfirmOnBoPItems);
            this.SetToolTypeIfNeeded(this.AutoConfirmOnBoPItemsLabel);
            this.AlwaysOnTopFeatureLabel.Text = Translate.Get(Translate.Id.AlwaysOnTop);
            this.SetToolTypeIfNeeded(this.AlwaysOnTopFeatureLabel);
            this.SendMailWhenLessThanXSlotLeftLabel.Text = Translate.Get(Translate.Id.SendMailWhenLessThanXSlotLeft);
            this.SetToolTypeIfNeeded(this.SendMailWhenLessThanXSlotLeftLabel);
            this.SellItemsWhenLessThanXSlotLeftLabel.Text = Translate.Get(Translate.Id.SellItemsWhenLessThanXSlotLeft);
            this.SetToolTypeIfNeeded(this.SellItemsWhenLessThanXSlotLeftLabel);
            this.RepairWhenDurabilityIsUnderPercentLabel.Text = Translate.Get(Translate.Id.RepairWhenDurabilityIsUnderPercent);
            this.SetToolTypeIfNeeded(this.RepairWhenDurabilityIsUnderPercentLabel);
            this.UseHearthstoneLabel.Text = Translate.Get(Translate.Id.UseHearthstone);
            this.SetToolTypeIfNeeded(this.UseHearthstoneLabel);
            this.UseMollELabel.Text = Translate.Get(Translate.Id.UseMollE);
            this.SetToolTypeIfNeeded(this.UseMollELabel);
            this.UseRobotLabel.Text = Translate.Get(Translate.Id.UseRobot);
            this.SetToolTypeIfNeeded(this.UseRobotLabel);
            this.MimesisBroadcasterSettingsPanel.TitleText = Translate.Get(Translate.Id.MimesisBroadcasterSettings);
            this.SetToolTypeIfNeeded(this.MimesisBroadcasterSettingsPanel);
            this.AutoCloseChatFrameLabel.Text = Translate.Get(Translate.Id.AutoCloseChatFrame);
            this.SetToolTypeIfNeeded(this.AutoCloseChatFrameLabel);
            this.BroadcastingPortDefaultLabel.Text = Translate.Get(Translate.Id.BroadcastingPortDefault);
            this.SetToolTypeIfNeeded(this.BroadcastingPortDefaultLabel);
            this.BroadcastingIPWanLabel.Text = Translate.Get(Translate.Id.BroadcastingIPWan);
            this.SetToolTypeIfNeeded(this.BroadcastingIPWanLabel);
            this.BroadcastingIPLanLabel.Text = Translate.Get(Translate.Id.BroadcastingIPLan);
            this.SetToolTypeIfNeeded(this.BroadcastingIPLanLabel);
            this.ActivateBroadcastingMimesisLabel.Text = Translate.Get(Translate.Id.ActivateBroadcastingMimesis);
            this.SetToolTypeIfNeeded(this.ActivateBroadcastingMimesisLabel);
            this.BroadcastingIPLocalLabel.Text = Translate.Get(Translate.Id.BroadcastingIPLocal);
            this.SetToolTypeIfNeeded(this.BroadcastingIPLocalLabel);
            this.BroadcastingPortLabel.Text = Translate.Get(Translate.Id.BroadcastingPort);
            this.SetToolTypeIfNeeded(this.BroadcastingPortLabel);
            this.HideSDKFilesLabel.Text = Translate.Get(Translate.Id.HideSdkFiles);
            this.SetToolTypeIfNeeded(this.HideSDKFilesLabel);
            this.ActivateAlwaysOnTopFeature.OffText = str2;
            this.ActivateAlwaysOnTopFeature.OnText = str;
            this.AllowTNBToSetYourMaxFps.OffText = str2;
            this.AllowTNBToSetYourMaxFps.OnText = str;
            this.ActivatePathFindingFeature.OffText = str2;
            this.ActivatePathFindingFeature.OnText = str;
            this.ActiveStopTNBAfterXMinutes.OffText = str2;
            this.ActiveStopTNBAfterXMinutes.OnText = str;
            this.ActiveStopTNBAfterXStucks.OffText = str2;
            this.ActiveStopTNBAfterXStucks.OnText = str;
            this.ActiveStopTNBIfReceivedAtMostXWhispers.OffText = str2;
            this.ActiveStopTNBIfReceivedAtMostXWhispers.OnText = str;
            this.ActiveStopTNBAfterXLevelup.OffText = str2;
            this.ActiveStopTNBAfterXLevelup.OnText = str;
            this.UseHearthstone.OffText = str2;
            this.UseHearthstone.OnText = str;
            this.PlayASongIfNewWhispReceived.OffText = str2;
            this.PlayASongIfNewWhispReceived.OnText = str;
            this.RecordWhispsInLogFiles.OffText = str2;
            this.RecordWhispsInLogFiles.OnText = str;
            this.StopTNBIfPlayerHaveBeenTeleported.OffText = str2;
            this.StopTNBIfPlayerHaveBeenTeleported.OnText = str;
            this.PauseTNBIfNearByPlayer.OffText = str2;
            this.PauseTNBIfNearByPlayer.OnText = str;
            this.StopTNBIfHonorPointsLimitReached.OffText = str2;
            this.StopTNBIfHonorPointsLimitReached.OnText = str;
            this.StopTNBIfBagAreFull.OffText = str2;
            this.StopTNBIfBagAreFull.OnText = str;
            this.UseMollE.OffText = str2;
            this.UseMollE.OnText = str;
            this.ActivateAutoMaillingFeature.OffText = str2;
            this.ActivateAutoMaillingFeature.OnText = str;
            this.UseRobot.OffText = str2;
            this.UseRobot.OnText = str;
            this.ActivateAutoSellingFeature.OffText = str2;
            this.ActivateAutoSellingFeature.OnText = str;
            this.ActivateAutoRepairFeature.OffText = str2;
            this.ActivateAutoRepairFeature.OnText = str;
            this.AutoConfirmOnBoPItems.OffText = str2;
            this.AutoConfirmOnBoPItems.OnText = str;
            this.OnlyUseMillingInTown.OffText = str2;
            this.OnlyUseMillingInTown.OnText = str;
            this.ActivateAutoMilling.OffText = str2;
            this.ActivateAutoMilling.OnText = str;
            this.MakeStackOfElementalsItems.OffText = str2;
            this.MakeStackOfElementalsItems.OnText = str;
            this.OnlyUseProspectingInTown.OffText = str2;
            this.OnlyUseProspectingInTown.OnText = str;
            this.ActivateAutoProspecting.OffText = str2;
            this.ActivateAutoProspecting.OnText = str;
            this.ActivateAutoSmelting.OffText = str2;
            this.ActivateAutoSmelting.OnText = str;
            this.HarvestDuringLongDistanceMovements.OffText = str2;
            this.HarvestDuringLongDistanceMovements.OnText = str;
            this.BeastNinjaSkinning.OffText = str2;
            this.BeastNinjaSkinning.OnText = str;
            this.ActivateHerbsHarvesting.OffText = str2;
            this.ActivateHerbsHarvesting.OnText = str;
            this.ActivateVeinsHarvesting.OffText = str2;
            this.ActivateVeinsHarvesting.OnText = str;
            this.ActivateBeastSkinning.OffText = str2;
            this.ActivateBeastSkinning.OnText = str;
            this.ActivateChestLooting.OffText = str2;
            this.ActivateChestLooting.OnText = str;
            this.ActivateMonsterLooting.OffText = str2;
            this.ActivateMonsterLooting.OnText = str;
            this.ActivateLootStatistics.OffText = str2;
            this.ActivateLootStatistics.OnText = str;
            this.DoRegenManaIfLow.OffText = str2;
            this.DoRegenManaIfLow.OnText = str;
            this.IgnoreFightIfMounted.OffText = str2;
            this.IgnoreFightIfMounted.OnText = str;
            this.UseGroundMount.OffText = str2;
            this.UseGroundMount.OnText = str;
            this.UseSpiritHealer.OffText = str2;
            this.UseSpiritHealer.OnText = str;
            this.ActivateSkillsAutoTraining.OffText = str2;
            this.ActivateSkillsAutoTraining.OnText = str;
            this.OnlyTrainCurrentlyUsedSkills.OffText = str2;
            this.OnlyTrainCurrentlyUsedSkills.OnText = str;
            this.TrainMountingCapacity.OffText = str2;
            this.TrainMountingCapacity.OnText = str;
            this.OnlyTrainIfWeHave2TimesMoreMoneyThanOurWishListSum.OffText = str2;
            this.OnlyTrainIfWeHave2TimesMoreMoneyThanOurWishListSum.OnText = str;
            this.BecomeApprenticeIfNeededByProduct.OffText = str2;
            this.BecomeApprenticeIfNeededByProduct.OnText = str;
            this.BecomeApprenticeOfSecondarySkillsWhileQuesting.OffText = str2;
            this.BecomeApprenticeOfSecondarySkillsWhileQuesting.OnText = str;
            this.DontPullMonsters.OffText = str2;
            this.DontPullMonsters.OnText = str;
            this.CanPullUnitsAlreadyInFight.OffText = str2;
            this.CanPullUnitsAlreadyInFight.OnText = str;
            this.AutoAssignTalents.OffText = str2;
            this.AutoAssignTalents.OnText = str;
            this.ActivateBroadcastingMimesis.OffText = str2;
            this.ActivateBroadcastingMimesis.OnText = str;
            this.AutoCloseChatFrame.OffText = str2;
            this.AutoCloseChatFrame.OnText = str;
            this.ActivatePluginsSystem.OffText = str2;
            this.ActivatePluginsSystem.OnText = str;
            this.LaunchExpiredPlugins.OffText = str2;
            this.LaunchExpiredPlugins.OnText = str;
            this.HideSDKFiles.OffText = str2;
            this.HideSDKFiles.OnText = str;
            this.UseLootARange.OffText = str2;
            this.UseLootARange.OnText = str;
            this.HideCharacterNameFromTitle.OffText = str2;
            this.HideCharacterNameFromTitle.OnText = str;
        }

        private void UnLoadPlugin(object sender, EventArgs e)
        {
            this.DeactivatePlugin.Enabled = false;
            if ((this.ActivatedPluginsList.Items.Count <= 0) || (this.ActivatedPluginsList.SelectedIndex < 0))
            {
                MessageBox.Show("There is no plugins activated or selected.");
                this.DeactivatePlugin.Enabled = true;
            }
            else
            {
                this.AvailablePluginsList.Items.Add(this.ActivatedPluginsList.SelectedItem);
                this.ActivatedPluginsList.Items.Remove(this.ActivatedPluginsList.SelectedItem);
                nManager.Plugins.Plugins.DisposePlugins();
                this.DeactivatePlugin.Enabled = true;
            }
        }
    }
}

